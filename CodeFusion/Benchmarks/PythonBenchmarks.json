{"train": [{"ID": 41067960, "NL Utterance": "Concatenate elements of a list 'x' of multiple integers to a single integer", "Code": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))"}, {"ID": 41067960, "NL Utterance": "convert a list of integers into a single integer", "Code": "r = int(''.join(map(str, x)))"}, {"ID": 4170655, "NL Utterance": "convert a DateTime string back to a DateTime object of format '%Y-%m-%d %H:%M:%S.%f'", "Code": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')"}, {"ID": 29565452, "NL Utterance": "get the average of a list values for each key in dictionary `d`)", "Code": "[(i, sum(j) / len(j)) for i, j in list(d.items())]"}, {"ID": 13704860, "NL Utterance": "zip two lists `[1, 2]` and `[3, 4]` into a list of two tuples containing elements at the same index in each list", "Code": "zip([1, 2], [3, 4])"}, {"ID": 13331419, "NL Utterance": "prepend string 'hello' to all items in list 'a'", "Code": "['hello{0}'.format(i) for i in a]"}, {"ID": 25474338, "NL Utterance": "regex for repeating words in a string `s`", "Code": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)"}, {"ID": 18594469, "NL Utterance": "normalize a pandas dataframe `df` by row", "Code": "df.div(df.sum(axis=1), axis=0)"}, {"ID": 13384841, "NL Utterance": "swap values in a tuple/list inside a list `mylist`", "Code": "map(lambda t: (t[1], t[0]), mylist)"}, {"ID": 13384841, "NL Utterance": "Swap values in a tuple/list in list `mylist`", "Code": "[(t[1], t[0]) for t in mylist]"}, {"ID": 23887592, "NL Utterance": null, "Code": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")"}, {"ID": 17352321, "NL Utterance": "find all occurrences of the pattern '\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+' within `strs`", "Code": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)"}, {"ID": 10115967, "NL Utterance": "generate the combinations of 3 from a set `{1, 2, 3, 4}`", "Code": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))"}, {"ID": 30026815, "NL Utterance": "add multiple columns `hour`, `weekday`, `weeknum` to pandas data frame `df` from lambda function `lambdafunc`", "Code": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)"}, {"ID": 31958637, "NL Utterance": "BeautifulSoup search string 'Elsie' inside tag 'a'", "Code": "soup.find_all('a', string='Elsie')"}, {"ID": 2158347, "NL Utterance": "Convert a datetime object `my_datetime` into readable format `%B %d, %Y`", "Code": "my_datetime.strftime('%B %d, %Y')"}, {"ID": 17888152, "NL Utterance": "parse string `s` to int when string contains a number", "Code": "int(''.join(c for c in s if c.isdigit()))"}, {"ID": 37855490, "NL Utterance": "add dictionary `{'class': {'section': 5}}` to key 'Test' of dictionary `dic`", "Code": "dic['Test'].update({'class': {'section': 5}})"}, {"ID": 4127344, "NL Utterance": "transforming the string `s` into dictionary", "Code": "dict(map(int, x.split(':')) for x in s.split(','))"}, {"ID": 19035186, "NL Utterance": null, "Code": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")"}, {"ID": 25823608, "NL Utterance": "find rows matching `(0,1)` in a 2 dimensional numpy array `vals`", "Code": "np.where((vals == (0, 1)).all(axis=1))"}, {"ID": 3805958, "NL Utterance": null, "Code": "SomeModel.objects.filter(id=id).delete()"}, {"ID": 6900955, "NL Utterance": "build a dictionary containing the conversion of each list in list `[['two', 2], ['one', 1]]` to a key/value pair as its items", "Code": "dict([['two', 2], ['one', 1]])"}, {"ID": 6900955, "NL Utterance": "convert list `l` to dictionary having each two adjacent elements as key/value pair", "Code": "dict(zip(l[::2], l[1::2]))"}, {"ID": 18224991, "NL Utterance": "assign float 9.8 to variable `GRAVITY`", "Code": "GRAVITY = 9.8"}, {"ID": 15103484, "NL Utterance": "separate numbers from characters in string \"30m1000n20m\"", "Code": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')"}, {"ID": 15103484, "NL Utterance": "separate numbers and characters in string '20M10000N80M'", "Code": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')"}, {"ID": 15103484, "NL Utterance": "separate numbers and characters in string '20M10000N80M'", "Code": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')"}, {"ID": 7633274, "NL Utterance": "Get a list of  words from a string `Hello world, my name is...James the 2nd!` removing punctuation", "Code": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')"}, {"ID": 14295673, "NL Utterance": "Convert string '03:55' into datetime.time object", "Code": "datetime.datetime.strptime('03:55', '%H:%M').time()"}, {"ID": 28667684, "NL Utterance": "request url 'https://www.reporo.com/' without verifying SSL certificates", "Code": "requests.get('https://www.reporo.com/', verify=False)"}, {"ID": 5927180, "NL Utterance": "Extract values not equal to 0 from numpy array `a`", "Code": "a[a != 0]"}, {"ID": 209840, "NL Utterance": "map two lists `keys` and `values` into a dictionary", "Code": "new_dict = {k: v for k, v in zip(keys, values)}"}, {"ID": 209840, "NL Utterance": "map two lists `keys` and `values` into a dictionary", "Code": "dict((k, v) for k, v in zip(keys, values))"}, {"ID": 209840, "NL Utterance": "map two lists `keys` and `values` into a dictionary", "Code": "dict([(k, v) for k, v in zip(keys, values)])"}, {"ID": 8569201, "NL Utterance": "find the string matches within parenthesis from a string `s` using regex", "Code": "m = re.search('\\\\[(\\\\w+)\\\\]', s)"}, {"ID": 12362542, "NL Utterance": "Enable the SO_REUSEADDR socket option in socket object `s` to fix the error `only one usage of each socket address is normally permitted`", "Code": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)"}, {"ID": 11703064, "NL Utterance": "append the sum of each tuple pair in the grouped list `list1` and list `list2` elements to list `list3`", "Code": "list3 = [(a + b) for a, b in zip(list1, list2)]"}, {"ID": 7595148, "NL Utterance": "converting hex string `s` to its integer representations", "Code": "[ord(c) for c in s.decode('hex')]"}, {"ID": 16537636, "NL Utterance": "sort list `student_tuples` by second element of each tuple in ascending and third element of each tuple in descending", "Code": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))"}, {"ID": 3925465, "NL Utterance": "get list of duplicated elements in range of 3", "Code": "[y for x in range(3) for y in [x, x]]"}, {"ID": 3278850, "NL Utterance": "read the contents of the file 'file.txt' into `txt`", "Code": "txt = open('file.txt').read()"}, {"ID": 8244915, "NL Utterance": "divide each element in list `myList` by integer `myInt`", "Code": "myList[:] = [(x / myInt) for x in myList]"}, {"ID": 7934620, "NL Utterance": null, "Code": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})"}, {"ID": 42462530, "NL Utterance": "replace white spaces in dataframe `df` with '_'", "Code": "df.replace(' ', '_', regex=True)"}, {"ID": 15661013, "NL Utterance": "convert date `my_date` to datetime", "Code": "datetime.datetime.combine(my_date, datetime.time.min)"}, {"ID": 3886669, "NL Utterance": "convert tuple `tst` to string `tst2`", "Code": "tst2 = str(tst)"}, {"ID": 237079, "NL Utterance": "get modified time of file `file`", "Code": "time.ctime(os.path.getmtime(file))"}, {"ID": 237079, "NL Utterance": "get creation time of file `file`", "Code": "time.ctime(os.path.getctime(file))"}, {"ID": 237079, "NL Utterance": "get modification time of file `filename`", "Code": "t = os.path.getmtime(filename)"}, {"ID": 237079, "NL Utterance": "get modification time of file `path`", "Code": "os.path.getmtime(path)"}, {"ID": 237079, "NL Utterance": "get modified time of file `file`", "Code": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))"}, {"ID": 237079, "NL Utterance": "get the creation time of file `file`", "Code": "print(('created: %s' % time.ctime(os.path.getctime(file))))"}, {"ID": 237079, "NL Utterance": "get the creation time of file `path_to_file`", "Code": "return os.path.getctime(path_to_file)"}, {"ID": 5625524, "NL Utterance": "execute os command ''TASKKILL /F /IM firefox.exe''", "Code": "os.system('TASKKILL /F /IM firefox.exe')"}, {"ID": 3862010, "NL Utterance": "split string `string` on whitespaces using a generator", "Code": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))"}, {"ID": 7568627, "NL Utterance": "Unpack each value in list `x` to its placeholder '%' in string '%.2f'", "Code": "\"\"\", \"\"\".join(['%.2f'] * len(x))"}, {"ID": 9891814, "NL Utterance": "match regex pattern '(\\\\d+(\\\\.\\\\d+)?)' with string '3434.35353'", "Code": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))"}, {"ID": 20894525, "NL Utterance": "replace parentheses and all data within it with empty string '' in column 'name' of dataframe `df`", "Code": "df['name'].str.replace('\\\\(.*\\\\)', '')"}, {"ID": 18448469, "NL Utterance": "create a list `result` containing elements form list `list_a` if first element of list `list_a` is in list `list_b`", "Code": "result = [x for x in list_a if x[0] in list_b]"}, {"ID": 4059550, "NL Utterance": "generate all possible string permutations of each two elements in list `['hel', 'lo', 'bye']`", "Code": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])"}, {"ID": 6889785, "NL Utterance": "get a list of items form nested list `li` where third element of each item contains string 'ar'", "Code": "[x for x in li if 'ar' in x[2]]"}, {"ID": 17555218, "NL Utterance": "Sort lists in the list `unsorted_list` by the element at index 3 of each list", "Code": "unsorted_list.sort(key=lambda x: x[3])"}, {"ID": 18292500, "NL Utterance": "Log message 'test' on the root logger.", "Code": "logging.info('test')"}, {"ID": 1358977, "NL Utterance": "Return a subplot axes positioned by the grid definition `1,1,1` using matpotlib", "Code": "fig.add_subplot(1, 1, 1)"}, {"ID": 613183, "NL Utterance": "Sort dictionary `x` by value in ascending order", "Code": "sorted(list(x.items()), key=operator.itemgetter(1))"}, {"ID": 613183, "NL Utterance": "Sort dictionary `dict1` by value in ascending order", "Code": "sorted(dict1, key=dict1.get)"}, {"ID": 613183, "NL Utterance": "Sort dictionary `d` by value in descending order", "Code": "sorted(d, key=d.get, reverse=True)"}, {"ID": 613183, "NL Utterance": "Sort dictionary `d` by value in ascending order", "Code": "sorted(list(d.items()), key=(lambda x: x[1]))"}, {"ID": 31957364, "NL Utterance": "elementwise product of 3d arrays `A` and `B`", "Code": "np.einsum('ijk,ikl->ijl', A, B)"}, {"ID": 14041791, "NL Utterance": "Print a string `card` with string formatting", "Code": "print('I have: {0.price}'.format(card))"}, {"ID": 30994370, "NL Utterance": "Write a comment `# Data for Class A\\n` to a file object `f`", "Code": "f.write('# Data for Class A\\n')"}, {"ID": 6490560, "NL Utterance": "move the last item in list `a` to the beginning", "Code": "a = a[-1:] + a[:-1]"}, {"ID": 40173569, "NL Utterance": "Parse DateTime object `datetimevariable` using format '%Y-%m-%d'", "Code": "datetimevariable.strftime('%Y-%m-%d')"}, {"ID": 1749466, "NL Utterance": "Normalize line ends in a string 'mixed'", "Code": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')"}, {"ID": 2668909, "NL Utterance": "find the real user home directory using python", "Code": "os.path.expanduser('~user')"}, {"ID": 1012185, "NL Utterance": "index a list `L` with another list `Idx`", "Code": "T = [L[i] for i in Idx]"}, {"ID": 7745260, "NL Utterance": "get a list of words `words` of a file 'myfile'", "Code": "words = open('myfile').read().split()"}, {"ID": 37619348, "NL Utterance": "Get a list of lists with summing the values of the second element from each list of lists `data`", "Code": "[[sum([x[1] for x in i])] for i in data]"}, {"ID": 37619348, "NL Utterance": "summing the second item in a list of lists of lists", "Code": "[sum([x[1] for x in i]) for i in data]"}, {"ID": 35097130, "NL Utterance": "sort objects in `Articles` in descending order of counts of `likes`", "Code": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')"}, {"ID": 27587127, "NL Utterance": "return a DateTime object with the current UTC date", "Code": "today = datetime.datetime.utcnow().date()"}, {"ID": 10271484, "NL Utterance": "create a list containing the multiplication of each elements at the same index of list `lista` and list `listb`", "Code": "[(a * b) for a, b in zip(lista, listb)]"}, {"ID": 14571103, "NL Utterance": "fetch smilies matching regex pattern '(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)' in string `s`", "Code": "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)"}, {"ID": 14571103, "NL Utterance": "match the pattern '[:;][)(](?![)(])' to the string `str`", "Code": "re.match('[:;][)(](?![)(])', str)"}, {"ID": 26033239, "NL Utterance": "convert a list of objects `list_name` to json string `json_string`", "Code": "json_string = json.dumps([ob.__dict__ for ob in list_name])"}, {"ID": 8528178, "NL Utterance": "create a list `listofzeros` of `n` zeros", "Code": "listofzeros = [0] * n"}, {"ID": 4182603, "NL Utterance": "decode the string 'stringnamehere'  to UTF-8", "Code": "stringnamehere.decode('utf-8', 'ignore')"}, {"ID": 11985628, "NL Utterance": "Match regex pattern '((?:A|B|C)D)' on string 'BDE'", "Code": "re.findall('((?:A|B|C)D)', 'BDE')"}, {"ID": 12905999, "NL Utterance": "Create a key `key` if it does not exist in dict `dic` and append element `value` to value.", "Code": "dic.setdefault(key, []).append(value)"}, {"ID": 14956683, "NL Utterance": "Get the value of the minimum element in the second column of array `a`", "Code": "a[np.argmin(a[:, (1)])]"}, {"ID": 577234, "NL Utterance": "extend dictionary `a` with key/value pairs of dictionary `b`", "Code": "a.update(b)"}, {"ID": 13254241, "NL Utterance": "removing key values pairs with key 'mykey1' from a list of dictionaries `mylist`", "Code": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]"}, {"ID": 13254241, "NL Utterance": null, "Code": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]"}, {"ID": 15451958, "NL Utterance": "create 3 by 3 matrix of random numbers", "Code": "numpy.random.random((3, 3))"}, {"ID": 34023918, "NL Utterance": "make new column 'C' in panda dataframe by adding values from other columns 'A' and 'B'", "Code": "df['C'] = df['A'] + df['B']"}, {"ID": 10484261, "NL Utterance": "create a list of values from the dictionary `programs` that have a key with a case insensitive match to 'new york'", "Code": "[value for key, value in list(programs.items()) if 'new york' in key.lower()]"}, {"ID": 9153527, "NL Utterance": "append a path `/path/to/main_folder` in system path", "Code": "sys.path.append('/path/to/main_folder')"}, {"ID": 34338341, "NL Utterance": "get all digits in a string `s` after a '[' character", "Code": "re.findall('\\\\d+(?=[^[]+$)', s)"}, {"ID": 18229082, "NL Utterance": "python pickle/unpickle a list to/from a file 'afile'", "Code": "pickle.load(open('afile', 'rb'))"}, {"ID": 17498027, "NL Utterance": null, "Code": "driver.find_element_by_xpath('xpath').click()"}, {"ID": 35178812, "NL Utterance": "count unique index values in column 'A' in pandas dataframe `ex`", "Code": "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())"}, {"ID": 15455388, "NL Utterance": "Create a pandas dataframe of values from a dictionary `d` which contains dictionaries of dictionaries", "Code": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)"}, {"ID": 14914615, "NL Utterance": "find out the number of non-matched elements at the same index of list `a` and list `b`", "Code": "sum(1 for i, j in zip(a, b) if i != j)"}, {"ID": 21833383, "NL Utterance": "make all keys lowercase in dictionary `d`", "Code": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}"}, {"ID": 19643099, "NL Utterance": "sort list `list_` based on first element of each tuple and by the length of the second element of each tuple", "Code": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])"}, {"ID": 1185524, "NL Utterance": "trim whitespace in string `s`", "Code": "s.strip()"}, {"ID": 1185524, "NL Utterance": "trim whitespace (including tabs) in `s` on the left side", "Code": "s = s.lstrip()"}, {"ID": 1185524, "NL Utterance": "trim whitespace (including tabs) in `s` on the right side", "Code": "s = s.rstrip()"}, {"ID": 1185524, "NL Utterance": "trim characters ' \\t\\n\\r' in `s`", "Code": "s = s.strip(' \\t\\n\\r')"}, {"ID": 1185524, "NL Utterance": "trim whitespaces (including tabs) in string `s`", "Code": "print(re.sub('[\\\\s+]', '', s))"}, {"ID": 1516795, "NL Utterance": "In Django, filter `Task.objects` based on all entities in ['A', 'P', 'F']", "Code": "Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])"}, {"ID": 2744795, "NL Utterance": "Change background color in Tkinter", "Code": "root.configure(background='black')"}, {"ID": 15579649, "NL Utterance": "convert dict `result` to numpy structured array", "Code": "numpy.array([(key, val) for key, val in result.items()], dtype)"}, {"ID": 41192805, "NL Utterance": "Concatenate dataframe `df_1` to dataframe `df_2` sorted by values of the column 'y'", "Code": "pd.concat([df_1, df_2.sort_values('y')])"}, {"ID": 2556108, "NL Utterance": "replace the last occurence of an expression '</div>' with '</bad>' in a string `s`", "Code": "re.sub('(.*)</div>', '\\\\1</bad>', s)"}, {"ID": 42211584, "NL Utterance": "get the maximum of 'salary' and 'bonus' values in a dictionary", "Code": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))"}, {"ID": 5301996, "NL Utterance": "Filter Django objects by `author` with ids `1` and `2`", "Code": "Book.objects.filter(author__id=1).filter(author__id=2)"}, {"ID": 8993904, "NL Utterance": "split string 'fooxyzbar' based on case-insensitive matching using string 'XYZ'", "Code": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')"}, {"ID": 40498088, "NL Utterance": "get list of sums of neighboring integers in string `example`", "Code": "[sum(map(int, s)) for s in example.split()]"}, {"ID": 1920145, "NL Utterance": "Get all the keys from dictionary `y` whose value is `1`", "Code": "[i for i in y if y[i] == 1]"}, {"ID": 13837848, "NL Utterance": "converting byte string `c` in unicode string", "Code": "c.decode('unicode_escape')"}, {"ID": 23354124, "NL Utterance": "unpivot first 2 columns into new columns 'year' and 'value' from a pandas dataframe `x`", "Code": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')"}, {"ID": 6416131, "NL Utterance": "add key \"item3\" and value \"3\" to dictionary `default_data `", "Code": "default_data['item3'] = 3"}, {"ID": 6416131, "NL Utterance": "add key \"item3\" and value \"3\" to dictionary `default_data `", "Code": "default_data.update({'item3': 3, })"}, {"ID": 6416131, "NL Utterance": "add key value pairs 'item4' , 4 and 'item5' , 5 to dictionary `default_data`", "Code": "default_data.update({'item4': 4, 'item5': 5, })"}, {"ID": 40016359, "NL Utterance": "Get the first and last 3 elements of list `l`", "Code": "l[:3] + l[-3:]"}, {"ID": 20490274, "NL Utterance": "reset index to default in dataframe `df`", "Code": "df = df.reset_index(drop=True)"}, {"ID": 18872717, "NL Utterance": "For each index `x` from 0 to 3, append the element at index `x` of list `b` to the list at index `x` of list a.", "Code": "[a[x].append(b[x]) for x in range(3)]"}, {"ID": 3220755, "NL Utterance": "get canonical path of the filename `path`", "Code": "os.path.realpath(path)"}, {"ID": 18170459, "NL Utterance": "check if dictionary `L[0].f.items()` is in dictionary `a3.f.items()`", "Code": "set(L[0].f.items()).issubset(set(a3.f.items()))"}, {"ID": 27175400, "NL Utterance": "find all the indexes in a Numpy 2D array where the value is 1", "Code": "zip(*np.where(a == 1))"}, {"ID": 27175400, "NL Utterance": null, "Code": "np.where(a == 1)"}, {"ID": 14507794, "NL Utterance": "Collapse hierarchical column index to level 0 in dataframe `df`", "Code": "df.columns = df.columns.get_level_values(0)"}, {"ID": 4690366, "NL Utterance": "create a matrix from a list `[1, 2, 3]`", "Code": "x = scipy.matrix([1, 2, 3]).transpose()"}, {"ID": 20735384, "NL Utterance": "add character '@' after word 'get' in string `text`", "Code": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)"}, {"ID": 39277638, "NL Utterance": "get a numpy array that contains the element wise minimum of three 3x1 arrays", "Code": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)"}, {"ID": 12168648, "NL Utterance": "add a column 'new_col' to dataframe `df` for index in range", "Code": "df['new_col'] = list(range(1, len(df) + 1))"}, {"ID": 5971312, "NL Utterance": "set environment variable 'DEBUSSY' equal to 1", "Code": "os.environ['DEBUSSY'] = '1'"}, {"ID": 5971312, "NL Utterance": "Get a environment variable `DEBUSSY`", "Code": "print(os.environ['DEBUSSY'])"}, {"ID": 5971312, "NL Utterance": "set environment variable 'DEBUSSY' to '1'", "Code": "os.environ['DEBUSSY'] = '1'"}, {"ID": 12717716, "NL Utterance": "update dictionary `b`, overwriting values where keys are identical, with contents of dictionary `d`", "Code": "b.update(d)"}, {"ID": 17193850, "NL Utterance": "get all the values in column `b` from pandas data frame `df`", "Code": "df['b']"}, {"ID": 13395888, "NL Utterance": "make a line plot with errorbars, `ebar`, from data `x, y, err` and set color of the errorbars to `y` (yellow)", "Code": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')"}, {"ID": 3608411, "NL Utterance": "find all files with extension '.c' in directory `folder`", "Code": "results += [each for each in os.listdir(folder) if each.endswith('.c')]"}, {"ID": 31771758, "NL Utterance": "add unicode string '1' to UTF-8 decoded string '\\xc2\\xa3'", "Code": "print('\\xc2\\xa3'.decode('utf8') + '1')"}, {"ID": 39414085, "NL Utterance": "lower-case the string obtained by replacing the occurrences of regex pattern '(?<=[a-z])([A-Z])' in string `s` with eplacement '-\\\\1'", "Code": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()"}, {"ID": 5061582, "NL Utterance": null, "Code": "os.system('ulimit -s unlimited; some_executable')"}, {"ID": 2389846, "NL Utterance": "format a string `num` using string formatting", "Code": "\"\"\"{0:.3g}\"\"\".format(num)"}, {"ID": 7332841, "NL Utterance": "append the first element of array `a` to array `a`", "Code": "numpy.append(a, a[0])"}, {"ID": 38331568, "NL Utterance": "return the column for value 38.15 in dataframe `df`", "Code": "df.ix[:, (df.loc[0] == 38.15)].columns"}, {"ID": 41463763, "NL Utterance": "merge 2 dataframes `df1` and `df2` with same values in a column 'revenue' with and index 'date'", "Code": "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])"}, {"ID": 23970693, "NL Utterance": "load a json data `json_string` into variable `json_data`", "Code": "json_data = json.loads(json_string)"}, {"ID": 9875964, "NL Utterance": "convert radians 1 to degrees", "Code": "math.cos(math.radians(1))"}, {"ID": 25355705, "NL Utterance": "count the number of integers in list `a`", "Code": "sum(isinstance(x, int) for x in a)"}, {"ID": 31522361, "NL Utterance": "replacing  '\\u200b' with '*' in a string  using regular expressions", "Code": "'used\\u200b'.replace('\\u200b', '*')"}, {"ID": 2108126, "NL Utterance": "run function 'SudsMove' simultaneously", "Code": "threading.Thread(target=SudsMove).start()"}, {"ID": 26894227, "NL Utterance": "sum of squares values in a list `l`", "Code": "sum(i * i for i in l)"}, {"ID": 26894227, "NL Utterance": "calculate the sum of the squares of each value in list `l`", "Code": "sum(map(lambda x: x * x, l))"}, {"ID": 1747817, "NL Utterance": "Create a dictionary `d` from list `iterable`", "Code": "d = dict(((key, value) for (key, value) in iterable))"}, {"ID": 1747817, "NL Utterance": "Create a dictionary `d` from list `iterable`", "Code": "d = {key: value for (key, value) in iterable}"}, {"ID": 1747817, "NL Utterance": "Create a dictionary `d` from list of key value pairs `iterable`", "Code": "d = {k: v for (k, v) in iterable}"}, {"ID": 19100540, "NL Utterance": "round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places", "Code": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"}, {"ID": 7668141, "NL Utterance": "Make function `WRITEFUNCTION` output nothing in curl `p`", "Code": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)"}, {"ID": 1456617, "NL Utterance": "return a random word from a word list 'words'", "Code": "print(random.choice(words))"}, {"ID": 12829889, "NL Utterance": "Find a max value of the key `count` in a nested dictionary `d`", "Code": "max(d, key=lambda x: d[x]['count'])"}, {"ID": 2606976, "NL Utterance": "get list of string elements in string `data` delimited by commas, putting `0` in place of empty strings", "Code": "[(int(x) if x else 0) for x in data.split(',')]"}, {"ID": 2606976, "NL Utterance": "split string `s` into a list of strings based on ',' then replace empty strings with zero", "Code": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))"}, {"ID": 940822, "NL Utterance": "regular expression match nothing", "Code": "re.compile('$^')"}, {"ID": 940822, "NL Utterance": "regular expression syntax for not to match anything", "Code": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')"}, {"ID": 940822, "NL Utterance": "create a regular expression object with a pattern that will match nothing", "Code": "re.compile('a^')"}, {"ID": 26897536, "NL Utterance": "drop all columns in dataframe `df` that holds a maximum value bigger than 0", "Code": "df.columns[df.max() > 0]"}, {"ID": 6407362, "NL Utterance": "check if date `yourdatetime` is equal to today's date", "Code": "yourdatetime.date() == datetime.today().date()"}, {"ID": 8924173, "NL Utterance": "print bold text 'Hello'", "Code": "print('\\x1b[1m' + 'Hello')"}, {"ID": 4358701, "NL Utterance": "remove 20 symbols in front of '.' in string 'unique12345678901234567890.mkv'", "Code": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')"}, {"ID": 17589590, "NL Utterance": "Define a list with string values `['a', 'c', 'b', 'obj']`", "Code": "['a', 'c', 'b', 'obj']"}, {"ID": 2077897, "NL Utterance": "substitute multiple whitespace with single whitespace in string `mystring`", "Code": "\"\"\" \"\"\".join(mystring.split())"}, {"ID": 20048987, "NL Utterance": "print a floating point number 2.345e-67 without any truncation", "Code": "print('{:.100f}'.format(2.345e-67))"}, {"ID": 1602934, "NL Utterance": "Check if key 'key1' in `dict`", "Code": "('key1' in dict)"}, {"ID": 1602934, "NL Utterance": "Check if key 'a' in `d`", "Code": "('a' in d)"}, {"ID": 1602934, "NL Utterance": "Check if key 'c' in `d`", "Code": "('c' in d)"}, {"ID": 1602934, "NL Utterance": "Check if a given key 'key1' exists in dictionary `dict`", "Code": "if ('key1' in dict):\n    pass"}, {"ID": 1602934, "NL Utterance": "Check if a given key `key` exists in dictionary `d`", "Code": "if (key in d):\n    pass"}, {"ID": 9304908, "NL Utterance": "create a django query for a list of values `1, 4, 7`", "Code": "Blog.objects.filter(pk__in=[1, 4, 7])"}, {"ID": 2497027, "NL Utterance": "read a binary file 'test/test.pdf'", "Code": "f = open('test/test.pdf', 'rb')"}, {"ID": 17484631, "NL Utterance": "insert ' ' between every three digit before '.' and replace ',' with '.' in 12345678.46", "Code": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')"}, {"ID": 20375561, "NL Utterance": "Join pandas data frame `frame_1` and `frame_2` with left join by `county_ID` and right join by `countyid`", "Code": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')"}, {"ID": 38708621, "NL Utterance": "calculate ratio of sparsity in a numpy array `a`", "Code": "np.isnan(a).sum() / np.prod(a.shape)"}, {"ID": 10194713, "NL Utterance": "reverse sort items in default dictionary `cityPopulation` by the third item in each key's list of values", "Code": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)"}, {"ID": 10194713, "NL Utterance": "Sort dictionary `u` in ascending order based on second elements of its values", "Code": "sorted(list(u.items()), key=lambda v: v[1])"}, {"ID": 10194713, "NL Utterance": "reverse sort dictionary `d` based on its values", "Code": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)"}, {"ID": 10194713, "NL Utterance": "sorting a defaultdict `d` by value", "Code": "sorted(list(d.items()), key=lambda k_v: k_v[1])"}, {"ID": 4060221, "NL Utterance": "open a file 'bundled-resource.jpg' in the same directory as a python script", "Code": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))"}, {"ID": 13954840, "NL Utterance": "open the file 'words.txt' in 'rU' mode", "Code": "f = open('words.txt', 'rU')"}, {"ID": 11840111, "NL Utterance": "divide the values with same keys of two dictionary `d1` and `d2`", "Code": "{k: (float(d2[k]) / d1[k]) for k in d2}"}, {"ID": 11840111, "NL Utterance": "divide the value for each key `k` in dict `d2` by the value for the same key `k` in dict `d1`", "Code": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}"}, {"ID": 11840111, "NL Utterance": "divide values associated with each key in dictionary `d1` from values associated with the same key in dictionary `d2`", "Code": "dict((k, float(d2[k]) / d1[k]) for k in d2)"}, {"ID": 13999850, "NL Utterance": "write dataframe `df` to csv file `filename` with dates formatted as yearmonthday  `%Y%m%d`", "Code": "df.to_csv(filename, date_format='%Y%m%d')"}, {"ID": 11277432, "NL Utterance": "remove a key 'key' from a dictionary `my_dict`", "Code": "my_dict.pop('key', None)"}, {"ID": 1800187, "NL Utterance": "replace NaN values in array `a` with zeros", "Code": "b = np.where(np.isnan(a), 0, a)"}, {"ID": 9554544, "NL Utterance": "subprocess run command 'start command -flags arguments' through the shell", "Code": "subprocess.call('start command -flags arguments', shell=True)"}, {"ID": 9554544, "NL Utterance": "run command 'command -flags arguments &' on command line tools as separate processes", "Code": "subprocess.call('command -flags arguments &', shell=True)"}, {"ID": 12527959, "NL Utterance": "replace percent-encoded code in request `f` to their single-character equivalent", "Code": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))"}, {"ID": 2372573, "NL Utterance": "remove white spaces from the end of string \"    xyz     \"", "Code": "\"\"\"    xyz     \"\"\".rstrip()"}, {"ID": 8905864, "NL Utterance": "Replace special characters in utf-8 encoded string `s` using the %xx escape", "Code": "urllib.parse.quote(s.encode('utf-8'))"}, {"ID": 8905864, "NL Utterance": null, "Code": "urllib.parse.quote_plus('a b')"}, {"ID": 28207743, "NL Utterance": "Create an array containing the conversion of string '100110' into separate elements", "Code": "np.array(map(int, '100110'))"}, {"ID": 28207743, "NL Utterance": "convert a string 'mystr' to numpy array of integer values", "Code": "print(np.array(list(mystr), dtype=int))"}, {"ID": 12201577, "NL Utterance": "convert an rgb image 'messi5.jpg' into grayscale `img`", "Code": "img = cv2.imread('messi5.jpg', 0)"}, {"ID": 11584773, "NL Utterance": "sort list `lst` in descending order based on the second item of each tuple in it", "Code": "lst.sort(key=lambda x: x[2], reverse=True)"}, {"ID": 6294179, "NL Utterance": null, "Code": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']"}, {"ID": 18050937, "NL Utterance": "execute shell command 'grep -r PASSED *.log | sort -u | wc -l' with a | pipe in it", "Code": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)"}, {"ID": 42178481, "NL Utterance": "count the number of trailing question marks in string `my_text`", "Code": "len(my_text) - len(my_text.rstrip('?'))"}, {"ID": 32464280, "NL Utterance": "remove dollar sign '$' from second to last column data in dataframe 'df' and convert the data into floats", "Code": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)"}, {"ID": 42060144, "NL Utterance": "Merge column  'word' in dataframe `df2` with column 'word' on dataframe `df1`", "Code": "df1.merge(df2, how='left', on='word')"}, {"ID": 30628176, "NL Utterance": "switch positions of each two adjacent characters in string `a`", "Code": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')"}, {"ID": 1892339, "NL Utterance": "make a window `root` jump to the front", "Code": "root.attributes('-topmost', True)"}, {"ID": 1892339, "NL Utterance": "make a window `root` jump to the front", "Code": "root.lift()"}, {"ID": 17731822, "NL Utterance": "Convert list of booleans `walls` into a hex string", "Code": "hex(int(''.join([str(int(b)) for b in walls]), 2))"}, {"ID": 17731822, "NL Utterance": "convert the sum of list `walls` into a hex presentation", "Code": "hex(sum(b << i for i, b in enumerate(reversed(walls))))"}, {"ID": 15286401, "NL Utterance": "print the string `Total score for`, the value of the variable `name`, the string `is` and the value of the variable `score` in one print call.", "Code": "print(('Total score for', name, 'is', score))"}, {"ID": 15286401, "NL Utterance": "print multiple arguments 'name' and 'score'.", "Code": "print('Total score for {} is {}'.format(name, score))"}, {"ID": 15286401, "NL Utterance": "print a string using multiple strings `name` and `score`", "Code": "print('Total score for %s is %s  ' % (name, score))"}, {"ID": 15286401, "NL Utterance": "print string including multiple variables `name` and `score`", "Code": "print(('Total score for', name, 'is', score))"}, {"ID": 30650254, "NL Utterance": "serve a static html page 'your_template.html' at the root of a django project", "Code": "url('^$', TemplateView.as_view(template_name='your_template.html'))"}, {"ID": 12096252, "NL Utterance": "use a list of values `[3,6]` to select rows from a pandas dataframe `df`'s column 'A'", "Code": "df[df['A'].isin([3, 6])]"}, {"ID": 521502, "NL Utterance": null, "Code": "instance.__class__.__name__"}, {"ID": 39538010, "NL Utterance": "execute python code `myscript.py` in a virtualenv `/path/to/my/venv` from matlab", "Code": "system('/path/to/my/venv/bin/python myscript.py')"}, {"ID": 7503241, "NL Utterance": "django return a QuerySet list containing the values of field 'eng_name' in model `Employees`", "Code": "Employees.objects.values_list('eng_name', flat=True)"}, {"ID": 31465002, "NL Utterance": "find all digits in string '6,7)' and put them to a list", "Code": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')"}, {"ID": 983354, "NL Utterance": "prompt string 'Press Enter to continue...' to the console", "Code": "input('Press Enter to continue...')"}, {"ID": 21947035, "NL Utterance": "print string \"ABC\" as hex literal", "Code": "\"\"\"\u0001ABC\"\"\".encode('hex')"}, {"ID": 15666169, "NL Utterance": "insert a new field 'geolocCountry' on an existing document  'b' using pymongo", "Code": "db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})"}, {"ID": 3895874, "NL Utterance": "Write a regex statement to match 'lol' to 'lolllll'.", "Code": "re.sub('l+', 'l', 'lollll')"}, {"ID": 8724352, "NL Utterance": "BeautifulSoup find all 'tr' elements in HTML string `soup` at the five stride starting from the fourth element", "Code": "rows = soup.findAll('tr')[4::5]"}, {"ID": 2051744, "NL Utterance": "reverse all x-axis points in pyplot", "Code": "plt.gca().invert_xaxis()"}, {"ID": 2051744, "NL Utterance": "reverse y-axis in pyplot", "Code": "plt.gca().invert_yaxis()"}, {"ID": 13079852, "NL Utterance": "stack two dataframes next to each other in pandas", "Code": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)"}, {"ID": 2428092, "NL Utterance": "create a json response `response_data`", "Code": "return HttpResponse(json.dumps(response_data), content_type='application/json')"}, {"ID": 4020539, "NL Utterance": "decode escape sequences in string `myString`", "Code": "myString.decode('string_escape')"}, {"ID": 16874598, "NL Utterance": "calculate the md5 checksum of a file named  'filename.exe'", "Code": "hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()"}, {"ID": 7657457, "NL Utterance": "Find all keys from a dictionary `d` whose values are `desired_value`", "Code": "[k for k, v in d.items() if v == desired_value]"}, {"ID": 11399384, "NL Utterance": "create a set containing all keys' names from dictionary `LoD`", "Code": "{k for d in LoD for k in list(d.keys())}"}, {"ID": 11399384, "NL Utterance": "create a set containing all keys names from list of dictionaries `LoD`", "Code": "set([i for s in [list(d.keys()) for d in LoD] for i in s])"}, {"ID": 11399384, "NL Utterance": "extract all keys from a list of dictionaries `LoD`", "Code": "[i for s in [list(d.keys()) for d in LoD] for i in s]"}, {"ID": 6612769, "NL Utterance": "unpack keys and values of a dictionary `d` into two lists", "Code": "keys, values = zip(*list(d.items()))"}, {"ID": 1094717, "NL Utterance": "convert a string `s` containing a decimal to an integer", "Code": "int(Decimal(s))"}, {"ID": 1094717, "NL Utterance": null, "Code": "int(s.split('.')[0])"}, {"ID": 10565598, "NL Utterance": "check if array `b` contains all elements of array `a`", "Code": "numpy.in1d(b, a).all()"}, {"ID": 10565598, "NL Utterance": "numpy:  check if array 'a' contains all the numbers in array 'b'.", "Code": "numpy.array([(x in a) for x in b])"}, {"ID": 15548506, "NL Utterance": "Draw node labels `labels` on networkx graph `G ` at position `pos`", "Code": "networkx.draw_networkx_labels(G, pos, labels)"}, {"ID": 6532881, "NL Utterance": "make a row-by-row copy `y` of array `x`", "Code": "y = [row[:] for row in x]"}, {"ID": 7356042, "NL Utterance": "Create 2D numpy array from the data provided in 'somefile.csv' with each row in the file having same number of values", "Code": "X = numpy.loadtxt('somefile.csv', delimiter=',')"}, {"ID": 4843158, "NL Utterance": "get a list of items from the list `some_list` that contain string 'abc'", "Code": "matching = [s for s in some_list if 'abc' in s]"}, {"ID": 11041411, "NL Utterance": "export a pandas data frame `df` to a file `mydf.tsv` and retain the indices", "Code": "df.to_csv('mydf.tsv', sep='\\t')"}, {"ID": 9755538, "NL Utterance": null, "Code": "random.sample(list(range(100)), 10)"}, {"ID": 15012228, "NL Utterance": "split a string `s` on last delimiter", "Code": "s.rsplit(',', 1)"}, {"ID": 13252333, "NL Utterance": "Check if all elements in list `lst` are tupples of long and int", "Code": "all(isinstance(x, int) for x in lst)"}, {"ID": 13252333, "NL Utterance": "check if all elements in a list 'lst' are the same type 'int'", "Code": "all(isinstance(x, int) for x in lst)"}, {"ID": 13656519, "NL Utterance": "strip a string `line` of all carriage returns and newlines", "Code": "line.strip()"}, {"ID": 20986631, "NL Utterance": "scroll to the bottom of a web page using selenium webdriver", "Code": "driver.execute_script('window.scrollTo(0, Y)')"}, {"ID": 20986631, "NL Utterance": "scroll a to the bottom of a web page using selenium webdriver", "Code": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')"}, {"ID": 11619169, "NL Utterance": "convert Date object `dateobject` into a DateTime object", "Code": "datetime.datetime.combine(dateobject, datetime.time())"}, {"ID": 740287, "NL Utterance": "check if any item from list `b` is in list `a`", "Code": "print(any(x in a for x in b))"}, {"ID": 902761, "NL Utterance": "save a numpy array `image_array` as an image 'outfile.jpg'", "Code": "scipy.misc.imsave('outfile.jpg', image_array)"}, {"ID": 19794051, "NL Utterance": "Remove anything in parenthesis from string `item` with a regex", "Code": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)"}, {"ID": 19794051, "NL Utterance": "Remove word characters in parenthesis from string `item` with a regex", "Code": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)"}, {"ID": 19794051, "NL Utterance": "Remove all data inside parenthesis in string `item`", "Code": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)"}, {"ID": 16138015, "NL Utterance": "check if any elements in one list `list1` are in another list `list2`", "Code": "len(set(list1).intersection(list2)) > 0"}, {"ID": 9210525, "NL Utterance": "convert hex string `s` to decimal", "Code": "i = int(s, 16)"}, {"ID": 9210525, "NL Utterance": "convert hex string \"0xff\" to decimal", "Code": "int('0xff', 16)"}, {"ID": 9210525, "NL Utterance": "convert hex string \"FFFF\" to decimal", "Code": "int('FFFF', 16)"}, {"ID": 9210525, "NL Utterance": "convert hex string '0xdeadbeef' to decimal", "Code": "ast.literal_eval('0xdeadbeef')"}, {"ID": 9210525, "NL Utterance": "convert hex string 'deadbeef' to decimal", "Code": "int('deadbeef', 16)"}, {"ID": 4524723, "NL Utterance": "take screenshot 'screen.png' on mac os x", "Code": "os.system('screencapture screen.png')"}, {"ID": 21899953, "NL Utterance": "Set a window size to `1400, 1000` using selenium webdriver", "Code": "driver.set_window_size(1400, 1000)"}, {"ID": 3704731, "NL Utterance": "replace non-ascii chars from a unicode string u'm\\xfasica'", "Code": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')"}, {"ID": 21317384, "NL Utterance": "concatenate dataframe `df1` with `df2` whilst removing duplicates", "Code": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)"}, {"ID": 4365964, "NL Utterance": "Construct an array with data type float32 `a` from data in binary file 'filename'", "Code": "a = numpy.fromfile('filename', dtype=numpy.float32)"}, {"ID": 21804935, "NL Utterance": "execute a mv command `mv /home/somedir/subdir/* somedir/` in subprocess", "Code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"}, {"ID": 21804935, "NL Utterance": null, "Code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)"}, {"ID": 16658068, "NL Utterance": "print a character that has unicode value `\\u25b2`", "Code": "print('\\u25b2'.encode('utf-8'))"}, {"ID": 977491, "NL Utterance": "compare contents  at filehandles `file1` and `file2` using difflib", "Code": "difflib.SequenceMatcher(None, file1.read(), file2.read())"}, {"ID": 4627981, "NL Utterance": "Create a dictionary from string `e` separated by `-` and `,`", "Code": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))"}, {"ID": 34468983, "NL Utterance": "check if all elements in a tuple `(1, 6)` are in another `(1, 2, 3, 4, 5)`", "Code": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))"}, {"ID": 14673394, "NL Utterance": "extract unique dates from time series 'Date' in dataframe `df`", "Code": "df['Date'].map(lambda t: t.date()).unique()"}, {"ID": 16159228, "NL Utterance": "right align string `mystring` with a width of 7", "Code": "\"\"\"{:>7s}\"\"\".format(mystring)"}, {"ID": 118516, "NL Utterance": "read an excel file 'ComponentReport-DJI.xls'", "Code": "open('ComponentReport-DJI.xls', 'rb').read(200)"}, {"ID": 17141558, "NL Utterance": "sort dataframe `df` based on column 'b' in ascending and column 'c' in descending", "Code": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)"}, {"ID": 17141558, "NL Utterance": "sort dataframe `df` based on column 'a' in ascending and column 'b' in descending", "Code": "df.sort_values(['a', 'b'], ascending=[True, False])"}, {"ID": 17141558, "NL Utterance": "sort a pandas data frame with column `a` in ascending and `b` in descending order", "Code": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)"}, {"ID": 17141558, "NL Utterance": "sort a pandas data frame by column `a` in ascending, and by column `b` in descending order", "Code": "df.sort(['a', 'b'], ascending=[True, False])"}, {"ID": 7284952, "NL Utterance": "django redirect to view 'Home.views.index'", "Code": "redirect('Home.views.index')"}, {"ID": 2514961, "NL Utterance": "remove all values within one list `[2, 3, 7]` from another list `a`", "Code": "[x for x in a if x not in [2, 3, 7]]"}, {"ID": 16050952, "NL Utterance": "remove the punctuation '!', '.', ':' from a string `asking`", "Code": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))"}, {"ID": 11205386, "NL Utterance": "BeautifulSoup get value associated with attribute 'content' where attribute 'name' is equal to 'City' in tag 'meta' in HTML parsed string `soup`", "Code": "soup.find('meta', {'name': 'City'})['content']"}, {"ID": 300445, "NL Utterance": "unquote a urlencoded unicode string '%0a'", "Code": "urllib.parse.unquote('%0a')"}, {"ID": 300445, "NL Utterance": "decode url `url` from UTF-16 code to UTF-8 code", "Code": "urllib.parse.unquote(url).decode('utf8')"}, {"ID": 1400608, "NL Utterance": "empty a list `lst`", "Code": "del lst[:]"}, {"ID": 1400608, "NL Utterance": "empty a list `lst`", "Code": "del lst1[:]"}, {"ID": 1400608, "NL Utterance": "empty a list `lst`", "Code": "lst[:] = []"}, {"ID": 1400608, "NL Utterance": "empty a list `alist`", "Code": "alist[:] = []"}, {"ID": 18624039, "NL Utterance": "reset index of series `s`", "Code": "s.reset_index(0).reset_index(drop=True)"}, {"ID": 36623789, "NL Utterance": "convert unicode text from list `elems` with index 0 to normal text 'utf-8'", "Code": "elems[0].getText().encode('utf-8')"}, {"ID": 4029436, "NL Utterance": "create a list containing the subtraction of each item in list `L` from the item prior to it", "Code": "[(y - x) for x, y in zip(L, L[1:])]"}, {"ID": 32950347, "NL Utterance": "get value in string `line` matched by regex pattern '\\\\bLOG_ADDR\\\\s+(\\\\S+)'", "Code": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))"}, {"ID": 4116061, "NL Utterance": "import all classes from module `some.package`", "Code": "globals().update(importlib.import_module('some.package').__dict__)"}, {"ID": 4481724, "NL Utterance": "convert a list of characters `['a', 'b', 'c', 'd']` into a string", "Code": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])"}, {"ID": 258746, "NL Utterance": "Slice `url` with '&' as delimiter  to get  \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234\" from url \"http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3\r\n\"", "Code": "url.split('&')"}, {"ID": 9001509, "NL Utterance": "sort dictionary `d` by key", "Code": "od = collections.OrderedDict(sorted(d.items()))"}, {"ID": 9001509, "NL Utterance": "sort a dictionary `d` by key", "Code": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))"}, {"ID": 33127636, "NL Utterance": "Execute a put request to the url `url`", "Code": "response = requests.put(url, data=json.dumps(data), headers=headers)"}, {"ID": 6323296, "NL Utterance": "replace everything that is not an alphabet or a digit with '' in 's'.", "Code": "re.sub('[\\\\W_]+', '', s)"}, {"ID": 16568056, "NL Utterance": "create a list of aggregation of each element from list `l2` to all elements of list `l1`", "Code": "[(x + y) for x in l2 for y in l1]"}, {"ID": 1246444, "NL Utterance": "convert string `x'  to dictionary splitted by `=` using list comprehension", "Code": "dict([x.split('=') for x in s.split()])"}, {"ID": 9754729, "NL Utterance": "remove index 2 element from a list `my_list`", "Code": "my_list.pop(2)"}, {"ID": 3559559, "NL Utterance": "Delete character \"M\" from a string `s` using python", "Code": "s = s.replace('M', '')"}, {"ID": 3559559, "NL Utterance": null, "Code": "newstr = oldstr.replace('M', '')"}, {"ID": 41821112, "NL Utterance": "get the sum of the products of each pair of corresponding elements in lists `a` and `b`", "Code": "sum(x * y for x, y in zip(a, b))"}, {"ID": 41821112, "NL Utterance": "sum the products of each two elements at the same index of list `a` and list `b`", "Code": "list(x * y for x, y in list(zip(a, b)))"}, {"ID": 41821112, "NL Utterance": "sum the product of each two items at the same index of list `a` and list `b`", "Code": "sum(i * j for i, j in zip(a, b))"}, {"ID": 41821112, "NL Utterance": "sum the product of elements of two lists named `a` and `b`", "Code": "sum(x * y for x, y in list(zip(a, b)))"}, {"ID": 12426043, "NL Utterance": "write the content of file `xxx.mp4` to file `f`", "Code": "f.write(open('xxx.mp4', 'rb').read())"}, {"ID": 9304408, "NL Utterance": "Add 1 to each integer value in list `my_list`", "Code": "new_list = [(x + 1) for x in my_list]"}, {"ID": 4587915, "NL Utterance": "get a list of all items in list `j` with values greater than `5`", "Code": "[x for x in j if x >= 5]"}, {"ID": 8409095, "NL Utterance": "set color marker styles `--bo` in matplotlib", "Code": "plt.plot(list(range(10)), '--bo')"}, {"ID": 8409095, "NL Utterance": "set circle markers on plot for individual points  defined in list   `[1,2,3,4,5,6,7,8,9,10]` created by range(10)", "Code": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')"}, {"ID": 6696027, "NL Utterance": "split strings in list `l` on the first occurring tab `\\t` and enter only the first resulting substring in a new list", "Code": "[i.split('\\t', 1)[0] for i in l]"}, {"ID": 6696027, "NL Utterance": "Split each string in list `myList` on the tab character", "Code": "myList = [i.split('\\t')[0] for i in myList]"}, {"ID": 11344827, "NL Utterance": "Sum numbers in a list 'your_list'", "Code": "sum(your_list)"}, {"ID": 4716533, "NL Utterance": "attach debugger pdb to class `ForkedPdb`", "Code": "ForkedPdb().set_trace()"}, {"ID": 17846545, "NL Utterance": "Compose keys from dictionary `d1` with respective values in dictionary `d2`", "Code": "result = {k: d2.get(v) for k, v in list(d1.items())}"}, {"ID": 6310475, "NL Utterance": "add one day and three hours to the present time from datetime.now()", "Code": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)"}, {"ID": 1386811, "NL Utterance": null, "Code": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]"}, {"ID": 8305518, "NL Utterance": "switch keys and values in a dictionary `my_dict`", "Code": "dict((v, k) for k, v in my_dict.items())"}, {"ID": 21361604, "NL Utterance": "sort a list `L` by number after second '.'", "Code": "print(sorted(L, key=lambda x: int(x.split('.')[2])))"}, {"ID": 17149561, "NL Utterance": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`", "Code": "any(d['name'] == 'Test' for d in label)"}, {"ID": 2186656, "NL Utterance": "remove all instances of [1, 1] from list `a`", "Code": "a[:] = [x for x in a if x != [1, 1]]"}, {"ID": 2186656, "NL Utterance": "remove all instances of `[1, 1]` from a list `a`", "Code": "[x for x in a if x != [1, 1]]"}, {"ID": 4576115, "NL Utterance": "convert a list 'a' to a dictionary where each even element represents the key to the dictionary, and the following odd element is the value", "Code": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}"}, {"ID": 3899782, "NL Utterance": "check whether elements in list `a` appear only once", "Code": "len(set(a)) == len(a)"}, {"ID": 3431825, "NL Utterance": "Generate MD5 checksum of file in the path `full_path` in hashlib", "Code": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())"}, {"ID": 42765620, "NL Utterance": null, "Code": "sorted(list(data.items()), key=lambda x: x[1][0])"}, {"ID": 8344905, "NL Utterance": "randomly switch letters' cases in string `s`", "Code": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)"}, {"ID": 21822054, "NL Utterance": "force bash interpreter '/bin/bash' to be used instead of shell", "Code": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')"}, {"ID": 21822054, "NL Utterance": "Run a command `echo hello world` in bash instead of shell", "Code": "os.system('/bin/bash -c \"echo hello world\"')"}, {"ID": 13303100, "NL Utterance": "access the class variable `a_string` from a class object `test`", "Code": "getattr(test, a_string)"}, {"ID": 5333244, "NL Utterance": "Display a image file `pathToFile`", "Code": "Image.open('pathToFile').show()"}, {"ID": 3151146, "NL Utterance": "replace single quote character in string \"didn't\" with empty string ''", "Code": "\"\"\"didn't\"\"\".replace(\"'\", '')"}, {"ID": 9466017, "NL Utterance": "sort list `files` based on variable `file_number`", "Code": "files.sort(key=file_number)"}, {"ID": 8270092, "NL Utterance": "remove all whitespace in a string `sentence`", "Code": "sentence.replace(' ', '')"}, {"ID": 8270092, "NL Utterance": "remove all whitespace in a string `sentence`", "Code": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)"}, {"ID": 8270092, "NL Utterance": "remove whitespace in string `sentence` from beginning and end", "Code": "sentence.strip()"}, {"ID": 8270092, "NL Utterance": "remove all whitespaces in string `sentence`", "Code": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)"}, {"ID": 8270092, "NL Utterance": "remove all whitespaces in a string `sentence`", "Code": "sentence = ''.join(sentence.split())"}, {"ID": 32511444, "NL Utterance": "sum all the values in a counter variable `my_counter`", "Code": "sum(my_counter.values())"}, {"ID": 40319433, "NL Utterance": "find the euclidean distance between two 3-d arrays `A` and `B`", "Code": "np.sqrt(((A - B) ** 2).sum(-1))"}, {"ID": 4411811, "NL Utterance": "create list `levels` containing 3 empty dictionaries", "Code": "levels = [{}, {}, {}]"}, {"ID": 6133434, "NL Utterance": "find the sums of length 7 subsets of a list `daily`", "Code": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]"}, {"ID": 5844672, "NL Utterance": "Delete an element `key` from a dictionary `d`", "Code": "del d[key]"}, {"ID": 5844672, "NL Utterance": "Delete an element 0 from a dictionary `a`", "Code": "{i: a[i] for i in a if (i != 0)}"}, {"ID": 5844672, "NL Utterance": "Delete an element \"hello\" from a dictionary `lol`", "Code": "lol.pop('hello')"}, {"ID": 5844672, "NL Utterance": "Delete an element with key `key` dictionary `r`", "Code": "del r[key]"}, {"ID": 41648246, "NL Utterance": "solve for the least squares' solution of matrices `a` and `b`", "Code": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))"}, {"ID": 38231591, "NL Utterance": "split dictionary/list inside a pandas column 'b' into separate columns in dataframe `df`", "Code": "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)"}, {"ID": 2990121, "NL Utterance": "loop through 0 to 10 with step 2", "Code": "for i in range(0, 10, 2):\n    pass"}, {"ID": 2990121, "NL Utterance": "loop through `mylist` with step 2", "Code": "for i in mylist[::2]:\n    pass"}, {"ID": 42353686, "NL Utterance": "lowercase string values with key 'content' in a list of dictionaries `messages`", "Code": "[{'content': x['content'].lower()} for x in messages]"}, {"ID": 12309976, "NL Utterance": "convert a list `my_list` into string with values separated by spaces", "Code": "\"\"\" \"\"\".join(my_list)"}, {"ID": 4695143, "NL Utterance": "replace each occurrence of the pattern '(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)' within `a` with ''", "Code": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)"}, {"ID": 17331290, "NL Utterance": "check if string `str` is palindrome", "Code": "str(n) == str(n)[::-1]"}, {"ID": 2911754, "NL Utterance": "upload binary file `myfile.txt` with ftplib", "Code": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))"}, {"ID": 30945784, "NL Utterance": "remove all characters from string `stri` upto character 'I'", "Code": "re.sub('.*I', 'I', stri)"}, {"ID": 2953746, "NL Utterance": "parse a comma-separated string number '1,000,000' into int", "Code": "int('1,000,000'.replace(',', ''))"}, {"ID": 28773683, "NL Utterance": "combine  dataframe `df1` and dataframe `df2` by index number", "Code": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')"}, {"ID": 28773683, "NL Utterance": null, "Code": "pandas.concat([df1, df2], axis=1)"}, {"ID": 2806611, "NL Utterance": "check if all boolean values in a python dictionary `dict` are true", "Code": "all(dict.values())"}, {"ID": 40273313, "NL Utterance": "use regex pattern '^12(?=.{4}$)' to remove digit 12 if followed by 4 other digits in column `c_contofficeID` of dataframe `df`", "Code": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')"}, {"ID": 3940128, "NL Utterance": "reverse a list `L`", "Code": "L[::(-1)]"}, {"ID": 3940128, "NL Utterance": "reverse a list `array`", "Code": "reversed(array)"}, {"ID": 3940128, "NL Utterance": "reverse a list `L`", "Code": "L.reverse()"}, {"ID": 3940128, "NL Utterance": "reverse a list `array`", "Code": "list(reversed(array))"}, {"ID": 31302904, "NL Utterance": "get first element of each tuple in list `A`", "Code": "[tup[0] for tup in A]"}, {"ID": 10562778, "NL Utterance": "replace character 'a' with character 'e' and character 's' with character '3' in file `contents`", "Code": "newcontents = contents.replace('a', 'e').replace('s', '3')"}, {"ID": 5022066, "NL Utterance": "serialise SqlAlchemy RowProxy object `row` to a json object", "Code": "json.dumps([dict(list(row.items())) for row in rs])"}, {"ID": 3227624, "NL Utterance": "get file '~/foo.ini'", "Code": "config_file = os.path.expanduser('~/foo.ini')"}, {"ID": 14734750, "NL Utterance": "get multiple parameters with same name from a url in pylons", "Code": "request.params.getall('c')"}, {"ID": 18432823, "NL Utterance": "Convert array `x` into a correlation matrix", "Code": "np.corrcoef(x)"}, {"ID": 3090175, "NL Utterance": "Find the greatest number in set `(1, 2, 3)`", "Code": "print(max(1, 2, 3))"}, {"ID": 1391026, "NL Utterance": "Retrieve parameter 'var_name' from a GET request.", "Code": "self.request.get('var_name')"}, {"ID": 21188504, "NL Utterance": "Add 100 to each element of column \"x\" in dataframe `a`", "Code": "a['x'].apply(lambda x, y: x + y, args=(100,))"}, {"ID": 40079728, "NL Utterance": "Django get first 10 records of model `User` ordered by criteria 'age' of model 'pet'", "Code": "User.objects.order_by('-pet__age')[:10]"}, {"ID": 510348, "NL Utterance": "delay for \"5\" seconds", "Code": "time.sleep(5)"}, {"ID": 510348, "NL Utterance": "make a 60 seconds time delay", "Code": "time.sleep(60)"}, {"ID": 510348, "NL Utterance": "make a 0.1 seconds time delay", "Code": "sleep(0.1)"}, {"ID": 510348, "NL Utterance": "make a 60 seconds time delay", "Code": "time.sleep(60)"}, {"ID": 510348, "NL Utterance": "make a 0.1 seconds time delay", "Code": "time.sleep(0.1)"}, {"ID": 16084642, "NL Utterance": "From a list of strings `my_list`, remove the values that contains numbers.", "Code": "[x for x in my_list if not any(c.isdigit() for c in x)]"}, {"ID": 20970279, "NL Utterance": "get the middle two characters of a string 'state' in a pandas dataframe `df`", "Code": "df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])"}, {"ID": 8209568, "NL Utterance": "draw a grid line on every tick of plot `plt`", "Code": "plt.grid(True)"}, {"ID": 42394627, "NL Utterance": "sort list `lst` based on each element's number of occurrences", "Code": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))"}, {"ID": 6018916, "NL Utterance": "Get the value with the maximum length in each column in array `foo`", "Code": "[max(len(str(x)) for x in line) for line in zip(*foo)]"}, {"ID": 39607540, "NL Utterance": "get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`", "Code": "df.Country.value_counts().reset_index(name='Sum of Accidents')"}, {"ID": 13114512, "NL Utterance": "calculat the difference between each row and the row previous to it in dataframe `data`", "Code": "data.set_index('Date').diff()"}, {"ID": 3392354, "NL Utterance": "append values `[3, 4]` to a set `a`", "Code": "a.update([3, 4])"}, {"ID": 7154739, "NL Utterance": "set every two-stride far element to -1 starting from second element in array `a`", "Code": "a[1::2] = -1"}, {"ID": 26720916, "NL Utterance": "Get rank of rows from highest to lowest of dataframe `df`, grouped by value in column `group`, according to value in column `value`", "Code": "df.groupby('group')['value'].rank(ascending=False)"}, {"ID": 8153631, "NL Utterance": "convert js date object 'Tue, 22 Nov 2011 06:00:00 GMT' to python datetime", "Code": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')"}, {"ID": 33769531, "NL Utterance": "Convert a binary value '1633837924' to string", "Code": "struct.pack('<I', 1633837924)"}, {"ID": 8243188, "NL Utterance": "append string `foo` to list `list`", "Code": "list.append('foo')"}, {"ID": 8243188, "NL Utterance": "insert string `foo` at position `0` of list `list`", "Code": "list.insert(0, 'foo')"}, {"ID": 3296499, "NL Utterance": "convert keys in dictionary `thedict` into case insensitive", "Code": "theset = set(k.lower() for k in thedict)"}, {"ID": 4008546, "NL Utterance": "pad 'dog' up to a length of 5 characters with 'x'", "Code": "\"\"\"{s:{c}^{n}}\"\"\".format(s='dog', n=5, c='x')"}, {"ID": 4843173, "NL Utterance": "check if type of variable `s` is a string", "Code": "isinstance(s, str)"}, {"ID": 4843173, "NL Utterance": "check if type of a variable `s` is string", "Code": "isinstance(s, str)"}, {"ID": 3494906, "NL Utterance": "Convert list of dictionaries `L` into a flat dictionary", "Code": "dict(pair for d in L for pair in list(d.items()))"}, {"ID": 3494906, "NL Utterance": "merge a list of dictionaries in list `L` into a single dict", "Code": "{k: v for d in L for k, v in list(d.items())}"}, {"ID": 13636592, "NL Utterance": "sort a pandas data frame according to column `Peak` in ascending and `Weeks` in descending order", "Code": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"}, {"ID": 13636592, "NL Utterance": "sort a pandas data frame by column `Peak` in ascending and `Weeks` in descending order", "Code": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)"}, {"ID": 1015142, "NL Utterance": "run the code contained in string \"print('Hello')\"", "Code": "eval(\"print('Hello')\")"}, {"ID": 35883459, "NL Utterance": "creating a list of dictionaries [{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "Code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}, {"ID": 35883459, "NL Utterance": null, "Code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]"}, {"ID": 8249836, "NL Utterance": "get all possible combination of items from 2-dimensional list `a`", "Code": "list(itertools.product(*a))"}, {"ID": 32751229, "NL Utterance": "Get sum of values of columns  'Y1961', 'Y1962', 'Y1963' after group by on columns \"Country\" and \"Item_code\" in dataframe `df`.", "Code": "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()"}, {"ID": 9962293, "NL Utterance": "create list `done` containing permutations of each element in list `[a, b, c, d]` with variable `x` as tuples", "Code": "done = [(el, x) for el in [a, b, c, d]]"}, {"ID": 11620914, "NL Utterance": "remove Nan values from array `x`", "Code": "x = x[numpy.logical_not(numpy.isnan(x))]"}, {"ID": 26724275, "NL Utterance": "remove first directory from path '/First/Second/Third/Fourth/Fifth'", "Code": "os.path.join(*x.split(os.path.sep)[2:])"}, {"ID": 12723751, "NL Utterance": "Replace `;` with `:` in a string `line`", "Code": "line = line.replace(';', ':')"}, {"ID": 7323859, "NL Utterance": "call bash command 'tar c my_dir | md5sum' with pipe", "Code": "subprocess.call('tar c my_dir | md5sum', shell=True)"}, {"ID": 10618586, "NL Utterance": "Convert a hex string `437c2123 ` according to ascii value.", "Code": "\"\"\"437c2123\"\"\".decode('hex')"}, {"ID": 8586738, "NL Utterance": "Get a list of all fields in class `User` that are marked `required`", "Code": "[k for k, v in User._fields.items() if v.required]"}, {"ID": 19973489, "NL Utterance": "remove column by index `[:, 0:2]` in dataframe `df`", "Code": "df = df.ix[:, 0:2]"}, {"ID": 19555472, "NL Utterance": "change a string of integers `x` separated by spaces to a list of int", "Code": "x = map(int, x.split())"}, {"ID": 19555472, "NL Utterance": "convert a string of integers `x` separated by spaces to a list of integers", "Code": "x = [int(i) for i in x.split()]"}, {"ID": 21691126, "NL Utterance": "find element by css selector \"input[onclick*='1 Bedroom Deluxe']\"", "Code": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")"}, {"ID": 25991612, "NL Utterance": null, "Code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)"}, {"ID": 21684346, "NL Utterance": "display a pdf  file that has been downloaded as `my_pdf.pdf`", "Code": "webbrowser.open('file:///my_pdf.pdf')"}, {"ID": 3160752, "NL Utterance": "replace backslashes in string `result` with empty string ''", "Code": "result = result.replace('\\\\', '')"}, {"ID": 3160752, "NL Utterance": "remove backslashes from string `result`", "Code": "result.replace('\\\\', '')"}, {"ID": 42172204, "NL Utterance": "replace value '-' in any column of pandas dataframe to \"NaN\"", "Code": "df.replace('-', 'NaN')"}, {"ID": 3743222, "NL Utterance": "convert datetime object to date object in python", "Code": "datetime.datetime.now().date()"}, {"ID": 3743222, "NL Utterance": null, "Code": "datetime.datetime.now().date()"}, {"ID": 10408927, "NL Utterance": "get all sub-elements of an element `a` in an elementtree", "Code": "[elem.tag for elem in a.iter()]"}, {"ID": 10408927, "NL Utterance": "get all sub-elements of an element tree `a` excluding the root element", "Code": "[elem.tag for elem in a.iter() if elem is not a]"}, {"ID": 5749195, "NL Utterance": null, "Code": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')"}, {"ID": 42364593, "NL Utterance": "move dictionaries in list `lst` to the end of the list if value of key 'language' in each dictionary is not equal to 'en'", "Code": "sorted(lst, key=lambda x: x['language'] != 'en')"}, {"ID": 35253971, "NL Utterance": "check if all values of a dictionary `your_dict` are zero `0`", "Code": "all(value == 0 for value in list(your_dict.values()))"}, {"ID": 9550867, "NL Utterance": "produce a pivot table as dataframe using column 'Y' in datafram `df` to form the axes of the resulting dataframe", "Code": "df.pivot_table('Y', rows='X', cols='X2')"}, {"ID": 730764, "NL Utterance": "call `doSomething()` in a try-except without handling the exception", "Code": "try:\n    doSomething()\nexcept:\n    pass"}, {"ID": 730764, "NL Utterance": "call `doSomething()` in a try-except without handling the exception", "Code": "try:\n    doSomething()\nexcept Exception:\n    pass"}, {"ID": 24841306, "NL Utterance": "get a sum of 4d array `M`", "Code": "M.sum(axis=0).sum(axis=0)"}, {"ID": 7238226, "NL Utterance": "Convert a datetime object `dt` to microtime", "Code": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0"}, {"ID": 40156469, "NL Utterance": "select all rows in dataframe `df` where the values of column 'columnX' is bigger than or equal to `x` and smaller than or equal to `y`", "Code": "df[(x <= df['columnX']) & (df['columnX'] <= y)]"}, {"ID": 4174941, "NL Utterance": "sort a list of lists `L` by index 2 of the inner list", "Code": "sorted(L, key=itemgetter(2))"}, {"ID": 4174941, "NL Utterance": "sort a list of lists `l` by index 2 of the inner list", "Code": "l.sort(key=(lambda x: x[2]))"}, {"ID": 4174941, "NL Utterance": "sort list `l` by index 2 of the item", "Code": "sorted(l, key=(lambda x: x[2]))"}, {"ID": 4174941, "NL Utterance": "sort a list of lists `list_to_sort` by indices 2,0,1 of the inner list", "Code": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))"}, {"ID": 36381230, "NL Utterance": "find rows of 2d array in 3d numpy array 'arr' if the row has value '[[0, 3], [3, 0]]'", "Code": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))"}, {"ID": 18470323, "NL Utterance": "From multiIndexed dataframe `data` select columns `a` and `c` within each higher order column `one` and `two`", "Code": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]"}, {"ID": 18470323, "NL Utterance": "select only specific columns 'a' and 'c' from a dataframe 'data' with multiindex columns", "Code": "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]"}, {"ID": 18663644, "NL Utterance": "match a sharp, followed by letters (including accent characters) in string `str1` using a regex", "Code": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)"}, {"ID": 2759067, "NL Utterance": "Rename file from `src` to `dst`", "Code": "os.rename(src, dst)"}, {"ID": 10258584, "NL Utterance": "Get all texts and tags from a tag `strong` from etree tag `some_tag` using lxml", "Code": "print(etree.tostring(some_tag.find('strong')))"}, {"ID": 12337583, "NL Utterance": "Serialize dictionary `data` and its keys to a JSON formatted string", "Code": "json.dumps({str(k): v for k, v in data.items()})"}, {"ID": 20205455, "NL Utterance": "parse UTF-8 encoded HTML response `response` to BeautifulSoup object", "Code": "soup = BeautifulSoup(response.read().decode('utf-8'))"}, {"ID": 39998424, "NL Utterance": "delete file `filename`", "Code": "os.remove(filename)"}, {"ID": 29471884, "NL Utterance": "get the next value greatest to `2` from a list of numbers `num_list`", "Code": "min([x for x in num_list if x > 2])"}, {"ID": 39602824, "NL Utterance": "Replace each value in column 'prod_type' of dataframe `df` with string 'responsive'", "Code": "df['prod_type'] = 'responsive'"}, {"ID": 40620804, "NL Utterance": "sort list `lst` with positives coming before negatives with values sorted respectively", "Code": "sorted(lst, key=lambda x: (x < 0, x))"}, {"ID": 546321, "NL Utterance": "get the date 6 months from today", "Code": "six_months = (date.today() + relativedelta(months=(+ 6)))"}, {"ID": 546321, "NL Utterance": "get the date 1 month from today", "Code": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))"}, {"ID": 546321, "NL Utterance": "get the date 2 months from today", "Code": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))"}, {"ID": 546321, "NL Utterance": "calculate the date six months from the current date", "Code": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())"}, {"ID": 42352887, "NL Utterance": "get a list of keys of dictionary `things` sorted by the value of nested dictionary key 'weight'", "Code": "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)"}, {"ID": 7429118, "NL Utterance": "get all the values from a numpy array `a` excluding index 3", "Code": "a[np.arange(len(a)) != 3]"}, {"ID": 3895424, "NL Utterance": "delete all elements from a list `x` if a function `fn` taking value as parameter returns `0`", "Code": "[x for x in lst if fn(x) != 0]"}, {"ID": 15752422, "NL Utterance": "set dataframe `df` index using column 'month'", "Code": "df.set_index('month')"}, {"ID": 1532810, "NL Utterance": "read lines from a csv file `./urls-eu.csv` into a list of lists `arr`", "Code": "arr = [line.split(',') for line in open('./urls-eu.csv')]"}, {"ID": 15248272, "NL Utterance": "list comprehension that produces integers between 11 and 19", "Code": "[i for i in range(100) if i > 10 if i < 20]"}, {"ID": 18116235, "NL Utterance": "Get only digits from a string `strs`", "Code": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])"}, {"ID": 17038426, "NL Utterance": "split a string `yas` based on tab '\\t'", "Code": "re.split('\\\\t+', yas.rstrip('\\t'))"}, {"ID": 3809265, "NL Utterance": "scalar multiply matrix `a` by `b`", "Code": "(a.T * b).T"}, {"ID": 275018, "NL Utterance": "remove trailing newline in string \"test string\\n\"", "Code": "'test string\\n'.rstrip()"}, {"ID": 275018, "NL Utterance": "remove trailing newline in string 'test string \\n\\n'", "Code": "'test string \\n\\n'.rstrip('\\n')"}, {"ID": 275018, "NL Utterance": "remove newline in string `s`", "Code": "s.strip()"}, {"ID": 275018, "NL Utterance": "remove newline in string `s` on the right side", "Code": "s.rstrip()"}, {"ID": 275018, "NL Utterance": "remove newline in string `s` on the left side", "Code": "s.lstrip()"}, {"ID": 275018, "NL Utterance": "remove newline in string 'Mac EOL\\r'", "Code": "'Mac EOL\\r'.rstrip('\\r\\n')"}, {"ID": 275018, "NL Utterance": "remove newline in string 'Windows EOL\\r\\n' on the right side", "Code": "'Windows EOL\\r\\n'.rstrip('\\r\\n')"}, {"ID": 275018, "NL Utterance": "remove newline in string 'Unix EOL\\n' on the right side", "Code": "'Unix EOL\\n'.rstrip('\\r\\n')"}, {"ID": 275018, "NL Utterance": "remove newline in string \"Hello\\n\\n\\n\" on the right side", "Code": "'Hello\\n\\n\\n'.rstrip('\\n')"}, {"ID": 18551752, "NL Utterance": "split string `text` into chunks of 16 characters each", "Code": "re.findall('.{,16}\\\\b', text)"}, {"ID": 21360028, "NL Utterance": "Get a list comprehension in list of lists `X`", "Code": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]"}, {"ID": 11174790, "NL Utterance": "convert unicode string '\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0' to byte string", "Code": "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')"}, {"ID": 13353233, "NL Utterance": "split dataframe `df` where the value of column `a` is equal to 'B'", "Code": "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())"}, {"ID": 3040904, "NL Utterance": "save json output from a url \u2018http://search.twitter.com/search.json?q=hi\u2019 to file \u2018hi.json\u2019 in Python 2", "Code": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')"}, {"ID": 4588628, "NL Utterance": "Find indices of elements equal to zero from numpy array `x`", "Code": "numpy.where((x == 0))[0]"}, {"ID": 3804727, "NL Utterance": "flush output of python print", "Code": "sys.stdout.flush()"}, {"ID": 961632, "NL Utterance": "convert `i` to string", "Code": "str(i)"}, {"ID": 961632, "NL Utterance": "convert `a` to string", "Code": "a.__str__()"}, {"ID": 961632, "NL Utterance": "convert `a` to string", "Code": "str(a)"}, {"ID": 5201191, "NL Utterance": "sort list of lists `L` by the second item in each list", "Code": "L.sort(key=operator.itemgetter(1))"}, {"ID": 9969684, "NL Utterance": "Print variable `count` and variable `conv` with space string '    ' in between", "Code": "print(str(count) + '    ' + str(conv))"}, {"ID": 38457059, "NL Utterance": "change NaN values in dataframe `df` using preceding values in the frame", "Code": "df.fillna(method='ffill', inplace=True)"}, {"ID": 3842155, "NL Utterance": "change the state of the Tkinter `Text` widget to read only i.e. `disabled`", "Code": "text.config(state=DISABLED)"}, {"ID": 12492137, "NL Utterance": "python sum of ascii values of all characters in a string `string`", "Code": "sum(map(ord, string))"}, {"ID": 3034014, "NL Utterance": "apply itertools.product to elements of a list of lists `arrays`", "Code": "list(itertools.product(*arrays))"}, {"ID": 1823058, "NL Utterance": "print number `value` as thousands separators", "Code": "'{:,}'.format(value)"}, {"ID": 1823058, "NL Utterance": "print number 1255000 as thousands separators", "Code": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)"}, {"ID": 39988589, "NL Utterance": "get rows of dataframe `df` where column `Col1` has values `['men', 'rocks', 'mountains']`", "Code": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]"}, {"ID": 4800811, "NL Utterance": "get the value at index 1 for each tuple in the list of tuples `L`", "Code": "[x[1] for x in L]"}, {"ID": 7286879, "NL Utterance": "split unicode string \"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438\" into words", "Code": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()"}, {"ID": 12804801, "NL Utterance": "sort query set by number of characters in a field `length` in django model `MyModel`", "Code": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')"}, {"ID": 42442428, "NL Utterance": "get a dictionary in list `dicts` which key 'ratio' is closer to a global value 1.77672955975", "Code": "min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))"}, {"ID": 3262437, "NL Utterance": "get the non-masked values of array `m`", "Code": "m[~m.mask]"}, {"ID": 13840883, "NL Utterance": "Find all words containing letters between A and Z in string `formula`", "Code": "re.findall('\\\\b[A-Z]', formula)"}, {"ID": 6667201, "NL Utterance": "create a list `matrix` containing 5 lists, each of 5 items  all set to 0", "Code": "matrix = [([0] * 5) for i in range(5)]"}, {"ID": 18253210, "NL Utterance": "creating a numpy array of 3d coordinates from three 1d arrays `x_p`, `y_p` and `z_p`", "Code": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T"}, {"ID": 11764260, "NL Utterance": "find the minimum value in a numpy array `arr` excluding 0", "Code": "arr[arr != 0].min()"}, {"ID": 12579061, "NL Utterance": "get the text of multiple elements found by xpath \"//*[@type='submit']/@value\"", "Code": "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text"}, {"ID": 12579061, "NL Utterance": "find all the values in attribute `value` for the tags whose `type` attribute is `submit` in selenium", "Code": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')"}, {"ID": 1773805, "NL Utterance": "parse a YAML file \"example.yaml\"", "Code": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)"}, {"ID": 1773805, "NL Utterance": "parse a YAML file \"example.yaml\"", "Code": "with open('example.yaml') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)"}, {"ID": 41572822, "NL Utterance": "Sort the values of the dataframe `df` and align the columns accordingly based on the obtained indices after np.argsort.", "Code": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))"}, {"ID": 32490629, "NL Utterance": "Getting today's date in YYYY-MM-DD", "Code": "datetime.datetime.today().strftime('%Y-%m-%d')"}, {"ID": 5607551, "NL Utterance": "urlencode a querystring 'string_of_characters_like_these:$#@=?%^Q^$' in python 2", "Code": "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')"}, {"ID": 16868457, "NL Utterance": "sort a dictionary `d` by length of its values and print as string", "Code": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))"}, {"ID": 8081545, "NL Utterance": "convert tuple elements in list `[(1,2),(3,4),(5,6),]` into lists", "Code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"}, {"ID": 8081545, "NL Utterance": null, "Code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))"}, {"ID": 8081545, "NL Utterance": null, "Code": "zip(*[(1, 2), (3, 4), (5, 6)])"}, {"ID": 38251245, "NL Utterance": "create a list of tuples which contains number 9 and the number before it, for each occurrence of 9 in the list 'myList'", "Code": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]"}, {"ID": 29983106, "NL Utterance": "navigate to webpage given by url `http://www.python.org` using Selenium", "Code": "driver.get('http://www.google.com.br')"}, {"ID": 34015615, "NL Utterance": "reverse a UTF-8 string 'a'", "Code": "b = a.decode('utf8')[::-1].encode('utf8')"}, {"ID": 3276180, "NL Utterance": "extract date from a string 'monkey 2010-07-32 love banana'", "Code": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)"}, {"ID": 3276180, "NL Utterance": "extract date from a string 'monkey 20/01/1980 love banana'", "Code": "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)"}, {"ID": 3276180, "NL Utterance": "extract date from a string `monkey 10/01/1980 love banana`", "Code": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)"}, {"ID": 16374540, "NL Utterance": "Convert a list `['A:1', 'B:2', 'C:3', 'D:4']` to dictionary", "Code": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))"}, {"ID": 9072844, "NL Utterance": "check if string `the_string` contains any upper or lower-case ASCII letters", "Code": "re.search('[a-zA-Z]', the_string)"}, {"ID": 10373660, "NL Utterance": "convert a pandas `df1` groupby object to dataframe", "Code": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()"}, {"ID": 1249388, "NL Utterance": "remove all non-numeric characters from string `sdkjh987978asd098as0980a98sd `", "Code": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')"}, {"ID": 15474933, "NL Utterance": "get items from list `a` that don't appear in list `b`", "Code": "[y for y in a if y not in b]"}, {"ID": 40987319, "NL Utterance": "extract the first four rows of the column `ID` from a pandas dataframe `df`", "Code": "df.groupby('ID').head(4)"}, {"ID": 12974474, "NL Utterance": "Unzip a list of tuples `l` into a list of lists", "Code": "zip(*l)"}, {"ID": 7271385, "NL Utterance": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary", "Code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}, {"ID": 7271385, "NL Utterance": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary", "Code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}, {"ID": 15974730, "NL Utterance": "retrieve the path from a Flask request", "Code": "request.url"}, {"ID": 11755208, "NL Utterance": "replace carriage return in string `somestring` with empty string ''", "Code": "somestring.replace('\\\\r', '')"}, {"ID": 715550, "NL Utterance": "serialize dictionary `d` as a JSON formatted string with each key formatted to pattern '%d,%d'", "Code": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))"}, {"ID": 466345, "NL Utterance": "parse string \"Jun 1 2005  1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\"", "Code": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"}, {"ID": 466345, "NL Utterance": "parse string \"Aug 28 1999 12:00AM\" into datetime", "Code": "parser.parse('Aug 28 1999 12:00AM')"}, {"ID": 17057544, "NL Utterance": "Get absolute folder path and filename for file `existGDBPath `", "Code": "os.path.split(os.path.abspath(existGDBPath))"}, {"ID": 17057544, "NL Utterance": "extract folder path from file path", "Code": "os.path.dirname(os.path.abspath(existGDBPath))"}, {"ID": 9733638, "NL Utterance": "Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`", "Code": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}, {"ID": 42260840, "NL Utterance": "remove dictionary from list `a` if the value associated with its key 'link' is in list `b`", "Code": "a = [x for x in a if x['link'] not in b]"}, {"ID": 9647586, "NL Utterance": "get a request parameter `a` in jinja2", "Code": "{{request.args.get('a')}}"}, {"ID": 18265935, "NL Utterance": "create a list of integers between 2 values `11` and `17`", "Code": "list(range(11, 17))"}, {"ID": 40707158, "NL Utterance": "Change data type of data in column 'grade' of dataframe `data_df` into float and then to int", "Code": "data_df['grade'] = data_df['grade'].astype(float).astype(int)"}, {"ID": 4800419, "NL Utterance": "Find the list in a list of lists `alkaline_earth_values` with the max value of the second element.", "Code": "max(alkaline_earth_values, key=lambda x: x[1])"}, {"ID": 13142347, "NL Utterance": "remove leading and trailing zeros in the string 'your_Strip'", "Code": "your_string.strip('0')"}, {"ID": 14169122, "NL Utterance": "generate a list of all unique pairs of integers in `range(9)`", "Code": "list(permutations(list(range(9)), 2))"}, {"ID": 587345, "NL Utterance": "create a regular expression that matches the pattern '^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)' over multiple lines of text", "Code": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)"}, {"ID": 587345, "NL Utterance": "regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matching a multiline block of text", "Code": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)"}, {"ID": 33218968, "NL Utterance": "Run 'test2.py' file with python location 'path/to/python' and arguments 'neededArgumetGoHere' as a subprocess", "Code": "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])"}, {"ID": 1683775, "NL Utterance": "sort a multidimensional list `a` by second and third column", "Code": "a.sort(key=operator.itemgetter(2, 3))"}, {"ID": 3523048, "NL Utterance": "Add a tuple with value `another_choice` to a tuple `my_choices`", "Code": "final_choices = ((another_choice,) + my_choices)"}, {"ID": 3523048, "NL Utterance": "Add a tuple with value `another_choice` to a tuple `my_choices`", "Code": "final_choices = ((another_choice,) + my_choices)"}, {"ID": 5137497, "NL Utterance": "find the current directory", "Code": "os.getcwd()"}, {"ID": 5137497, "NL Utterance": "find the current directory", "Code": "os.path.realpath(__file__)"}, {"ID": 5137497, "NL Utterance": "get the directory name of `path`", "Code": "os.path.dirname(path)"}, {"ID": 5137497, "NL Utterance": "get the canonical path of file `path`", "Code": "os.path.realpath(path)"}, {"ID": 5137497, "NL Utterance": "Find name of current directory", "Code": "dir_path = os.path.dirname(os.path.realpath(__file__))"}, {"ID": 5137497, "NL Utterance": "Find current directory", "Code": "cwd = os.getcwd()"}, {"ID": 5137497, "NL Utterance": "Find the full path of current directory", "Code": "full_path = os.path.realpath(__file__)"}, {"ID": 10078470, "NL Utterance": "sort array `arr` in ascending order by values of the 3rd column", "Code": "arr[arr[:, (2)].argsort()]"}, {"ID": 10078470, "NL Utterance": "sort rows of numpy matrix `arr` in ascending order according to all column values", "Code": "numpy.sort(arr, axis=0)"}, {"ID": 373459, "NL Utterance": "split string 'a b.c' on space \" \" and dot character \".\"", "Code": "re.split('[ .]', 'a b.c')"}, {"ID": 36875258, "NL Utterance": "copy the content of file 'file.txt' to file 'file2.txt'", "Code": "shutil.copy('file.txt', 'file2.txt')"}, {"ID": 18319101, "NL Utterance": "generate random upper-case ascii string of 12 characters length", "Code": "print(''.join(choice(ascii_uppercase) for i in range(12)))"}, {"ID": 39646401, "NL Utterance": "merge the elements in a list `lst` sequentially", "Code": "[''.join(seq) for seq in zip(lst, lst[1:])]"}, {"ID": 19758364, "NL Utterance": "rename column 'gdp' in dataframe `data` to 'log(gdp)'", "Code": "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)"}, {"ID": 14694482, "NL Utterance": "convert a beautiful soup html `soup` to text", "Code": "print(soup.get_text())"}, {"ID": 18142090, "NL Utterance": "Sort list `li` in descending order based on the second element of each list inside list`li`", "Code": "sorted(li, key=operator.itemgetter(1), reverse=True)"}, {"ID": 31888871, "NL Utterance": "replace value 0 with 'Female' and value 1 with 'Male' in column 'sex' of dataframe `data`", "Code": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)"}, {"ID": 19894478, "NL Utterance": "split string 'Words, words, words.' on punctuation", "Code": "re.split('\\\\W+', 'Words, words, words.')"}, {"ID": 3329386, "NL Utterance": "Extract first two substrings in string `phrase` that end in `.`, `?` or `!`", "Code": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)"}, {"ID": 9505526, "NL Utterance": "split string `s` into strings of repeating elements", "Code": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])"}, {"ID": 29360607, "NL Utterance": "Create new string with unique characters from `s` seperated by ' '", "Code": "print(' '.join(OrderedDict.fromkeys(s)))"}, {"ID": 29360607, "NL Utterance": "create a set from string `s` to remove duplicate characters", "Code": "print(' '.join(set(s)))"}, {"ID": 6510477, "NL Utterance": "list folders in zip file 'file' that ends with '/'", "Code": "[x for x in file.namelist() if x.endswith('/')]"}, {"ID": 11300383, "NL Utterance": "find the count of a word 'Hello' in a string `input_string`", "Code": "input_string.count('Hello')"}, {"ID": 27436748, "NL Utterance": "reduce the first element of list of strings `data` to a string, separated by '.'", "Code": "print('.'.join([item[0] for item in data]))"}, {"ID": 14332141, "NL Utterance": "Move the cursor of file pointer `fh1` at the end of the file.", "Code": "fh1.seek(2)"}, {"ID": 15852295, "NL Utterance": "convert a flat list into a list of tuples of every two items in the list, in order", "Code": "print(zip(my_list[0::2], my_list[1::2]))"}, {"ID": 15852295, "NL Utterance": "group a list of ints into a list of tuples of each 2 elements", "Code": "my_new_list = zip(my_list[0::2], my_list[1::2])"}, {"ID": 21129020, "NL Utterance": "set the default encoding to 'utf-8'", "Code": "sys.setdefaultencoding('utf8')"}, {"ID": 7999935, "NL Utterance": "Formate current date and time to a string using pattern '%Y-%m-%d %H:%M:%S'", "Code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')"}, {"ID": 36661837, "NL Utterance": "retrieve arabic texts from string `my_string`", "Code": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))"}, {"ID": 11073609, "NL Utterance": "group dataframe `df` based on minute interval", "Code": "df.groupby(df.index.map(lambda t: t.minute))"}, {"ID": 5404665, "NL Utterance": "access value associated with key 'American' of key 'Apple' from dictionary `dict`", "Code": "dict['Apple']['American']"}, {"ID": 14991195, "NL Utterance": "remove all null values from columns 'three', 'four' and 'five' of dataframe `df2`", "Code": "df2.dropna(subset=['three', 'four', 'five'], how='all')"}, {"ID": 8785554, "NL Utterance": "insert a list `k` at the front of list `a`", "Code": "a.insert(0, k)"}, {"ID": 8785554, "NL Utterance": "insert elements of list `k` into list `a` at position `n`", "Code": "a = a[:n] + k + a[n:]"}, {"ID": 39719140, "NL Utterance": "calculate the mean of the nonzero values' indices of dataframe `df`", "Code": "np.flatnonzero(x).mean()"}, {"ID": 16176996, "NL Utterance": "get date from dataframe `df` column 'dates' to column 'just_date'", "Code": "df['just_date'] = df['dates'].dt.date"}, {"ID": 9053260, "NL Utterance": "remove elements in list `b` from list `a`", "Code": "[x for x in a if x not in b]"}, {"ID": 35015693, "NL Utterance": "join elements of each tuple in list `a` into one string", "Code": "[''.join(x) for x in a]"}, {"ID": 35015693, "NL Utterance": "join items of each tuple in list of tuples `a` into a list of strings", "Code": "list(map(''.join, a))"}, {"ID": 1197600, "NL Utterance": "match blank lines in `s` with regular expressions", "Code": "re.split('\\n\\\\s*\\n', s)"}, {"ID": 4299741, "NL Utterance": "merge a list of integers `[1, 2, 3, 4, 5]` into a single integer", "Code": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])"}, {"ID": 10677350, "NL Utterance": "Convert float 24322.34 to comma-separated string", "Code": "\"\"\"{0:,.2f}\"\"\".format(24322.34)"}, {"ID": 21986194, "NL Utterance": "pass dictionary items `data` as keyword arguments in function `my_function`", "Code": "my_function(**data)"}, {"ID": 845058, "NL Utterance": "get line count of file 'myfile.txt'", "Code": "sum((1 for line in open('myfile.txt')))"}, {"ID": 845058, "NL Utterance": "get line count of file `filename`", "Code": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines"}, {"ID": 3348825, "NL Utterance": "round 1123.456789 to be an integer", "Code": "print(round(1123.456789, -1))"}, {"ID": 6618515, "NL Utterance": "sort list `X` based on values from another list `Y`", "Code": "[x for y, x in sorted(zip(Y, X))]"}, {"ID": 6618515, "NL Utterance": "sorting list 'X' based on values from another list 'Y'", "Code": "[x for y, x in sorted(zip(Y, X))]"}, {"ID": 2600775, "NL Utterance": "get equivalent week number from a date `2010/6/16` using  isocalendar", "Code": "datetime.date(2010, 6, 16).isocalendar()[1]"}, {"ID": 41256648, "NL Utterance": "select multiple ranges of columns 1-10, 15, 17, and 50-100 in pandas dataframe `df`", "Code": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]"}, {"ID": 12589481, "NL Utterance": "apply two different aggregating functions `mean` and `sum` to the same column `dummy` in pandas data frame `df`", "Code": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})"}, {"ID": 6797984, "NL Utterance": "convert string `s` to lowercase", "Code": "s.lower()"}, {"ID": 6797984, "NL Utterance": "convert utf-8 string `s` to lowercase", "Code": "s.decode('utf-8').lower()"}, {"ID": 11573817, "NL Utterance": null, "Code": "ftp.retrbinary('RETR %s' % filename, file.write)"}, {"ID": 19445682, "NL Utterance": "handle the `urlfetch_errors ` exception for imaplib request to url `url`", "Code": "urlfetch.fetch(url, deadline=10 * 60)"}, {"ID": 3486384, "NL Utterance": "output first 100 characters in a string `my_string`", "Code": "print(my_string[0:100])"}, {"ID": 6146778, "NL Utterance": "make matplotlib plot legend put marker in legend only once", "Code": "legend(numpoints=1)"}, {"ID": 638360, "NL Utterance": "get set intersection between dictionaries `d1` and `d2`", "Code": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())"}, {"ID": 4315506, "NL Utterance": "convert csv file 'test.csv' into two-dimensional matrix", "Code": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)"}, {"ID": 4668619, "NL Utterance": "filter the objects in django model 'Sample' between date range `2011-01-01` and `2011-01-31`", "Code": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])"}, {"ID": 4668619, "NL Utterance": "filter objects month wise in django model `Sample` for year `2011`", "Code": "Sample.objects.filter(date__year='2011', date__month='01')"}, {"ID": 3817529, "NL Utterance": "create a dictionary `{'spam': 5, 'ham': 6}` into another dictionary `d` field 'dict3'", "Code": "d['dict3'] = {'spam': 5, 'ham': 6}"}, {"ID": 7741878, "NL Utterance": "apply `numpy.linalg.norm` to each row of a matrix `a`", "Code": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)"}, {"ID": 38987, "NL Utterance": "merge dictionaries form array `dicts` in a single expression", "Code": "dict((k, v) for d in dicts for k, v in list(d.items()))"}, {"ID": 42548362, "NL Utterance": "Convert escaped utf string to utf string in `your string`", "Code": "print('your string'.decode('string_escape'))"}, {"ID": 12765833, "NL Utterance": "counting the number of true booleans in a python list `[True, True, False, False, False, True]`", "Code": "sum([True, True, False, False, False, True])"}, {"ID": 15882395, "NL Utterance": "set the size of figure `fig` in inches to width height of `w`, `h`", "Code": "fig.set_size_inches(w, h, forward=True)"}, {"ID": 20677660, "NL Utterance": "format string with dict `{'5': 'you'}` with integer keys", "Code": "'hello there %(5)s' % {'5': 'you'}"}, {"ID": 19334374, "NL Utterance": "Convert a string of numbers `example_string` separated by `,` into a list of integers", "Code": "map(int, example_string.split(','))"}, {"ID": 19334374, "NL Utterance": "Convert a string of numbers 'example_string' separated by comma into a list of numbers", "Code": "[int(s) for s in example_string.split(',')]"}, {"ID": 15096021, "NL Utterance": "Flatten list `x`", "Code": "x = [i[0] for i in x]"}, {"ID": 15096021, "NL Utterance": "convert list `x` into a flat list", "Code": "y = map(operator.itemgetter(0), x)"}, {"ID": 15096021, "NL Utterance": "get a list `y` of the first element of every tuple in list `x`", "Code": "y = [i[0] for i in x]"}, {"ID": 25148611, "NL Utterance": "extract all the values of a specific key named 'values' from a list of dictionaries", "Code": "results = [item['value'] for item in test_data]"}, {"ID": 2150739, "NL Utterance": "get current datetime in ISO format", "Code": "datetime.datetime.now().isoformat()"}, {"ID": 2150739, "NL Utterance": "get UTC datetime in ISO format", "Code": "datetime.datetime.utcnow().isoformat()"}, {"ID": 38549915, "NL Utterance": "Merge all columns in dataframe `df` into one column", "Code": "df.apply(' '.join, axis=0)"}, {"ID": 22093471, "NL Utterance": "pandas subtract a row from dataframe `df2` from dataframe `df`", "Code": "pd.DataFrame(df.values - df2.values, columns=df.columns)"}, {"ID": 2798627, "NL Utterance": "read file 'myfile.txt' using universal newline mode 'U'", "Code": "print(open('myfile.txt', 'U').read())"}, {"ID": 19328874, "NL Utterance": "print line `line` from text file with 'utf-16-le' format", "Code": "print(line.decode('utf-16-le').split())"}, {"ID": 19328874, "NL Utterance": "open a text file `data.txt` in io module with encoding `utf-16-le`", "Code": "file = io.open('data.txt', 'r', encoding='utf-16-le')"}, {"ID": 19618912, "NL Utterance": "Join data of dataframe `df1` with data in dataframe `df2` based on similar values of column 'user_id' in both dataframes", "Code": "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])"}, {"ID": 3487377, "NL Utterance": "check if string `foo` is UTF-8 encoded", "Code": "foo.decode('utf8').encode('utf8')"}, {"ID": 3061761, "NL Utterance": "get the dimensions of numpy array `a`", "Code": "a.shape"}, {"ID": 3061761, "NL Utterance": "get the dimensions of numpy array `a`", "Code": "N.shape(a)"}, {"ID": 3061761, "NL Utterance": "get the dimensions of array `a`", "Code": "N.shape(a)"}, {"ID": 3061761, "NL Utterance": "get the dimensions of numpy array `a`", "Code": "a.shape"}, {"ID": 2917372, "NL Utterance": "get the indices of tuples in list of tuples `L` where the first value is 53", "Code": "[i for i, v in enumerate(L) if v[0] == 53]"}, {"ID": 444591, "NL Utterance": "convert string of bytes `y\\xcc\\xa6\\xbb` into an int", "Code": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]"}, {"ID": 14162026, "NL Utterance": "get the first row, second column; second row, first column, and first row third column values of numpy array `arr`", "Code": "arr[[0, 1, 1], [1, 0, 2]]"}, {"ID": 1482308, "NL Utterance": "create a list with permutations of string 'abcd'", "Code": "list(powerset('abcd'))"}, {"ID": 715417, "NL Utterance": "Convert string to boolean from defined set of strings", "Code": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']"}, {"ID": 5399112, "NL Utterance": "replace special characters in url 'http://spam.com/go/' using the '%xx' escape", "Code": "urllib.parse.quote('http://spam.com/go/')"}, {"ID": 24525111, "NL Utterance": "Save plot `plt` as svg file 'test.svg'", "Code": "plt.savefig('test.svg')"}, {"ID": 187455, "NL Utterance": "count the number of elements in array `myArray`", "Code": "len(myArray)"}, {"ID": 24492327, "NL Utterance": "insert directory './path/to/your/modules/' to current directory", "Code": "sys.path.insert(0, './path/to/your/modules/')"}, {"ID": 8639973, "NL Utterance": null, "Code": "ax.xaxis.set_ticks_position('top')"}, {"ID": 8215686, "NL Utterance": "Insert records in bulk from \"table1\" of \"master\" DB to \"table1\" of  sqlite3 `cursor` object", "Code": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')"}, {"ID": 2317134, "NL Utterance": "Match regex '[a-zA-Z][\\\\w-]*\\\\Z' on string 'A\\n'", "Code": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')"}, {"ID": 2317134, "NL Utterance": "match regex '[a-zA-Z][\\\\w-]*$' on string '!A_B'", "Code": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')"}, {"ID": 209513, "NL Utterance": "Convert hex string \"deadbeef\" to integer", "Code": "int('deadbeef', 16)"}, {"ID": 209513, "NL Utterance": "Convert hex string \"a\" to integer", "Code": "int('a', 16)"}, {"ID": 209513, "NL Utterance": "Convert hex string \"0xa\" to integer", "Code": "int('0xa', 16)"}, {"ID": 209513, "NL Utterance": "Convert hex string `s` to integer", "Code": "int(s, 16)"}, {"ID": 209513, "NL Utterance": "Convert hex string `hexString` to int", "Code": "int(hexString, 16)"}, {"ID": 28669459, "NL Utterance": "print variable `value ` without spaces", "Code": "print('Value is \"' + str(value) + '\"')"}, {"ID": 28669459, "NL Utterance": "Print a string `value` with string formatting", "Code": "print('Value is \"{}\"'.format(value))"}, {"ID": 13002848, "NL Utterance": "Jinja join elements of array `tags` with space string ' '", "Code": "{{tags | join(' ')}}"}, {"ID": 739993, "NL Utterance": "get a list of locally installed Python modules", "Code": "help('modules')"}, {"ID": 40852575, "NL Utterance": "Get only first element in each of the innermost of the multidimensional list `listD`", "Code": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]"}, {"ID": 7371935, "NL Utterance": "Sort a string `s` in lexicographic order", "Code": "sorted(s, key=str.upper)"}, {"ID": 7371935, "NL Utterance": "sort string `s` in lexicographic order", "Code": "sorted(sorted(s), key=str.upper)"}, {"ID": 7371935, "NL Utterance": "get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first", "Code": "sorted(s, key=str.lower)"}, {"ID": 29464234, "NL Utterance": "find all the rows in Dataframe 'df2' that are also present in Dataframe 'df1', for the columns 'A', 'B', 'C' and 'D'.", "Code": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')"}, {"ID": 8650415, "NL Utterance": "Reverse key-value pairs in a dictionary `map`", "Code": "dict((v, k) for k, v in map.items())"}, {"ID": 6504200, "NL Utterance": "decode unicode string `s` into a readable unicode literal", "Code": "s.decode('unicode_escape')"}, {"ID": 2424412, "NL Utterance": "convert list of strings `str_list` into list of integers", "Code": "[int(i) for i in str_list]"}, {"ID": 2424412, "NL Utterance": "convert a list with string `['1', '2', '3']` into list with integers", "Code": "map(int, ['1', '2', '3'])"}, {"ID": 2424412, "NL Utterance": "convert list with str into list with int", "Code": "list(map(int, ['1', '2', '3']))"}, {"ID": 15313250, "NL Utterance": "find all anchor tags in html `soup` whose url begins with `http://www.iwashere.com`", "Code": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))"}, {"ID": 15313250, "NL Utterance": "find all anchors with a hyperlink that matches the pattern '^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'", "Code": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))"}, {"ID": 7372592, "NL Utterance": "execute a jar file 'Blender.jar' using subprocess", "Code": "subprocess.call(['java', '-jar', 'Blender.jar'])"}, {"ID": 5507948, "NL Utterance": "insert row into mysql database with column 'column1' set to the value `value`", "Code": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))"}, {"ID": 1038824, "NL Utterance": "remove a substring \".com\" from the end of string `url`", "Code": "if url.endswith('.com'):\n    url = url[:(-4)]"}, {"ID": 1038824, "NL Utterance": "remove a substring \".com\" from the end of string `url`", "Code": "url = re.sub('\\\\.com$', '', url)"}, {"ID": 1038824, "NL Utterance": "remove a substring \".com\" from the end of string `url`", "Code": "print(url.replace('.com', ''))"}, {"ID": 1038824, "NL Utterance": "remove a substring `suffix` from the end of string `text`", "Code": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]"}, {"ID": 19112735, "NL Utterance": "print each first value from a list of tuples `mytuple` with string formatting", "Code": "print(', ,'.join([str(i[0]) for i in mytuple]))"}, {"ID": 9775731, "NL Utterance": "clamping floating number `my_value` to be between `min_value` and `max_value`", "Code": "max(min(my_value, max_value), min_value)"}, {"ID": 367155, "NL Utterance": "split a unicode string `text` into a list of words and punctuation characters with a regex", "Code": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)"}, {"ID": 17972020, "NL Utterance": "execute raw sql queue '<sql here>' in database `db` in sqlalchemy-flask app", "Code": "result = db.engine.execute('<sql here>')"}, {"ID": 2823472, "NL Utterance": "quit program", "Code": "sys.exit(0)"}, {"ID": 12005558, "NL Utterance": "get digits in string `my_string`", "Code": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())"}, {"ID": 10974932, "NL Utterance": "split string `str1` on one or more spaces with a regular expression", "Code": "re.split(' +', str1)"}, {"ID": 10974932, "NL Utterance": null, "Code": "re.findall('\\\\S+', str1)"}, {"ID": 14925239, "NL Utterance": "Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr", "Code": "getattr(getattr(myobject, 'id', None), 'number', None)"}, {"ID": 17815945, "NL Utterance": "convert generator object to a dictionary", "Code": "{i: (i * 2) for i in range(10)}"}, {"ID": 17815945, "NL Utterance": "convert generator object to a dictionary", "Code": "dict((i, i * 2) for i in range(10))"}, {"ID": 741877, "NL Utterance": "Matplotlib clear the current axes.", "Code": "plt.cla()"}, {"ID": 21212706, "NL Utterance": "split string `s` into float values and write sum to `total`", "Code": "total = sum(float(item) for item in s.split(','))"}, {"ID": 4523551, "NL Utterance": "Convert ascii value 'P' to binary", "Code": "bin(ord('P'))"}, {"ID": 12572362, "NL Utterance": "print a string after a specific substring ', ' in string `my_string `", "Code": "print(my_string.split(', ', 1)[1])"}, {"ID": 23306653, "NL Utterance": "get value of key `post code` associated with first index of key `places` of dictionary `data`", "Code": "print(data['places'][0]['post code'])"}, {"ID": 33724111, "NL Utterance": "remove colon character surrounded by vowels letters in string `word`", "Code": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)"}, {"ID": 6407780, "NL Utterance": "extract data field 'bar' from json object", "Code": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']"}, {"ID": 10973614, "NL Utterance": "Convert JSON array `array` to Python object", "Code": "data = json.loads(array)"}, {"ID": 10973614, "NL Utterance": "Convert JSON array `array` to Python object", "Code": "data = json.loads(array)"}, {"ID": 2527892, "NL Utterance": "pars a string 'http://example.org/#comments' to extract hashtags into an array", "Code": "re.findall('#(\\\\w+)', 'http://example.org/#comments')"}, {"ID": 14411633, "NL Utterance": "do a boolean check if a string `lestring` contains any of the items in list `lelist`", "Code": "any(e in lestring for e in lelist)"}, {"ID": 17812978, "NL Utterance": null, "Code": "df.plot(x='col_name_1', y='col_name_2', style='o')"}, {"ID": 11709079, "NL Utterance": "Parsing HTML string `html` using BeautifulSoup", "Code": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)"}, {"ID": 11709079, "NL Utterance": "Parsing webpage 'http://www.google.com/' using BeautifulSoup", "Code": "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)"}, {"ID": 17109608, "NL Utterance": "change figure size to 3 by 4 in matplotlib", "Code": "plt.figure(figsize=(3, 4))"}, {"ID": 265960, "NL Utterance": "Strip punctuation from string `s`", "Code": "s.translate(None, string.punctuation)"}, {"ID": 2229827, "NL Utterance": "django urlsafe base64 decode string `uenc` with decryption", "Code": "base64.urlsafe_b64decode(uenc.encode('ascii'))"}, {"ID": 35427814, "NL Utterance": "get the number of all keys in the nested dictionary `dict_list`", "Code": "len(dict_test) + sum(len(v) for v in dict_test.values())"}, {"ID": 5796238, "NL Utterance": "return the conversion of decimal `d` to hex without the '0x' prefix", "Code": "hex(d).split('x')[1]"}, {"ID": 13905936, "NL Utterance": "create a list containing digits of number 123 as its elements", "Code": "list(str(123))"}, {"ID": 13905936, "NL Utterance": "converting integer `num` to list", "Code": "[int(x) for x in str(num)]"}, {"ID": 2582580, "NL Utterance": "select a first form with no name in mechanize", "Code": "br.select_form(nr=0)"}, {"ID": 13156395, "NL Utterance": "Open file 'sample.json' in read mode with encoding of 'utf-8-sig'", "Code": "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))"}, {"ID": 13156395, "NL Utterance": "load json file 'sample.json' with utf-8 bom header", "Code": "json.loads(open('sample.json').read().decode('utf-8-sig'))"}, {"ID": 12030179, "NL Utterance": "setup a smtp mail server to `smtp.gmail.com` with port `587`", "Code": "server = smtplib.SMTP('smtp.gmail.com', 587)"}, {"ID": 12681945, "NL Utterance": "revers correlating bits of integer `n`", "Code": "int('{:08b}'.format(n)[::-1], 2)"}, {"ID": 11040626, "NL Utterance": "add column `d` to index of dataframe `df`", "Code": "df.set_index(['d'], append=True)"}, {"ID": 3294889, "NL Utterance": "Iterating over a dictionary `d` using for loops", "Code": "for (key, value) in d.items():\n    pass"}, {"ID": 3294889, "NL Utterance": "Iterating over a dictionary `d` using for loops", "Code": "for (key, value) in list(d.items()):\n    pass"}, {"ID": 3294889, "NL Utterance": "Iterating key and items over dictionary `d`", "Code": "for (letter, number) in list(d.items()):\n    pass"}, {"ID": 3294889, "NL Utterance": "Iterating key and items over dictionary `d`", "Code": "for (k, v) in list(d.items()):\n    pass"}, {"ID": 3294889, "NL Utterance": "get keys and items of dictionary `d`", "Code": "list(d.items())"}, {"ID": 3294889, "NL Utterance": "get keys and items of dictionary `d` as a list", "Code": "list(d.items())"}, {"ID": 3294889, "NL Utterance": "Iterating key and items over dictionary `d`", "Code": "for (k, v) in list(d.items()):\n    pass"}, {"ID": 3294889, "NL Utterance": "Iterating key and items over dictionary `d`", "Code": "for (letter, number) in list(d.items()):\n    pass"}, {"ID": 3294889, "NL Utterance": "Iterating key and items over dictionary `d`", "Code": "for (letter, number) in list(d.items()):\n    pass"}, {"ID": 18102109, "NL Utterance": "query all data from table `Task` where the value of column `time_spent` is bigger than 3 hours", "Code": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()"}, {"ID": 498106, "NL Utterance": "compile Visual Studio project `project.sln` from the command line through python", "Code": "os.system('msbuild project.sln /p:Configuration=Debug')"}, {"ID": 3108042, "NL Utterance": "get max key in dictionary `MyCount`", "Code": "max(list(MyCount.keys()), key=int)"}, {"ID": 6856119, "NL Utterance": "execute command 'source .bashrc; shopt -s expand_aliases; nuke -x scriptPath' from python script", "Code": "os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')"}, {"ID": 251464, "NL Utterance": "get a name of function `my_function` as a string", "Code": "my_function.__name__"}, {"ID": 251464, "NL Utterance": null, "Code": "my_function.__name__"}, {"ID": 14859458, "NL Utterance": "check if all values in the columns of a numpy matrix `a` are same", "Code": "np.all(a == a[(0), :], axis=0)"}, {"ID": 40384599, "NL Utterance": "sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it", "Code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))"}, {"ID": 40384599, "NL Utterance": "sort a list of tuples `a` by the sum of second and third element of each tuple", "Code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)"}, {"ID": 40384599, "NL Utterance": "sorting a list of tuples `lst` by the sum of the second elements onwards, and third element of the tuple", "Code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))"}, {"ID": 40384599, "NL Utterance": "sort the list of tuples `lst` by the sum of every value except the first and by the first value in reverse order", "Code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)"}, {"ID": 19410585, "NL Utterance": "add header 'WWWAuthenticate' in a flask app with value 'Basic realm=\"test\"'", "Code": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'"}, {"ID": 2375335, "NL Utterance": "clear session key 'mykey'", "Code": "del request.session['mykey']"}, {"ID": 2803852, "NL Utterance": "convert date string '24052010' to date object in format '%d%m%Y'", "Code": "datetime.datetime.strptime('24052010', '%d%m%Y').date()"}, {"ID": 20078816, "NL Utterance": "Replace non-ASCII characters in string `text` with a single space", "Code": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)"}, {"ID": 10346336, "NL Utterance": null, "Code": "numpy.array([[1, 2], [3, 4]])"}, {"ID": 11479392, "NL Utterance": "Get a list `myList` from 1 to 10", "Code": "myList = [i for i in range(10)]"}, {"ID": 40582103, "NL Utterance": "use regex pattern '((.+?)\\\\2+)' to split string '44442(2)2(2)44'", "Code": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]"}, {"ID": 40582103, "NL Utterance": "use regular expression '((\\\\d)(?:[()]*\\\\2*[()]*)*)' to split string `s`", "Code": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]"}, {"ID": 41071947, "NL Utterance": "remove the space between subplots in matplotlib.pyplot", "Code": "fig.subplots_adjust(wspace=0, hspace=0)"}, {"ID": 10201977, "NL Utterance": "Reverse list `x`", "Code": "x[::-1]"}, {"ID": 983855, "NL Utterance": null, "Code": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})"}, {"ID": 6916542, "NL Utterance": "write a list of strings `row` to csv object `csvwriter`", "Code": "csvwriter.writerow(row)"}, {"ID": 794995, "NL Utterance": "Jinja2 formate date `item.date` accorto pattern 'Y M d'", "Code": "{{(item.date | date): 'Y M d'}}"}, {"ID": 5801945, "NL Utterance": "Split a string `text` with comma, question mark or exclamation by non-consuming regex using look-behind", "Code": "re.split('(?<=[\\\\.\\\\?!]) ', text)"}, {"ID": 372102, "NL Utterance": "create a regular expression object with the pattern '\\xe2\\x80\\x93'", "Code": "re.compile('\\xe2\\x80\\x93')"}, {"ID": 1514553, "NL Utterance": "declare an array `variable`", "Code": "variable = []"}, {"ID": 1514553, "NL Utterance": "declare an array with element 'i'", "Code": "intarray = array('i')"}, {"ID": 39821166, "NL Utterance": "given list `to_reverse`, reverse the all sublists and the list itself", "Code": "[sublist[::-1] for sublist in to_reverse[::-1]]"}, {"ID": 12985456, "NL Utterance": null, "Code": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')"}, {"ID": 20876077, "NL Utterance": "unescape special characters without splitting data in array of strings `['I ', u'<', '3s U ', u'&', ' you luvz me']`", "Code": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])"}, {"ID": 5255657, "NL Utterance": "disable logging while running unit tests in python django", "Code": "logging.disable(logging.CRITICAL)"}, {"ID": 13042013, "NL Utterance": "adding url `url` to mysql row", "Code": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))"}, {"ID": 19738169, "NL Utterance": "convert column of date objects 'DateObj' in pandas dataframe `df` to strings in new column 'DateStr'", "Code": "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')"}, {"ID": 15210485, "NL Utterance": "split string `s` by '@' and get the first element", "Code": "s.split('@')[0]"}, {"ID": 41513324, "NL Utterance": "drop rows of dataframe `df` whose index is smaller than the value of `start_remove` or bigger than the value of`end_remove`", "Code": "df.query('index < @start_remove or index > @end_remove')"}, {"ID": 41513324, "NL Utterance": "Drop the rows in pandas timeseries `df` from the row containing index `start_remove` to the row containing index `end_remove`", "Code": "df.loc[(df.index < start_remove) | (df.index > end_remove)]"}, {"ID": 26266362, "NL Utterance": "Get the number of NaN values in each column of dataframe `df`", "Code": "df.isnull().sum()"}, {"ID": 20110170, "NL Utterance": "reset index of dataframe `df`so that existing index values are transferred into `df`as columns", "Code": "df.reset_index(inplace=True)"}, {"ID": 7271482, "NL Utterance": "generate a list containing values associated with the key 'value' of each dictionary inside list `list_of_dicts`", "Code": "[x['value'] for x in list_of_dicts]"}, {"ID": 7271482, "NL Utterance": null, "Code": "[d['value'] for d in l]"}, {"ID": 7271482, "NL Utterance": null, "Code": "[d['value'] for d in l if 'value' in d]"}, {"ID": 1966207, "NL Utterance": "convert numpy array into python list structure", "Code": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()"}, {"ID": 3945856, "NL Utterance": "converting string '(1,2,3,4)' to a tuple", "Code": "ast.literal_eval('(1,2,3,4)')"}, {"ID": 12324456, "NL Utterance": "keep a list `dataList` of lists sorted as it is created by second element", "Code": "dataList.sort(key=lambda x: x[1])"}, {"ID": 3724551, "NL Utterance": "remove duplicated items from list of lists `testdata`", "Code": "list(map(list, set(map(lambda i: tuple(i), testdata))))"}, {"ID": 3724551, "NL Utterance": "uniqueness for list of lists `testdata`", "Code": "[list(i) for i in set(tuple(i) for i in testdata)]"}, {"ID": 4789021, "NL Utterance": "in django, check if a user is in a group 'Member'", "Code": "return user.groups.filter(name='Member').exists()"}, {"ID": 4789021, "NL Utterance": "check if a user `user` is in a group from list of groups `['group1', 'group2']`", "Code": "return user.groups.filter(name__in=['group1', 'group2']).exists()"}, {"ID": 19617355, "NL Utterance": "Change log level dynamically to 'DEBUG' without restarting the application", "Code": "logging.getLogger().setLevel(logging.DEBUG)"}, {"ID": 17426386, "NL Utterance": "Concat each values in a tuple `(34.2424, -64.2344, 76.3534, 45.2344)` to get a string", "Code": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))"}, {"ID": 4605439, "NL Utterance": "swap each pair of characters in string `s`", "Code": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])"}, {"ID": 9402255, "NL Utterance": "save current figure to file 'graph.png' with resolution of 1000 dpi", "Code": "plt.savefig('graph.png', dpi=1000)"}, {"ID": 41313232, "NL Utterance": "delete items from list `my_list` if the item exist in list `to_dell`", "Code": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]"}, {"ID": 2191699, "NL Utterance": "find all the elements that consists value '1' in a list of tuples 'a'", "Code": "[item for item in a if 1 in item]"}, {"ID": 2191699, "NL Utterance": "find all elements in a list of tuples `a` where the first element of each tuple equals 1", "Code": "[item for item in a if item[0] == 1]"}, {"ID": 18816297, "NL Utterance": "Get the index value in list `p_list` using enumerate in list comprehension", "Code": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}"}, {"ID": 6280978, "NL Utterance": null, "Code": "[dict(y) for y in set(tuple(x.items()) for x in d)]"}, {"ID": 5280178, "NL Utterance": "load a file `file.py` into the python console", "Code": "exec(compile(open('file.py').read(), 'file.py', 'exec'))"}, {"ID": 10822635, "NL Utterance": "SQLAlchemy count the number of rows in table `Congress`", "Code": "rows = session.query(Congress).count()"}, {"ID": 18742657, "NL Utterance": null, "Code": "subprocess.call(['test.sh', str(domid)])"}, {"ID": 16888888, "NL Utterance": "read excel file `file_name` using pandas", "Code": "dfs = pd.read_excel(file_name, sheetname=None)"}, {"ID": 38831808, "NL Utterance": "unpack the binary data represented by the hexadecimal string '4081637ef7d0424a' to a float", "Code": "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))"}, {"ID": 5508352, "NL Utterance": "Get index of numpy array `a` with another numpy array `b`", "Code": "a[tuple(b)]"}, {"ID": 9040939, "NL Utterance": "find all possible sequences of elements in a list `[2, 3, 4]`", "Code": "map(list, permutations([2, 3, 4]))"}, {"ID": 36518800, "NL Utterance": "sort a list `unsorted_list` based on another sorted list `presorted_list`", "Code": "sorted(unsorted_list, key=presorted_list.index)"}, {"ID": 19779790, "NL Utterance": null, "Code": "datetime.datetime.now() - datetime.timedelta(days=1)"}, {"ID": 22963263, "NL Utterance": "create a dataframe `d` filled with zeros with indices from 0 to length of `data` and column names from `feature_list`", "Code": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'World' in `x`", "Code": "x.find('World')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'Aloha' in `x`", "Code": "x.find('Aloha')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'cc' in string 'sdfasdf'", "Code": "'sdfasdf'.index('cc')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'df' in string 'sdfasdf'", "Code": "'sdfasdf'.index('df')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'a' in string `str`", "Code": "str.find('a')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 'g' in string `str`", "Code": "str.find('g')"}, {"ID": 674764, "NL Utterance": "find the index of sub string 's' in string `str` starting from index 11", "Code": "str.find('s', 11)"}, {"ID": 674764, "NL Utterance": "find the index of sub string 's' in string `str` starting from index 15", "Code": "str.find('s', 15)"}, {"ID": 674764, "NL Utterance": "find the index of sub string 's' in string `str` starting from index 16", "Code": "str.find('s', 16)"}, {"ID": 674764, "NL Utterance": "find the index of sub string 's' in string `str` starting from index 11 and ending at index 14", "Code": "str.find('s', 11, 14)"}, {"ID": 17627531, "NL Utterance": "sort list of date strings 'd'", "Code": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))"}, {"ID": 27946742, "NL Utterance": "Get all the sentences from a string `text` using regex", "Code": "re.split('\\\\.\\\\s', text)"}, {"ID": 27946742, "NL Utterance": null, "Code": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))"}, {"ID": 8247792, "NL Utterance": "get all characters in string 'foobar' up to the fourth index", "Code": "\"\"\"foobar\"\"\"[:4]"}, {"ID": 8247792, "NL Utterance": "cut a string by delimiter '&'", "Code": "s.rfind('&')"}, {"ID": 8247792, "NL Utterance": "cut a string using delimiter '&'", "Code": "s[:s.rfind('&')]"}, {"ID": 32874539, "NL Utterance": "find a tag `option` whose `value` attribute is `state` in selenium", "Code": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()"}, {"ID": 4706499, "NL Utterance": "append line \"appended text\" to file \"test.txt\"", "Code": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')"}, {"ID": 4706499, "NL Utterance": "append line \"cool beans...\" to file \"foo\"", "Code": "with open('foo', 'a') as f:\n    f.write('cool beans...')"}, {"ID": 4706499, "NL Utterance": "append to file 'test1' content 'koko'", "Code": "with open('test1', 'ab') as f:\n    pass"}, {"ID": 4706499, "NL Utterance": "append to file 'test' content 'koko'", "Code": "open('test', 'a+b').write('koko')"}, {"ID": 18312447, "NL Utterance": "split string 'x+13.5*10x-4e1' into tokens", "Code": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])"}, {"ID": 34587346, "NL Utterance": "Find all Chinese characters in string `ipath`", "Code": "re.findall('[\\u4e00-\\u9fff]+', ipath)"}, {"ID": 13128565, "NL Utterance": "split string `s` by letter 's'", "Code": "s.split('s')"}, {"ID": 1196074, "NL Utterance": "run shell command 'rm -r some.file' in the background", "Code": "subprocess.Popen(['rm', '-r', 'some.file'])"}, {"ID": 8303993, "NL Utterance": "convert a list of dictionaries `listofdict into a dictionary of dictionaries", "Code": "dict((d['name'], d) for d in listofdict)"}, {"ID": 311627, "NL Utterance": "print current date and time in a regular format", "Code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')"}, {"ID": 311627, "NL Utterance": "print current date and time in a regular format", "Code": "time.strftime('%Y-%m-%d %H:%M')"}, {"ID": 27744882, "NL Utterance": "find consecutive consonants in a word `CONCENTRATION` using regex", "Code": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)"}, {"ID": 4111412, "NL Utterance": "get a list of indices of non zero elements in a list `a`", "Code": "[i for i, e in enumerate(a) if e != 0]"}, {"ID": 11339210, "NL Utterance": "get multiple integer values from a string 'string1'", "Code": "map(int, re.findall('\\\\d+', string1))"}, {"ID": 647515, "NL Utterance": "get the path of Python executable under windows", "Code": "os.path.dirname(sys.executable)"}, {"ID": 14406214, "NL Utterance": "move an x-axis label to the top of a plot `ax` in matplotlib", "Code": "ax.xaxis.set_label_position('top')"}, {"ID": 14406214, "NL Utterance": "move x-axis to the top of a plot `ax`", "Code": "ax.xaxis.tick_top()"}, {"ID": 14406214, "NL Utterance": "Move x-axis of the pyplot object `ax` to the top of a plot in matplotlib", "Code": "ax.xaxis.set_ticks_position('top')"}, {"ID": 25279993, "NL Utterance": "parse string '2015/01/01 12:12am' to DateTime object using format '%Y/%m/%d %I:%M%p'", "Code": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')"}, {"ID": 16387069, "NL Utterance": "Open image 'picture.jpg'", "Code": "img = Image.open('picture.jpg')\nimg.show()"}, {"ID": 16387069, "NL Utterance": "Open image \"picture.jpg\"", "Code": "img = Image.open('picture.jpg')\nImg.show"}, {"ID": 179369, "NL Utterance": "terminate the script using status value 0", "Code": "sys.exit(0)"}, {"ID": 179369, "NL Utterance": "abort the execution of the script using message 'aa! errors!'", "Code": "sys.exit('aa! errors!')"}, {"ID": 179369, "NL Utterance": "abort the execution of a python script", "Code": "sys.exit()"}, {"ID": 34543513, "NL Utterance": "find maximum with lookahead = 4 in a list `arr`", "Code": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]"}, {"ID": 1810743, "NL Utterance": "set the current working directory to 'c:\\\\Users\\\\uname\\\\desktop\\\\python'", "Code": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"}, {"ID": 1810743, "NL Utterance": "set the current working directory to path `path`", "Code": "os.chdir(path)"}, {"ID": 3159155, "NL Utterance": "get a list `no_integers` of all the items in list `mylist` that are not of type `int`", "Code": "no_integers = [x for x in mylist if not isinstance(x, int)]"}, {"ID": 2637760, "NL Utterance": "match contents of an element to 'Example' in xpath (lxml)", "Code": "tree.xpath(\".//a[text()='Example']\")[0].tag"}, {"ID": 40512124, "NL Utterance": "concatenate key/value pairs in dictionary `a` with string ', ' into a single string", "Code": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])"}, {"ID": 16866261, "NL Utterance": "Strip all non-ASCII characters from a unicode string, `\\xa3\\u20ac\\xa3\\u20ac`", "Code": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))"}, {"ID": 16866261, "NL Utterance": "Get all non-ascii characters in a unicode string `\\xa3100 is worth more than \\u20ac100`", "Code": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))"}, {"ID": 988228, "NL Utterance": "build a dict of key:value pairs from a string representation of a dict, `{'muffin' : 'lolz', 'foo' : 'kitty'}`", "Code": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")"}, {"ID": 13793973, "NL Utterance": "Print string `t` with proper unicode representations", "Code": "print(t.decode('unicode_escape'))"}, {"ID": 10525301, "NL Utterance": "Normalize string `str` from 'cp1252' code to 'utf-8' code", "Code": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))"}, {"ID": 2407398, "NL Utterance": "merge lists `list_a` and `list_b` into a list of tuples", "Code": "zip(list_a, list_b)"}, {"ID": 2407398, "NL Utterance": "merge lists `a` and `a` into a list of tuples", "Code": "list(zip(a, b))"}, {"ID": 18695605, "NL Utterance": "convert pandas DataFrame `df` to a dictionary using `id` field as the key", "Code": "df.set_index('id').to_dict()"}, {"ID": 18695605, "NL Utterance": "convert pandas dataframe `df` with fields 'id', 'value' to dictionary", "Code": "df.set_index('id')['value'].to_dict()"}, {"ID": 1534542, "NL Utterance": null, "Code": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))"}, {"ID": 640001, "NL Utterance": "remove parentheses and text within it in string `filename`", "Code": "re.sub('\\\\([^)]*\\\\)', '', filename)"}, {"ID": 29454773, "NL Utterance": "Check if string 'a b' only contains letters and spaces", "Code": "\"\"\"a b\"\"\".replace(' ', '').isalpha()"}, {"ID": 14050824, "NL Utterance": "sum each element `x` in list `first` with element `y` at the same index in list `second`.", "Code": "[(x + y) for x, y in zip(first, second)]"}, {"ID": 11932729, "NL Utterance": "sort a python dictionary `a_dict` by element `1` of the value", "Code": "sorted(list(a_dict.items()), key=lambda item: item[1][1])"}, {"ID": 4108561, "NL Utterance": null, "Code": "re.compile('[^a-zA-Z0-9-]+')"}, {"ID": 13070461, "NL Utterance": "get index of the biggest 2 values of a list `a`", "Code": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]"}, {"ID": 13070461, "NL Utterance": "get indexes of the largest `2` values from a list `a` using itemgetter", "Code": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]"}, {"ID": 13070461, "NL Utterance": "get the indexes of the largest `2` values from a list of integers `a`", "Code": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]"}, {"ID": 14538885, "NL Utterance": "get index of key 'c' in dictionary `x`", "Code": "list(x.keys()).index('c')"}, {"ID": 8337004, "NL Utterance": "Print +1 using format '{0:+d}'", "Code": "print('{0:+d}'.format(score))"}, {"ID": 3460161, "NL Utterance": "remove adjacent duplicate elements from a list `[1, 2, 2, 3, 2, 2, 4]`", "Code": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]"}, {"ID": 2168123, "NL Utterance": "split string \"0,1,2\" based on delimiter ','", "Code": "\"\"\"0,1,2\"\"\".split(',')"}, {"ID": 2168123, "NL Utterance": "convert the string '0,1,2' to a list of integers", "Code": "[int(x) for x in '0,1,2'.split(',')]"}, {"ID": 6586310, "NL Utterance": "convert list of key-value tuples `[('A', 1), ('B', 2), ('C', 3)]` into dictionary", "Code": "dict([('A', 1), ('B', 2), ('C', 3)])"}, {"ID": 3685265, "NL Utterance": "save numpy array `x` into text file 'test.txt'", "Code": "np.savetxt('test.txt', x)"}, {"ID": 19267591, "NL Utterance": "store the output of command 'ls' in variable `direct_output`", "Code": "direct_output = subprocess.check_output('ls', shell=True)"}, {"ID": 32032836, "NL Utterance": "get all column name of dataframe `df` except for column 'T1_V6'", "Code": "df[df.columns - ['T1_V6']]"}, {"ID": 9560207, "NL Utterance": "get count of values in numpy array `a` that are between values `25` and `100`", "Code": "((25 < a) & (a < 100)).sum()"}, {"ID": 8380389, "NL Utterance": "Get day name from a datetime object", "Code": "date.today().strftime('%A')"}, {"ID": 15863066, "NL Utterance": null, "Code": "re.search('\\\\bis\\\\b', your_string)"}, {"ID": 4830535, "NL Utterance": "Jinja parse datetime object `car.date_of_manufacture` to use format pattern `datetime`", "Code": "{{car.date_of_manufacture | datetime}}"}, {"ID": 4830535, "NL Utterance": "Get the date object `date_of_manufacture` of object `car` in string  format '%Y-%m-%d'", "Code": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}"}, {"ID": 952914, "NL Utterance": "make a flat list from list of lists `sublist`", "Code": "[item for sublist in l for item in sublist]"}, {"ID": 952914, "NL Utterance": "make a flat list from list of lists `list2d`", "Code": "list(itertools.chain(*list2d))"}, {"ID": 952914, "NL Utterance": "make a flat list from list of lists `list2d`", "Code": "list(itertools.chain.from_iterable(list2d))"}, {"ID": 3673428, "NL Utterance": "convert ascii value 'a' to int", "Code": "ord('a')"}, {"ID": 3984539, "NL Utterance": "replace white spaces in string '  a\\n b\\n c\\nd  e' with empty string ''", "Code": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')"}, {"ID": 3984539, "NL Utterance": "remove white spaces from all the lines using a regular expression in string 'a\\n b\\n c'", "Code": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')"}, {"ID": 19300174, "NL Utterance": "destruct elements of list `[1, 2, 3]` to variables `a`, `b` and `c`", "Code": "a, b, c = [1, 2, 3]"}, {"ID": 13368723, "NL Utterance": "split list `mylist` into a list of lists whose elements have the same first five characters", "Code": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]"}, {"ID": 37584492, "NL Utterance": "remove all instances of parenthesesis containing text beginning with `as ` from string `line`", "Code": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)"}, {"ID": 17027690, "NL Utterance": "skip the newline while printing `line`", "Code": "print(line.rstrip('\\n'))"}, {"ID": 18358938, "NL Utterance": "get index values of pandas dataframe `df` as list", "Code": "df.index.values.tolist()"}, {"ID": 53513, "NL Utterance": "check if list `a` is empty", "Code": "if (not a):\n    pass"}, {"ID": 53513, "NL Utterance": "check if list `seq` is empty", "Code": "if (not seq):\n    pass"}, {"ID": 53513, "NL Utterance": "check if list `li` is empty", "Code": "if (len(li) == 0):\n    pass"}, {"ID": 13717463, "NL Utterance": "create a list containing the indices of elements greater than 4 in list `a`", "Code": "[i for i, v in enumerate(a) if v > 4]"}, {"ID": 13237941, "NL Utterance": "reverse list `yourdata`", "Code": "sorted(yourdata, reverse=True)"}, {"ID": 13237941, "NL Utterance": "sort list of nested dictionaries `yourdata` in reverse based on values associated with each dictionary's key 'subkey'", "Code": "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)"}, {"ID": 13237941, "NL Utterance": "sort list of nested dictionaries `yourdata` in reverse order of 'key' and 'subkey'", "Code": "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)"}, {"ID": 37084812, "NL Utterance": "remove decimal points in pandas data frame using round", "Code": "df.round()"}, {"ID": 8938449, "NL Utterance": "Get data from matplotlib plot", "Code": "gca().get_lines()[n].get_xydata()"}, {"ID": 37125495, "NL Utterance": "get the maximum 2 values per row in array `A`", "Code": "A[:, -2:]"}, {"ID": 23531030, "NL Utterance": "Get value for  \"username\" parameter in GET request  in Django", "Code": "request.GET.get('username', '')"}, {"ID": 4301069, "NL Utterance": "pretty-print ordered dictionary `o`", "Code": "pprint(dict(list(o.items())))"}, {"ID": 32458541, "NL Utterance": "Confirm urls in Django properly", "Code": "url('^$', include('sms.urls')),"}, {"ID": 32458541, "NL Utterance": "Configure url in django properly", "Code": "url('^', include('sms.urls')),"}, {"ID": 1874194, "NL Utterance": "get the tuple in list `a_list` that has the largest item in the second index", "Code": "max_item = max(a_list, key=operator.itemgetter(1))"}, {"ID": 1874194, "NL Utterance": "find tuple in list of tuples `a_list` with the largest second element", "Code": "max(a_list, key=operator.itemgetter(1))"}, {"ID": 29100599, "NL Utterance": "resample series `s` into 3 months bins and sum each bin", "Code": "s.resample('3M', how='sum')"}, {"ID": 2621674, "NL Utterance": "extract elements at indices (1, 2, 5) from a list `a`", "Code": "[a[i] for i in (1, 2, 5)]"}, {"ID": 5245058, "NL Utterance": "filter lines from a text file 'textfile' which contain a word 'apple'", "Code": "[line for line in open('textfile') if 'apple' in line]"}, {"ID": 2721782, "NL Utterance": "convert a date string `s` to a datetime object", "Code": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')"}, {"ID": 27896214, "NL Utterance": "reading tab-delimited csv file `filename` with pandas on mac", "Code": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')"}, {"ID": 4628618, "NL Utterance": "replace only first occurence of string `TEST` from a string `longlongTESTstringTEST`", "Code": "'longlongTESTstringTEST'.replace('TEST', '?', 1)"}, {"ID": 12777222, "NL Utterance": "zip file `pdffile` using its basename as directory name", "Code": "archive.write(pdffile, os.path.basename(pdffile))"}, {"ID": 3457673, "NL Utterance": "create a dictionary of pairs from a list of tuples `myListOfTuples`", "Code": "dict(x[1:] for x in reversed(myListOfTuples))"}, {"ID": 8194156, "NL Utterance": "subtract elements of list `List1` from elements of list `List2`", "Code": "[(x1 - x2) for x1, x2 in zip(List1, List2)]"}, {"ID": 5577501, "NL Utterance": "check if string `string` starts with a number", "Code": "string[0].isdigit()"}, {"ID": 5577501, "NL Utterance": "Check if string `strg` starts with any of the elements in list ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9')", "Code": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))"}, {"ID": 4934806, "NL Utterance": "print script's directory", "Code": "print(os.path.dirname(os.path.realpath(__file__)))"}, {"ID": 15530399, "NL Utterance": "split string `text` by the occurrences of regex pattern '(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)'", "Code": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)"}, {"ID": 21519203, "NL Utterance": "Make a scatter plot using unpacked values of list `li`", "Code": "plt.scatter(*zip(*li))"}, {"ID": 16040156, "NL Utterance": "rearrange tuple of tuples `t`", "Code": "tuple(zip(*t))"}, {"ID": 40963347, "NL Utterance": "Get average for every three columns in `df` dataframe", "Code": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()"}, {"ID": 180606, "NL Utterance": "convert a list `L` of ascii values to a string", "Code": "\"\"\"\"\"\".join(chr(i) for i in L)"}, {"ID": 13462365, "NL Utterance": "count the number of pairs in dictionary `d` whose value equal to `chosen_value`", "Code": "sum(x == chosen_value for x in list(d.values()))"}, {"ID": 13462365, "NL Utterance": "count the number of values in `d` dictionary that are predicate to function `some_condition`", "Code": "sum(1 for x in list(d.values()) if some_condition(x))"}, {"ID": 13291539, "NL Utterance": "convert double 0.00582811585976 to float", "Code": "struct.unpack('f', struct.pack('f', 0.00582811585976))"}, {"ID": 8777753, "NL Utterance": "convert datetime.date `dt` to utc timestamp", "Code": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()"}, {"ID": 13838405, "NL Utterance": "sort column `m` in panda dataframe `df`", "Code": "df.sort('m')"}, {"ID": 3766633, "NL Utterance": "Sort a data `a` in descending order based on the `modified` attribute of elements using lambda function", "Code": "a = sorted(a, key=lambda x: x.modified, reverse=True)"}, {"ID": 39604780, "NL Utterance": "print the truth value of `a`", "Code": "print(bool(a))"}, {"ID": 42142756, "NL Utterance": "rename `last` row index label in dataframe `df` to `a`", "Code": "df = df.rename(index={last: 'a'})"}, {"ID": 28416408, "NL Utterance": "Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values", "Code": "km.fit(x.reshape(-1, 1))"}, {"ID": 17608210, "NL Utterance": "Sort a list of strings 'words' such that items starting with 's' come first.", "Code": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)"}, {"ID": 21414159, "NL Utterance": "open the login site 'http://somesite.com/adminpanel/index.php' in the browser", "Code": "webbrowser.open('http://somesite.com/adminpanel/index.php')"}, {"ID": 8654637, "NL Utterance": "fetch all elements in a dictionary `parent_dict`, falling between two keys 2 and 4", "Code": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)"}, {"ID": 8654637, "NL Utterance": "fetch all elements in a dictionary 'parent_dict' where the key is between the range of 2 to 4", "Code": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)"}, {"ID": 13668393, "NL Utterance": "sort two lists `list1` and `list2` together using lambda function", "Code": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]"}, {"ID": 10543303, "NL Utterance": "get the number of values in list `j` that is greater than 5", "Code": "sum(((i > 5) for i in j))"}, {"ID": 10543303, "NL Utterance": "get the number of values in list `j` that is greater than 5", "Code": "len([1 for i in j if (i > 5)])"}, {"ID": 10543303, "NL Utterance": "get the number of values in list `j` that is greater than `i`", "Code": "j = np.array(j)\nsum((j > i))"}, {"ID": 12655007, "NL Utterance": "zip list `a`, `b`, `c` into a list of tuples", "Code": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]"}, {"ID": 16249440, "NL Utterance": "changing permission of file `path` to `stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH`", "Code": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)"}, {"ID": 26727314, "NL Utterance": "argparse associate zero or more arguments with flag 'file'", "Code": "parser.add_argument('file', nargs='*')"}, {"ID": 32996293, "NL Utterance": "get a list of booleans `z` that shows wether the corresponding items in list `x` and `y` are equal", "Code": "z = [(i == j) for i, j in zip(x, y)]"}, {"ID": 32996293, "NL Utterance": "create a list which indicates whether each element in `x` and `y` is identical", "Code": "[(x[i] == y[i]) for i in range(len(x))]"}, {"ID": 4289331, "NL Utterance": null, "Code": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]"}, {"ID": 18176933, "NL Utterance": "create an empty data frame `df2` with index from another data frame `df1`", "Code": "df2 = pd.DataFrame(index=df1.index)"}, {"ID": 826284, "NL Utterance": "unpack first and second bytes of byte string `pS` into integer", "Code": "struct.unpack('h', pS[0:2])"}, {"ID": 16677816, "NL Utterance": "print list `t` into a table-like shape", "Code": "print('\\n'.join('  '.join(map(str, row)) for row in t))"}, {"ID": 28161356, "NL Utterance": null, "Code": "df.sort_values(by='Date')"}, {"ID": 14442636, "NL Utterance": "check if a checkbox is checked in selenium python webdriver", "Code": "driver.find_element_by_name('<check_box_name>').is_selected()"}, {"ID": 14442636, "NL Utterance": "determine if checkbox with id '<check_box_id>' is checked in selenium python webdriver", "Code": "driver.find_element_by_id('<check_box_id>').is_selected()"}, {"ID": 2951701, "NL Utterance": "replace `0` with `2` in the list `[0, 1, 0, 3]`", "Code": "[(a if a else 2) for a in [0, 1, 0, 3]]"}, {"ID": 30747705, "NL Utterance": "Produce a string that is suitable as Unicode literal from string 'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'", "Code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')"}, {"ID": 30747705, "NL Utterance": "Parse a unicode string `M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s`", "Code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')"}, {"ID": 867866, "NL Utterance": "convert Unicode codepoint to utf8 hex", "Code": "chr(int('fd9b', 16)).encode('utf-8')"}, {"ID": 13277440, "NL Utterance": "use upper case letters to print hex value `value`", "Code": "print('0x%X' % value)"}, {"ID": 16099694, "NL Utterance": "get a list `cleaned` that contains all non-empty elements in list `your_list`", "Code": "cleaned = [x for x in your_list if x]"}, {"ID": 13324554, "NL Utterance": "create a slice object using string `string_slice`", "Code": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])"}, {"ID": 24748445, "NL Utterance": "Find all the tags `a` and `div` from Beautiful Soup object `soup`", "Code": "soup.find_all(['a', 'div'])"}, {"ID": 7142062, "NL Utterance": "get the name of function `func` as a string", "Code": "print(func.__name__)"}, {"ID": 10472907, "NL Utterance": "convert dictionary `adict` into string", "Code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"}, {"ID": 10472907, "NL Utterance": "convert dictionary `adict` into string", "Code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))"}, {"ID": 2612802, "NL Utterance": "copy list `old_list` as `new_list`", "Code": "new_list = old_list[:]"}, {"ID": 2612802, "NL Utterance": "copy list `old_list` as `new_list`", "Code": "new_list = list(old_list)"}, {"ID": 2612802, "NL Utterance": "copy list `old_list` as `new_list`", "Code": "new_list = copy.copy(old_list)"}, {"ID": 2612802, "NL Utterance": "deep copy list `old_list` as `new_list`", "Code": "new_list = copy.deepcopy(old_list)"}, {"ID": 2612802, "NL Utterance": "make a copy of list `old_list`", "Code": "[i for i in old_list]"}, {"ID": 25540259, "NL Utterance": "remove frame of legend in plot `plt`", "Code": "plt.legend(frameon=False)"}, {"ID": 38147259, "NL Utterance": "Print a emoji from a string `\\\\ud83d\\\\ude4f` having surrogate pairs", "Code": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')"}, {"ID": 3061, "NL Utterance": "calling a function named 'myfunction' in the module", "Code": "globals()['myfunction']()"}, {"ID": 1949318, "NL Utterance": "Check the status code of url \"http://www.stackoverflow.com\"", "Code": "urllib.request.urlopen('http://www.stackoverflow.com').getcode()"}, {"ID": 1949318, "NL Utterance": "Check the status code of url \"www.python.org\"", "Code": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"}, {"ID": 1949318, "NL Utterance": "Check the status code of url `url`", "Code": "r = requests.head(url)\nreturn (r.status_code == 200)"}, {"ID": 1949318, "NL Utterance": "Checking if website \"http://www.stackoverflow.com\" is up", "Code": "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())"}, {"ID": 23931444, "NL Utterance": "Selenium `driver` click a hyperlink with the pattern \"a[href^='javascript']\"", "Code": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()"}, {"ID": 17098654, "NL Utterance": "store data frame `df` to file `file_name` using pandas, python", "Code": "df.to_pickle(file_name)"}, {"ID": 40311987, "NL Utterance": "calculate the mean of columns with same name in dataframe `df`", "Code": "df.groupby(by=df.columns, axis=1).mean()"}, {"ID": 4768151, "NL Utterance": "sort list `bar` by each element's attribute `attrb1` and attribute `attrb2` in reverse order", "Code": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)"}, {"ID": 1962795, "NL Utterance": "get alpha value `alpha` of a png image `img`", "Code": "alpha = img.split()[-1]"}, {"ID": 22749706, "NL Utterance": null, "Code": "[len(x) for x in s.split()]"}, {"ID": 3945750, "NL Utterance": "BeautifulSoup find tag 'div' with styling 'width=300px;' in HTML string `soup`", "Code": "soup.findAll('div', style='width=300px;')"}, {"ID": 9336270, "NL Utterance": "Execute SQL statement `sql` with values of dictionary `myDict` as parameters", "Code": "cursor.execute(sql, list(myDict.values()))"}, {"ID": 32533944, "NL Utterance": "Convert CSV file `Result.csv` to Pandas dataframe using separator ' '", "Code": "df.to_csv('Result.csv', index=False, sep=' ')"}, {"ID": 8306171, "NL Utterance": "update the `globals()` dictionary with the contents of the `vars(args)` dictionary", "Code": "globals().update(vars(args))"}, {"ID": 9889635, "NL Utterance": "find all substrings in `mystring` beginning and ending with square brackets", "Code": "re.findall('\\\\[(.*?)\\\\]', mystring)"}, {"ID": 2075128, "NL Utterance": "Format all floating variables `var1`, `var2`, `var3`, `var1` to print to two decimal places.", "Code": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))"}, {"ID": 8425046, "NL Utterance": "Remove all items from a dictionary `d` where the values are less than `1`", "Code": "d = dict((k, v) for k, v in d.items() if v > 0)"}, {"ID": 8425046, "NL Utterance": "Filter dictionary `d` to have items with value greater than 0", "Code": "d = {k: v for k, v in list(d.items()) if v > 0}"}, {"ID": 17690738, "NL Utterance": "convert a string of date strings `date_stngs ` to datetime objects and put them in a dataframe", "Code": "pd.to_datetime(pd.Series(date_stngs))"}, {"ID": 29902714, "NL Utterance": "get  value at index `[2, 0]` in dataframe `df`", "Code": "df.iloc[2, 0]"}, {"ID": 3899980, "NL Utterance": "change the font size on plot `matplotlib` to 22", "Code": "matplotlib.rcParams.update({'font.size': 22})"}, {"ID": 18837262, "NL Utterance": "converting dictionary `d` into a dataframe `pd` with keys as data for column 'Date' and the corresponding values as data for column 'DateValue'", "Code": "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])"}, {"ID": 21022865, "NL Utterance": "create a dataframe containing the multiplication of element-wise in dataframe `df` and dataframe `df2` using index name and column labels of dataframe `df`", "Code": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)"}, {"ID": 4703390, "NL Utterance": "extract floating number from string 'Current Level: 13.4 db.'", "Code": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')"}, {"ID": 4703390, "NL Utterance": "extract floating point numbers from a string 'Current Level: -13.2 db or 14.2 or 3'", "Code": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')"}, {"ID": 23286254, "NL Utterance": "pair each element in list `it` 3 times into a tuple", "Code": "zip(it, it, it)"}, {"ID": 22245171, "NL Utterance": "lowercase a python dataframe string in column 'x' if it has missing values in dataframe `df`", "Code": "df['x'].str.lower()"}, {"ID": 10895028, "NL Utterance": "append dict `{'f': var6, 'g': var7, 'h': var8}` to value of key `e` in dict `jsobj['a']['b']`", "Code": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})"}, {"ID": 2133571, "NL Utterance": "Concat a list of strings `lst` using string formatting", "Code": "\"\"\"\"\"\".join(lst)"}, {"ID": 15014276, "NL Utterance": "sum values greater than 0 in dictionary `d`", "Code": "sum(v for v in list(d.values()) if v > 0)"}, {"ID": 32722143, "NL Utterance": "run flask application `app` in debug mode.", "Code": "app.run(debug=True)"}, {"ID": 14661701, "NL Utterance": "drop rows whose index value in list `[1, 3]` in dataframe `df`", "Code": "df.drop(df.index[[1, 3]], inplace=True)"}, {"ID": 18689823, "NL Utterance": "replace nan values in a pandas data frame with the average of columns", "Code": "df.apply(lambda x: x.fillna(x.mean()), axis=0)"}, {"ID": 677656, "NL Utterance": "extract attribute `my_attr` from each object in list `my_list`", "Code": "[o.my_attr for o in my_list]"}, {"ID": 16994696, "NL Utterance": "python get time stamp on file `file` in '%m/%d/%Y' format", "Code": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))"}, {"ID": 9323749, "NL Utterance": "check if dictionary `subset` is a subset of dictionary `superset`", "Code": "all(item in list(superset.items()) for item in list(subset.items()))"}, {"ID": 7768859, "NL Utterance": "Convert integer elements in list `wordids` to strings", "Code": "[str(wi) for wi in wordids]"}, {"ID": 11621165, "NL Utterance": "Reset the indexes of a pandas data frame", "Code": "df2 = df.reset_index()"}, {"ID": 10624937, "NL Utterance": "format datetime in `dt` as string in format `'%m/%d/%Y`", "Code": "dt.strftime('%m/%d/%Y')"}, {"ID": 5180365, "NL Utterance": "format floating point number  `TotalAmount` to be rounded off to two decimal places and have a comma thousands' seperator", "Code": "print('Total cost is: ${:,.2f}'.format(TotalAmount))"}, {"ID": 40660956, "NL Utterance": "sum the values in each row of every two adjacent columns in dataframe `df`", "Code": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')"}, {"ID": 20733827, "NL Utterance": "create list `randomList` with 10 random floating point numbers between 0.0 and 1.0", "Code": "randomList = [random.random() for _ in range(10)]"}, {"ID": 11066874, "NL Utterance": "find href value that has string 'follow?page' inside it", "Code": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))"}, {"ID": 5917537, "NL Utterance": "immediately see output of print statement that doesn't end in a newline", "Code": "sys.stdout.flush()"}, {"ID": 4859292, "NL Utterance": "get a random key `country` and value `capital` form a dictionary `d`", "Code": "country, capital = random.choice(list(d.items()))"}, {"ID": 113655, "NL Utterance": "split string `Word to Split` into a list of characters", "Code": "list('Word to Split')"}, {"ID": 38862349, "NL Utterance": "Create a list containing words that contain vowel letter followed by the same vowel in file 'file.text'", "Code": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]"}, {"ID": 11264005, "NL Utterance": "Validate IP address using Regex", "Code": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')"}, {"ID": 1027714, "NL Utterance": "execute file 'filename.py'", "Code": "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))"}, {"ID": 17223174, "NL Utterance": "SQLAlchemy count the number of rows with distinct values in column `name` of table `Tag`", "Code": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()"}, {"ID": 10857924, "NL Utterance": "remove null columns in a dataframe `df`", "Code": "df = df.dropna(axis=1, how='all')"}, {"ID": 12310141, "NL Utterance": "check if all lists in list `L` have three elements of integer 1", "Code": "all(x.count(1) == 3 for x in L)"}, {"ID": 13168252, "NL Utterance": "Get a list comparing two lists of tuples `l1` and `l2` if any first value in `l1` matches with first value in `l2`", "Code": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]"}, {"ID": 27966626, "NL Utterance": "clear the textbox `text` in tkinter", "Code": "tex.delete('1.0', END)"}, {"ID": 10664430, "NL Utterance": "Convert long int `myNumber` into date and time represented in the the string format '%Y-%m-%d %H:%M:%S'", "Code": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')"}, {"ID": 41246071, "NL Utterance": "Spawn a process to run python script `myscript.py` in C++", "Code": "system('python myscript.py')"}, {"ID": 17038639, "NL Utterance": "sort a list `your_list` of class objects by their values for the attribute `anniversary_score`", "Code": "your_list.sort(key=operator.attrgetter('anniversary_score'))"}, {"ID": 17038639, "NL Utterance": "sort list `your_list` by the `anniversary_score` attribute of each object", "Code": "your_list.sort(key=lambda x: x.anniversary_score)"}, {"ID": 34097281, "NL Utterance": "convert a tensor with list of constants `[1, 2, 3]` into a numpy array in tensorflow", "Code": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))"}, {"ID": 15269161, "NL Utterance": "convert list `a` from being consecutive sequences of tuples into a single sequence of elements", "Code": "list(itertools.chain(*a))"}, {"ID": 18663026, "NL Utterance": "Set value for key `a` in dict `count` to `0` if key `a` does not exist or if value is `none`", "Code": "count.setdefault('a', 0)"}, {"ID": 30328646, "NL Utterance": "Do group by on `cluster` column in `df` and get its mean", "Code": "df.groupby(['cluster']).mean()"}, {"ID": 12141150, "NL Utterance": "get number in list `myList` closest in value to number `myNumber`", "Code": "min(myList, key=lambda x: abs(x - myNumber))"}, {"ID": 5858916, "NL Utterance": "check if any of the items in  `search` appear in `string`", "Code": "any(x in string for x in search)"}, {"ID": 32792602, "NL Utterance": "search for occurrences of regex pattern `pattern` in string `url`", "Code": "print(pattern.search(url).group(1))"}, {"ID": 42458734, "NL Utterance": "factorize all string values in dataframe `s` into floats", "Code": "(s.factorize()[0] + 1).astype('float')"}, {"ID": 11677860, "NL Utterance": "Get a list `C` by subtracting values in one list `B` from corresponding values in another list `A`", "Code": "C = [(a - b) for a, b in zip(A, B)]"}, {"ID": 4793617, "NL Utterance": "derive the week start for the given week number and year \u20182011, 4, 0\u2019", "Code": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')"}, {"ID": 5306079, "NL Utterance": "convert a list of strings `['1', '-1', '1']` to a list of numbers", "Code": "map(int, ['1', '-1', '1'])"}, {"ID": 18684397, "NL Utterance": "create datetime object from \"16sep2012\"", "Code": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')"}, {"ID": 5503925, "NL Utterance": "update fields in Django model `Book` with arguments in dictionary `d` where primary key is equal to `pk`", "Code": "Book.objects.filter(pk=pk).update(**d)"}, {"ID": 5503925, "NL Utterance": "update the fields in django model `Book` using dictionary `d`", "Code": "Book.objects.create(**d)"}, {"ID": 5229425, "NL Utterance": "print a digit `your_number` with exactly 2 digits after decimal", "Code": "print('{0:.2f}'.format(your_number))"}, {"ID": 13496087, "NL Utterance": "generate a 12-digit random number", "Code": "random.randint(100000000000, 999999999999)"}, {"ID": 13496087, "NL Utterance": "generate a random 12-digit number", "Code": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))"}, {"ID": 13496087, "NL Utterance": "generate a random 12-digit number", "Code": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))"}, {"ID": 13496087, "NL Utterance": "generate a 12-digit random number", "Code": "'%0.12d' % random.randint(0, 999999999999)"}, {"ID": 10996140, "NL Utterance": "remove specific elements in a numpy array `a`", "Code": "numpy.delete(a, index)"}, {"ID": 12987178, "NL Utterance": "sort list `trial_list` based on values of dictionary `trail_dict`", "Code": "sorted(trial_list, key=lambda x: trial_dict[x])"}, {"ID": 510357, "NL Utterance": "read a single character from stdin", "Code": "sys.stdin.read(1)"}, {"ID": 40094588, "NL Utterance": "get a list of characters in string `x` matching regex pattern `pattern`", "Code": "print(re.findall(pattern, x))"}, {"ID": 28780956, "NL Utterance": "get the context of a search by keyword 'My keywords' in beautifulsoup `soup`", "Code": "k = soup.find(text=re.compile('My keywords')).parent.text"}, {"ID": 19585280, "NL Utterance": "convert rows in pandas data frame `df` into list", "Code": "df.apply(lambda x: x.tolist(), axis=1)"}, {"ID": 12575421, "NL Utterance": "convert a 1d `A` array to a 2d array `B`", "Code": "B = np.reshape(A, (-1, 2))"}, {"ID": 30241279, "NL Utterance": "run app `app` on host '192.168.0.58' and port 9000 in Flask", "Code": "app.run(host='192.168.0.58', port=9000, debug=False)"}, {"ID": 15740236, "NL Utterance": "encode unicode string '\\xc5\\xc4\\xd6' to utf-8 code", "Code": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))"}, {"ID": 12440342, "NL Utterance": "get the first element of each tuple from a list of tuples `G`", "Code": "[x[0] for x in G]"}, {"ID": 39600161, "NL Utterance": "regular expression matching all but 'aa' and 'bb' for string `string`", "Code": "re.findall('-(?!aa-|bb-)([^-]+)', string)"}, {"ID": 39600161, "NL Utterance": "regular expression matching all but 'aa' and 'bb'", "Code": "re.findall('-(?!aa|bb)([^-]+)', string)"}, {"ID": 15158599, "NL Utterance": "remove false entries from a dictionary `hand`", "Code": "{k: v for k, v in list(hand.items()) if v}"}, {"ID": 15158599, "NL Utterance": "Get a dictionary from a dictionary `hand` where the values are present", "Code": "dict((k, v) for k, v in hand.items() if v)"}, {"ID": 2338531, "NL Utterance": "sort list `L` based on the value of variable 'resultType' for each object in list `L`", "Code": "sorted(L, key=operator.itemgetter('resultType'))"}, {"ID": 2338531, "NL Utterance": "sort a list of objects `s` by a member variable 'resultType'", "Code": "s.sort(key=operator.attrgetter('resultType'))"}, {"ID": 2338531, "NL Utterance": "sort a list of objects 'somelist' where the object has member number variable `resultType`", "Code": "somelist.sort(key=lambda x: x.resultType)"}, {"ID": 23668427, "NL Utterance": "join multiple dataframes `d1`, `d2`, and `d3` on column 'name'", "Code": "df1.merge(df2, on='name').merge(df3, on='name')"}, {"ID": 439115, "NL Utterance": "generate random Decimal", "Code": "decimal.Decimal(random.randrange(10000)) / 100"}, {"ID": 3207219, "NL Utterance": "list all files of a directory `mypath`", "Code": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]"}, {"ID": 3207219, "NL Utterance": "list all files of a directory `mypath`", "Code": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break"}, {"ID": 3207219, "NL Utterance": "list all \".txt\" files of a directory \"/home/adam/\"", "Code": "print(glob.glob('/home/adam/*.txt'))"}, {"ID": 3207219, "NL Utterance": "list all files of a directory \"somedirectory\"", "Code": "os.listdir('somedirectory')"}, {"ID": 8134602, "NL Utterance": "execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`", "Code": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)"}, {"ID": 24958010, "NL Utterance": "get keys with same value in dictionary `d`", "Code": "print([key for key in d if d[key] == 1])"}, {"ID": 24958010, "NL Utterance": "get keys with same value in dictionary `d`", "Code": "print([key for key, value in d.items() if value == 1])"}, {"ID": 24958010, "NL Utterance": "Get keys from a dictionary 'd' where the value is '1'.", "Code": "print([key for key, value in list(d.items()) if value == 1])"}, {"ID": 6376886, "NL Utterance": "create list of 'size' empty strings", "Code": "strs = ['' for x in range(size)]"}, {"ID": 4135344, "NL Utterance": "generate pdf file `output_filename` from markdown file `input_filename`", "Code": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)"}, {"ID": 9427163, "NL Utterance": "remove duplicate dict in list `l`", "Code": "[dict(t) for t in set([tuple(d.items()) for d in l])]"}, {"ID": 29311354, "NL Utterance": "Set time zone `Europe/Istanbul` in Django", "Code": "TIME_ZONE = 'Europe/Istanbul'"}, {"ID": 26367812, "NL Utterance": "append `date` to list value of `key` in dictionary `dates_dict`, or create key `key` with value `date` in a list if it does not exist", "Code": "dates_dict.setdefault(key, []).append(date)"}, {"ID": 1908741, "NL Utterance": "Group the values from django model `Article` with group by value `pub_date` and annotate by `title`", "Code": "Article.objects.values('pub_date').annotate(article_count=Count('title'))"}, {"ID": 15839491, "NL Utterance": "clear Tkinter Canvas `canvas`", "Code": "canvas.delete('all')"}, {"ID": 39816795, "NL Utterance": "Initialize a pandas series object `s` with columns `['A', 'B', 'A1R', 'B2', 'AABB4']`", "Code": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])"}, {"ID": 969285, "NL Utterance": "None", "Code": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')"}, {"ID": 12814667, "NL Utterance": "sort list `a` using the first dimension of the element as the key to list `b`", "Code": "a.sort(key=lambda x: b.index(x[0]))"}, {"ID": 12814667, "NL Utterance": null, "Code": "a.sort(key=lambda x_y: b.index(x_y[0]))"}, {"ID": 39870642, "NL Utterance": "Save plot `plt` as png file 'filename.png'", "Code": "plt.savefig('filename.png')"}, {"ID": 39870642, "NL Utterance": "Save matplotlib graph to image file `filename.png` at a resolution of `300 dpi`", "Code": "plt.savefig('filename.png', dpi=300)"}, {"ID": 748028, "NL Utterance": "get output from process `p1`", "Code": "p1.communicate()[0]"}, {"ID": 748028, "NL Utterance": null, "Code": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]"}, {"ID": 8936030, "NL Utterance": "searche in HTML string for elements that have text 'Python'", "Code": "soup.body.findAll(text='Python')"}, {"ID": 8936030, "NL Utterance": "BeautifulSoup find string 'Python Jobs' in HTML body `body`", "Code": "soup.body.findAll(text='Python Jobs')"}, {"ID": 15795525, "NL Utterance": "Sort items in dictionary `d`  using the first part of the key after splitting the key", "Code": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))"}, {"ID": 11348347, "NL Utterance": "create a set that is the exclusive or of [1, 2, 3] and [3, 4, 5]", "Code": "set([1, 2, 3]) ^ set([3, 4, 5])"}, {"ID": 5430470, "NL Utterance": "Get a list values of a dictionary item `pass_id` from post requests in django", "Code": "request.POST.getlist('pass_id')"}, {"ID": 11114358, "NL Utterance": "Filter duplicate entries w.r.t. value in 'id' from a list of dictionaries 'L'", "Code": "list(dict((x['id'], x) for x in L).values())"}, {"ID": 13078751, "NL Utterance": "Get pandas GroupBy object with sum over the rows with same column names within  dataframe `df`", "Code": "df.groupby(df.columns, axis=1).sum()"}, {"ID": 18789262, "NL Utterance": "convert the zip of range `(1, 5)` and range `(7, 11)` into a dictionary", "Code": "dict(zip(list(range(1, 5)), list(range(7, 11))))"}, {"ID": 8218032, "NL Utterance": "Get all indexes of boolean numpy array where boolean value `mask` is True", "Code": "numpy.where(mask)"}, {"ID": 319426, "NL Utterance": "case insensitive comparison of strings `string1` and `string2`", "Code": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"}, {"ID": 319426, "NL Utterance": "case insensitive string comparison between `string1` and `string2`", "Code": "if (string1.lower() == string2.lower()):\n    pass"}, {"ID": 319426, "NL Utterance": "case insensitive string comparison between `string1` and `string2`", "Code": "(string1.lower() == string2.lower())"}, {"ID": 319426, "NL Utterance": "case insensitive string comparison between `first` and `second`", "Code": "(first.lower() == second.lower())"}, {"ID": 319426, "NL Utterance": "case insensitive comparison between strings `first` and `second`", "Code": "(first.upper() == second.upper())"}, {"ID": 5744980, "NL Utterance": "Taking the results of a bash command \"awk '{print $10, $11}' test.txt > test2.txt\"", "Code": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")"}, {"ID": 11303225, "NL Utterance": "remove multiple values from a list `my_list` at the same time with index starting at `2` and ending just before `6`.", "Code": "del my_list[2:6]"}, {"ID": 10716796, "NL Utterance": "convert a string `s` to its base-10 representation", "Code": "int(s.encode('hex'), 16)"}, {"ID": 9618050, "NL Utterance": "match regex pattern 'TAA(?:[ATGC]{3})+?TAA' on string `seq`", "Code": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)"}, {"ID": 17457793, "NL Utterance": "sort a set `s` by numerical value", "Code": "sorted(s, key=float)"}, {"ID": 2269827, "NL Utterance": "convert an int 65 to hex string", "Code": "hex(65)"}, {"ID": 20400135, "NL Utterance": "append a pandas series `b` to the series `a` and get a continuous index", "Code": "a.append(b).reset_index(drop=True)"}, {"ID": 20400135, "NL Utterance": "simple way to append a pandas series `a` and `b` with same index", "Code": "pd.concat([a, b], ignore_index=True)"}, {"ID": 329886, "NL Utterance": "Get a list of tuples with multiple iterators using list comprehension", "Code": "[(i, j) for i in range(1, 3) for j in range(1, 5)]"}, {"ID": 9849192, "NL Utterance": "reverse sort items in dictionary `mydict` by value", "Code": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)"}, {"ID": 27218543, "NL Utterance": "select the last business day of the month for each month in 2014 in pandas", "Code": "pd.date_range('1/1/2014', periods=12, freq='BM')"}, {"ID": 15445981, "NL Utterance": "disable the certificate check in https requests for url `https://kennethreitz.com`", "Code": "requests.get('https://kennethreitz.com', verify=False)"}, {"ID": 11414596, "NL Utterance": "return dataframe `df` with last row dropped", "Code": "df.ix[:-1]"}, {"ID": 3437059, "NL Utterance": "check if \"blah\" is in string `somestring`", "Code": "if ('blah' not in somestring):\n    pass"}, {"ID": 3437059, "NL Utterance": "check if string `needle` is in `haystack`", "Code": "if (needle in haystack):\n    pass"}, {"ID": 3437059, "NL Utterance": "check if string \"substring\" is in string", "Code": "string.find('substring')"}, {"ID": 3437059, "NL Utterance": "check if string `s` contains \"is\"", "Code": "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")"}, {"ID": 36542169, "NL Utterance": "extract first and last row of a dataframe `df`", "Code": "pd.concat([df.head(1), df.tail(1)])"}, {"ID": 23351183, "NL Utterance": "filter a Django model `MyModel` to have charfield length of max `255`", "Code": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])"}, {"ID": 23351183, "NL Utterance": "Filter queryset for all objects in Django model `MyModel` where texts length are greater than `254`", "Code": "MyModel.objects.filter(text__regex='^.{254}.*')"}, {"ID": 28199524, "NL Utterance": "count the number of rows with missing values in a pandas dataframe `df`", "Code": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)"}, {"ID": 3728017, "NL Utterance": null, "Code": "sorted(enumerate(a), key=lambda x: x[1])"}, {"ID": 15457504, "NL Utterance": "set the font 'Purisa' of size 12 for a canvas' text item `k`", "Code": "canvas.create_text(x, y, font=('Purisa', 12), text=k)"}, {"ID": 4879641, "NL Utterance": "create a list containing all values associated with key 'baz' in dictionaries of list `foos` using list comprehension", "Code": "[y['baz'] for x in foos for y in x['bar']]"}, {"ID": 32743479, "NL Utterance": "read pandas data frame csv `comma.csv` with extra commas in column specifying string delimiter `'`", "Code": "df = pd.read_csv('comma.csv', quotechar=\"'\")"}, {"ID": 36296993, "NL Utterance": "replace string 'in.' with ' in. ' in dataframe `df` column 'a'", "Code": "df['a'] = df['a'].str.replace('in.', ' in. ')"}, {"ID": 7270321, "NL Utterance": "Get all indexes of a list `a` where each value is greater than `2`", "Code": "[i for i in range(len(a)) if a[i] > 2]"}, {"ID": 843277, "NL Utterance": "check if a local variable `myVar` exists", "Code": "('myVar' in locals())"}, {"ID": 843277, "NL Utterance": "check if a global variable `myVar` exists", "Code": "('myVar' in globals())"}, {"ID": 843277, "NL Utterance": "check if object `obj` has attribute 'attr_name'", "Code": "hasattr(obj, 'attr_name')"}, {"ID": 843277, "NL Utterance": "check if a local variable 'myVar' exists", "Code": "if ('myVar' in locals()):\n    pass"}, {"ID": 843277, "NL Utterance": "check if a global variable 'myVar' exists", "Code": "if ('myVar' in globals()):\n    pass"}, {"ID": 6243460, "NL Utterance": "lambda function that adds two operands", "Code": "lambda x, y: x + y"}, {"ID": 5384570, "NL Utterance": "count the number of items in a generator/iterator `it`", "Code": "sum(1 for i in it)"}, {"ID": 18990069, "NL Utterance": "get tuples of the corresponding elements from lists `lst` and `lst2`", "Code": "[(x, lst2[i]) for i, x in enumerate(lst)]"}, {"ID": 18990069, "NL Utterance": "create tuples containing elements that are at the same index of list `lst` and list `lst2`", "Code": "[(i, j) for i, j in zip(lst, lst2)]"}, {"ID": 18990069, "NL Utterance": "get tuples from lists `lst` and `lst2` using list comprehension in python 2", "Code": "[(lst[i], lst2[i]) for i in range(len(lst))]"}, {"ID": 4296249, "NL Utterance": "convert hex triplet string `rgbstr` to rgb tuple", "Code": "struct.unpack('BBB', rgbstr.decode('hex'))"}, {"ID": 10406130, "NL Utterance": "Check if 3 is not in a list [2, 3, 4]", "Code": "(3 not in [2, 3, 4])"}, {"ID": 10406130, "NL Utterance": "Check if tuple (2, 3) is not in a list [(2, 3), (5, 6), (9, 1)]", "Code": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])"}, {"ID": 10406130, "NL Utterance": "Check if tuple (2, 3) is not in a list [(2, 7), (7, 3), \"hi\"]", "Code": "((2, 3) not in [(2, 7), (7, 3), 'hi'])"}, {"ID": 10406130, "NL Utterance": "Check if 3 is not in the list [4,5,6]", "Code": "(3 not in [4, 5, 6])"}, {"ID": 35797523, "NL Utterance": "create a list by appending components from list `a` and reversed list `b` interchangeably", "Code": "[value for pair in zip(a, b[::-1]) for value in pair]"}, {"ID": 6710684, "NL Utterance": "delete the last column of numpy array `a` and assign resulting array to `b`", "Code": "b = np.delete(a, -1, 1)"}, {"ID": 15271907, "NL Utterance": "commit all the changes after executing a query.", "Code": "dbb.commit()"}, {"ID": 40221516, "NL Utterance": "join two dataframes based on values in selected columns", "Code": "pd.merge(a, b, on=['A', 'B'], how='outer')"}, {"ID": 24659239, "NL Utterance": "set text color as `red` and background color as `#A3C1DA` in qpushbutton", "Code": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')"}, {"ID": 9039961, "NL Utterance": "find the mean of elements in list `l`", "Code": "sum(l) / float(len(l))"}, {"ID": 3252590, "NL Utterance": "Find all the items from a dictionary `D` if the key contains the string `Light`", "Code": "[(k, v) for k, v in D.items() if 'Light' in k]"}, {"ID": 4508155, "NL Utterance": "Get a md5 hash from string `thecakeisalie`", "Code": "k = hashlib.md5('thecakeisalie').hexdigest()"}, {"ID": 3925096, "NL Utterance": null, "Code": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))"}, {"ID": 2040038, "NL Utterance": "sort datetime objects `birthdays` by `month` and `day`", "Code": "birthdays.sort(key=lambda d: (d.month, d.day))"}, {"ID": 8139797, "NL Utterance": "extract table data from table `rows` using beautifulsoup", "Code": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]"}, {"ID": 18723580, "NL Utterance": "strip the string `.txt` from anywhere in the string `Boat.txt.txt`", "Code": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')"}, {"ID": 26640145, "NL Utterance": "get a list of the row names from index of a pandas data frame", "Code": "list(df.index)"}, {"ID": 26640145, "NL Utterance": "get the row names from index in a pandas data frame", "Code": "df.index"}, {"ID": 13902805, "NL Utterance": "create a list of all unique characters in string 'aaabcabccd'", "Code": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))"}, {"ID": 13902805, "NL Utterance": "get list of all unique characters in a string 'aaabcabccd'", "Code": "list(set('aaabcabccd'))"}, {"ID": 13902805, "NL Utterance": null, "Code": "\"\"\"\"\"\".join(set('aaabcabccd'))"}, {"ID": 39187788, "NL Utterance": "find rows with non zero values in a subset of columns where `df.dtypes` is not equal to `object` in pandas dataframe", "Code": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]"}, {"ID": 1299855, "NL Utterance": null, "Code": "br.form.add_file(open(filename), 'text/plain', filename)"}, {"ID": 7128153, "NL Utterance": "check if  dictionary `d` contains all keys in list `['somekey', 'someotherkey', 'somekeyggg']`", "Code": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])"}, {"ID": 11269575, "NL Utterance": "hide output of subprocess `['espeak', text]`", "Code": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)"}, {"ID": 27905295, "NL Utterance": "replace nans by preceding values in pandas dataframe `df`", "Code": "df.fillna(method='ffill', inplace=True)"}, {"ID": 31143732, "NL Utterance": "create 4 numbers in range between 1 and 3", "Code": "print(np.linspace(1, 3, num=4, endpoint=False))"}, {"ID": 31143732, "NL Utterance": "Create numpy array of `5` numbers starting from `1` with interval of `3`", "Code": "print(np.linspace(1, 3, num=5))"}, {"ID": 1447575, "NL Utterance": "create a symlink directory `D:\\\\testdirLink` for directory `D:\\\\testdir` with unicode support using ctypes library", "Code": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)"}, {"ID": 17277100, "NL Utterance": "get a list `slice` of array slices of the first two rows and columns from array `arr`", "Code": "slice = [arr[i][0:2] for i in range(0, 2)]"}, {"ID": 23823206, "NL Utterance": "upload uploaded file from path '/upload' to Google cloud storage 'my_bucket' bucket", "Code": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')"}, {"ID": 509742, "NL Utterance": "change directory to the directory of a python script", "Code": "os.chdir(os.path.dirname(__file__))"}, {"ID": 817087, "NL Utterance": "call a function with argument list `args`", "Code": "func(*args)"}, {"ID": 14745022, "NL Utterance": "split column 'AB' in dataframe `df` into two columns by first whitespace ' '", "Code": "df['AB'].str.split(' ', 1, expand=True)"}, {"ID": 14745022, "NL Utterance": "pandas dataframe, how do i split a column 'AB' into two 'A' and 'B' on delimiter ' '", "Code": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str"}, {"ID": 2587402, "NL Utterance": "sort list `xs` based on the length of its elements", "Code": "print(sorted(xs, key=len))"}, {"ID": 2587402, "NL Utterance": "sort list `xs` in ascending order of length of elements", "Code": "xs.sort(lambda x, y: cmp(len(x), len(y)))"}, {"ID": 2587402, "NL Utterance": "sort list of strings `xs` by the length of string", "Code": "xs.sort(key=lambda s: len(s))"}, {"ID": 19939084, "NL Utterance": "plot point marker '.' on series `ts`", "Code": "ts.plot(marker='.')"}, {"ID": 14931769, "NL Utterance": "get all combination of n binary values", "Code": "lst = list(itertools.product([0, 1], repeat=n))"}, {"ID": 14931769, "NL Utterance": "get all combination of n binary values", "Code": "lst = map(list, itertools.product([0, 1], repeat=n))"}, {"ID": 14931769, "NL Utterance": "get all combination of 3 binary values", "Code": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"}, {"ID": 14931769, "NL Utterance": "get all combination of 3 binary values", "Code": "lst = list(itertools.product([0, 1], repeat=3))"}, {"ID": 20025882, "NL Utterance": "append string 'str' at the beginning of each value in column 'col' of dataframe `df`", "Code": "df['col'] = 'str' + df['col'].astype(str)"}, {"ID": 2553354, "NL Utterance": "get a dict of variable names `['some', 'list', 'of', 'vars']` as a string and their values", "Code": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])"}, {"ID": 42387471, "NL Utterance": "add a colorbar to plot `plt` using image `im` on axes `ax`", "Code": "plt.colorbar(im, ax=ax)"}, {"ID": 16734590, "NL Utterance": "convert nested list 'Cards' into a flat list", "Code": "[a for c in Cards for b in c for a in b]"}, {"ID": 575819, "NL Utterance": "create a list containing keys of dictionary `d` and sort it alphabetically", "Code": "sorted(d, key=d.get)"}, {"ID": 29422691, "NL Utterance": "print the number of occurences of not `none` in a list `lst` in Python 2", "Code": "print(len([x for x in lst if x is not None]))"}, {"ID": 19745091, "NL Utterance": "lookup dictionary key `key1` in Django template `json`", "Code": "{{json.key1}}"}, {"ID": 12897374, "NL Utterance": "remove duplicates from list `myset`", "Code": "mynewlist = list(myset)"}, {"ID": 12897374, "NL Utterance": "get unique values from the list `['a', 'b', 'c', 'd']`", "Code": "set(['a', 'b', 'c', 'd'])"}, {"ID": 15571267, "NL Utterance": "set size of `figure` to landscape A4 i.e. `11.69, 8.27` inches", "Code": "figure(figsize=(11.69, 8.27))"}, {"ID": 7253803, "NL Utterance": "get every thing after last `/`", "Code": "url.rsplit('/', 1)"}, {"ID": 7253803, "NL Utterance": "get everything after last slash in a url stored in variable 'url'", "Code": "url.rsplit('/', 1)[-1]"}, {"ID": 13223737, "NL Utterance": "open file '5_1.txt' in directory `direct`", "Code": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')"}, {"ID": 5501641, "NL Utterance": "create a list with the characters of a string `5+6`", "Code": "list('5+6')"}, {"ID": 33711985, "NL Utterance": "concatenate a list of numpy arrays `input_list` together into a flattened list of values", "Code": "np.concatenate(input_list).ravel().tolist()"}, {"ID": 11351874, "NL Utterance": "convert dictionary `dict` into a flat list", "Code": "print([y for x in list(dict.items()) for y in x])"}, {"ID": 11351874, "NL Utterance": "Convert a dictionary `dict` into a list with key and values as list items.", "Code": "[y for x in list(dict.items()) for y in x]"}, {"ID": 962619, "NL Utterance": "get a random record from model 'MyModel' using django's orm", "Code": "MyModel.objects.order_by('?').first()"}, {"ID": 20796355, "NL Utterance": "change current working directory to directory 'chapter3'", "Code": "os.chdir('chapter3')"}, {"ID": 20796355, "NL Utterance": "change current working directory", "Code": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')"}, {"ID": 20796355, "NL Utterance": "change current working directory", "Code": "os.chdir('.\\\\chapter3')"}, {"ID": 974678, "NL Utterance": "create a flat dictionary by summing values associated with similar keys in each dictionary of list `dictlist`", "Code": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])"}, {"ID": 17618981, "NL Utterance": "sort pandas data frame `df` using values from columns `c1` and `c2` in ascending order", "Code": "df.sort(['c1', 'c2'], ascending=[True, True])"}, {"ID": 4004550, "NL Utterance": "Converting string lists `s` to float list", "Code": "floats = [float(x) for x in s.split()]"}, {"ID": 4004550, "NL Utterance": "Converting string lists `s` to float list", "Code": "floats = map(float, s.split())"}, {"ID": 10839719, "NL Utterance": "set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`", "Code": "plt.xticks([1, 2, 3, 4, 5])"}, {"ID": 1450393, "NL Utterance": "read line by line from stdin", "Code": "for line in fileinput.input():\n    pass"}, {"ID": 1450393, "NL Utterance": "read line by line from stdin", "Code": "for line in sys.stdin:\n    pass"}, {"ID": 8214932, "NL Utterance": "check if string `one` exists in the values of dictionary `d`", "Code": "'one' in list(d.values())"}, {"ID": 8214932, "NL Utterance": "Check if value 'one' is among the values of dictionary `d`", "Code": "'one' in iter(d.values())"}, {"ID": 12557612, "NL Utterance": "call parent class `Instructor` of child class constructor", "Code": "super(Instructor, self).__init__(name, year)"}, {"ID": 15183084, "NL Utterance": "create a dictionary using two lists`x` and `y`", "Code": "dict(zip(x, y))"}, {"ID": 10915391, "NL Utterance": "sort a list of dictionaries `a` by dictionary values in descending order", "Code": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)"}, {"ID": 10915391, "NL Utterance": "sorting a list of dictionary `a` by values in descending order", "Code": "sorted(a, key=dict.values, reverse=True)"}, {"ID": 39159475, "NL Utterance": "Use multiple groupby and agg operations `sum`, `count`, `std` for pandas data frame `df`", "Code": "df.groupby(level=0).agg(['sum', 'count', 'std'])"}, {"ID": 20585920, "NL Utterance": "for a dictionary `a`, set default value for key `somekey` as list and append value `bob`  in that key", "Code": "a.setdefault('somekey', []).append('bob')"}, {"ID": 11692613, "NL Utterance": "sum values in list of dictionaries `example_list` with key 'gold'", "Code": "sum(item['gold'] for item in example_list)"}, {"ID": 11692613, "NL Utterance": "get a sum of all values from key `gold` in a list of dictionary `example_list`", "Code": "sum([item['gold'] for item in example_list])"}, {"ID": 11692613, "NL Utterance": "Get all the values in key `gold` summed from a list of dictionary `myLIst`", "Code": "sum(item['gold'] for item in myLIst)"}, {"ID": 2918362, "NL Utterance": "writing string 'text to write\\n' to file `f`", "Code": "f.write('text to write\\n')"}, {"ID": 2918362, "NL Utterance": "Write a string `My String` to a file `file` including new line character", "Code": "file.write('My String\\n')"}, {"ID": 14358567, "NL Utterance": "find consecutive segments from a column 'A' in a pandas data frame 'df'", "Code": "df.reset_index().groupby('A')['index'].apply(np.array)"}, {"ID": 1270951, "NL Utterance": "get a relative path of file 'my_file' into variable `fn`", "Code": "fn = os.path.join(os.path.dirname(__file__), 'my_file')"}, {"ID": 59825, "NL Utterance": "retrieve an element from a set `s` without removing it", "Code": "e = next(iter(s))"}, {"ID": 5486725, "NL Utterance": "execute a command in the command prompt to list directory contents of the c drive `c:\\\\'", "Code": "os.system('dir c:\\\\')"}, {"ID": 5218948, "NL Utterance": "Make a auto scrolled window to the end of the list in gtk", "Code": "self.treeview.connect('size-allocate', self.treeview_changed)"}, {"ID": 9542738, "NL Utterance": "check if 3 is inside list `[1, 2, 3]`", "Code": "3 in [1, 2, 3]"}, {"ID": 10541640, "NL Utterance": "Represent DateTime object '10/05/2012' with format '%d/%m/%Y' into format '%Y-%m-%d'", "Code": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')"}, {"ID": 7262828, "NL Utterance": "convert a string literal `s` with values `\\\\` to raw string literal", "Code": "s = s.replace('\\\\', '\\\\\\\\')"}, {"ID": 6086047, "NL Utterance": "get output of script `proc`", "Code": "print(proc.communicate()[0])"}, {"ID": 41946927, "NL Utterance": "create a pandas data frame from list of nested dictionaries `my_list`", "Code": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T"}, {"ID": 21164910, "NL Utterance": "delete all columns in  DataFrame `df` that do not hold a non-zero value in its records", "Code": "df.loc[:, ((df != 0).any(axis=0))]"}, {"ID": 20183069, "NL Utterance": "sort a multidimensional array `a` by column with index 1", "Code": "sorted(a, key=lambda x: x[1])"}, {"ID": 9905471, "NL Utterance": "split string `s` to list conversion by ','", "Code": "[x.strip() for x in s.split(',')]"}, {"ID": 9089043, "NL Utterance": "Get a list of items in the list `container` with attribute equal to `value`", "Code": "items = [item for item in container if item.attribute == value]"}, {"ID": 3820312, "NL Utterance": "create a file 'filename' with each tuple in the list `mylist` written to a line", "Code": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))"}, {"ID": 17407691, "NL Utterance": "Get multiple matched strings using regex pattern `(?:review: )?(http://url.com/(\\\\d+))\\\\s?`", "Code": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)"}, {"ID": 8369219, "NL Utterance": "read a text file 'very_Important.txt' into a string variable `str`", "Code": "str = open('very_Important.txt', 'r').read()"}, {"ID": 33680914, "NL Utterance": "Return values for column `C` after group by on column `A` and `B` in dataframe `df`", "Code": "df.groupby(['A', 'B'])['C'].unique()"}, {"ID": 3277503, "NL Utterance": "read file `fname` line by line into a list `content`", "Code": "with open(fname) as f:\n    content = f.readlines()"}, {"ID": 3277503, "NL Utterance": "read file 'filename' line by line into a list `lines`", "Code": "with open('filename') as f:\n    lines = f.readlines()"}, {"ID": 3277503, "NL Utterance": "read file 'filename' line by line into a list `lines`", "Code": "lines = [line.rstrip('\\n') for line in open('filename')]"}, {"ID": 3277503, "NL Utterance": "read file \"file.txt\" line by line into a list `array`", "Code": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)"}, {"ID": 17134716, "NL Utterance": "convert the dataframe column 'col' from string types to datetime types", "Code": "df['col'] = pd.to_datetime(df['col'])"}, {"ID": 41251391, "NL Utterance": "get a list of the keys in each dictionary in a dictionary of dictionaries `foo`", "Code": "[k for d in list(foo.values()) for k in d]"}, {"ID": 7173850, "NL Utterance": "get user input using message 'Enter name here: ' and insert it to the first placeholder in string 'Hello, {0}, how do you do?'", "Code": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))"}, {"ID": 41386443, "NL Utterance": "create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`", "Code": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])"}, {"ID": 34962104, "NL Utterance": null, "Code": "df['a'] = df['a'].apply(lambda x: x + 1)"}, {"ID": 30015665, "NL Utterance": "get the platform OS name", "Code": "platform.system()"}, {"ID": 17474211, "NL Utterance": "sort list `a` in ascending order based on its elements' float values", "Code": "a = sorted(a, key=lambda x: float(x))"}, {"ID": 6633678, "NL Utterance": "finding words in string `s` after keyword 'name'", "Code": "re.search('name (.*)', s)"}, {"ID": 12345387, "NL Utterance": "Find all records from collection `collection` without extracting mongo id `_id`", "Code": "db.collection.find({}, {'_id': False})"}, {"ID": 903853, "NL Utterance": "Get all the second values from a list of lists `A`", "Code": "[row[1] for row in A]"}, {"ID": 903853, "NL Utterance": "extract first column from a multi-dimensional array `a`", "Code": "[row[0] for row in a]"}, {"ID": 9758959, "NL Utterance": "sort list `['10', '3', '2']` in ascending order based on the integer value of its elements", "Code": "sorted(['10', '3', '2'], key=int)"}, {"ID": 3328012, "NL Utterance": "check if file `filename` is descendant of directory '/the/dir/'", "Code": "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'"}, {"ID": 8122079, "NL Utterance": "check if any element of list `substring_list` are in string `string`", "Code": "any(substring in string for substring in substring_list)"}, {"ID": 19961490, "NL Utterance": "construct pandas dataframe from a list of tuples", "Code": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])"}, {"ID": 27589325, "NL Utterance": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'", "Code": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)"}, {"ID": 27589325, "NL Utterance": "find and replace 2nd occurrence of word 'cat' by 'Bull' in a sentence 's'", "Code": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)"}, {"ID": 4287209, "NL Utterance": "sort list of strings in list `the_list` by integer suffix", "Code": "sorted(the_list, key=lambda k: int(k.split('_')[1]))"}, {"ID": 4287209, "NL Utterance": "sort list of strings `the_list` by integer suffix before \"_\"", "Code": "sorted(the_list, key=lambda x: int(x.split('_')[1]))"}, {"ID": 27659153, "NL Utterance": "make a list of lists in which each list `g` are the elements from list `test` which have the same characters up to the first `_` character", "Code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]"}, {"ID": 27659153, "NL Utterance": null, "Code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]"}, {"ID": 4618373, "NL Utterance": "Load the url `http://www.google.com` in selenium webdriver `driver`", "Code": "driver.get('http://www.google.com')"}, {"ID": 14043080, "NL Utterance": "using python's datetime module, get the year that utc-11 is currently in", "Code": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year"}, {"ID": 33435418, "NL Utterance": "Get the difference between two lists `[1, 2, 2, 2, 3]` and `[1, 2]` that may have duplicate values", "Code": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])"}, {"ID": 3662142, "NL Utterance": "remove tags from a string `mystring`", "Code": "re.sub('<[^>]*>', '', mystring)"}, {"ID": 200738, "NL Utterance": "encode string `data` as `hex`", "Code": "data.encode('hex')"}, {"ID": 10040143, "NL Utterance": "filter `Users` by field `userprofile` with level greater than or equal to `0`", "Code": "User.objects.filter(userprofile__level__gte=0)"}, {"ID": 11924135, "NL Utterance": "BeautifulSoup find a tag whose id ends with string 'para'", "Code": "soup.findAll(id=re.compile('para$'))"}, {"ID": 11924135, "NL Utterance": "select `div` tags whose `id`s begin with `value_xxx_c_1_f_8_a_`", "Code": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')"}, {"ID": 4915920, "NL Utterance": "delete an item `thing` in a list `some_list` if it exists", "Code": "cleaned_list = [x for x in some_list if x is not thing]"}, {"ID": 70797, "NL Utterance": "print \"Please enter something: \" to console, and read user input to `var`", "Code": "var = input('Please enter something: ')"}, {"ID": 4641765, "NL Utterance": "append 4 to list `foo`", "Code": "foo.append(4)"}, {"ID": 4641765, "NL Utterance": "append a list [8, 7] to list `foo`", "Code": "foo.append([8, 7])"}, {"ID": 4641765, "NL Utterance": "insert 77 to index 2 of list `x`", "Code": "x.insert(2, 77)"}, {"ID": 11837979, "NL Utterance": "remove white space padding around a saved image `test.png` in matplotlib", "Code": "plt.savefig('test.png', bbox_inches='tight')"}, {"ID": 1720421, "NL Utterance": "concatenate lists `listone` and `listtwo`", "Code": "(listone + listtwo)"}, {"ID": 1720421, "NL Utterance": "iterate items in lists `listone` and `listtwo`", "Code": "for item in itertools.chain(listone, listtwo):\n    pass"}, {"ID": 22086116, "NL Utterance": "create dataframe `males` containing data of dataframe `df` where column `Gender` is equal to 'Male' and column `Year` is equal to 2014", "Code": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]"}, {"ID": 19095796, "NL Utterance": "print backslash", "Code": "print('\\\\')"}, {"ID": 17097236, "NL Utterance": "replace '-' in pandas dataframe `df` with `np.nan`", "Code": "df.replace('-', np.nan)"}, {"ID": 13411544, "NL Utterance": "delete column 'column_name' from dataframe `df`", "Code": "df = df.drop('column_name', 1)"}, {"ID": 13411544, "NL Utterance": "delete 1st, 2nd and 4th columns from dataframe `df`", "Code": "df.drop(df.columns[[0, 1, 3]], axis=1)"}, {"ID": 13411544, "NL Utterance": "delete a column `column_name` without having to reassign from pandas data frame `df`", "Code": "df.drop('column_name', axis=1, inplace=True)"}, {"ID": 10750802, "NL Utterance": "disable abbreviation in argparse", "Code": "parser = argparse.ArgumentParser(allow_abbrev=False)"}, {"ID": 35711059, "NL Utterance": "extract dictionary values by key 'Feature3' from data frame `df`", "Code": "feature3 = [d.get('Feature3') for d in df.dic]"}, {"ID": 14734533, "NL Utterance": "get data of column 'A' and column 'B' in dataframe `df` where column 'A' is equal to 'foo'", "Code": "df.loc[gb.groups['foo'], ('A', 'B')]"}, {"ID": 517355, "NL Utterance": "print '[1, 2, 3]'", "Code": "print('[%s, %s, %s]' % (1, 2, 3))"}, {"ID": 517355, "NL Utterance": "Display `1 2 3` as a list of string", "Code": "print('[{0}, {1}, {2}]'.format(1, 2, 3))"}, {"ID": 17106819, "NL Utterance": "get values from a dictionary `my_dict` whose key contains the string `Date`", "Code": "[v for k, v in list(my_dict.items()) if 'Date' in k]"}, {"ID": 18724607, "NL Utterance": null, "Code": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)"}, {"ID": 22397058, "NL Utterance": "drop a single subcolumn 'a' in column 'col1' from a dataframe `df`", "Code": "df.drop(('col1', 'a'), axis=1)"}, {"ID": 22397058, "NL Utterance": "dropping all columns named 'a' from a multiindex 'df', across all level.", "Code": "df.drop('a', level=1, axis=1)"}, {"ID": 19121722, "NL Utterance": "build dictionary with keys of dictionary `_container` as keys and values of returned value of function `_value` with correlating key as parameter", "Code": "{_key: _value(_key) for _key in _container}"}, {"ID": 34527388, "NL Utterance": "click on the text button 'section-select-all' using selenium python", "Code": "browser.find_element_by_class_name('section-select-all').click()"}, {"ID": 17604837, "NL Utterance": "combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`", "Code": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)"}, {"ID": 16735786, "NL Utterance": "generate unique equal hash for equal dictionaries `a` and `b`", "Code": "hash(pformat(a)) == hash(pformat(b))"}, {"ID": 18938276, "NL Utterance": "convert nested list of lists `[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]` into a list of tuples", "Code": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))"}, {"ID": 17166601, "NL Utterance": "sum the column `positions` along the  other columns `stock`, `same1`, `same2` in a pandas data frame `df`", "Code": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()"}, {"ID": 17166601, "NL Utterance": null, "Code": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()"}, {"ID": 9257094, "NL Utterance": "change string `s` to upper case", "Code": "s.upper()"}, {"ID": 186857, "NL Utterance": "split a string `s` by ';' and convert to a dictionary", "Code": "dict(item.split('=') for item in s.split(';'))"}, {"ID": 15459217, "NL Utterance": "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`", "Code": "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}, {"ID": 38147447, "NL Utterance": "set data in column 'value' of dataframe `df` equal to first element of each list", "Code": "df['value'] = df['value'].str[0]"}, {"ID": 38147447, "NL Utterance": "get element at index 0 of each list in column 'value' of dataframe `df`", "Code": "df['value'] = df['value'].str.get(0)"}, {"ID": 38147447, "NL Utterance": "remove square bracket '[]' from pandas dataframe `df` column 'value'", "Code": "df['value'] = df['value'].str.strip('[]')"}, {"ID": 17462994, "NL Utterance": "Get a string with string formatting from dictionary `d`", "Code": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])"}, {"ID": 15465204, "NL Utterance": "Sum of sums of each list, in a list of lists named 'lists'.", "Code": "sum(sum(x) for x in lists)"}, {"ID": 14766194, "NL Utterance": "Check whether a numpy array `a` contains a given row `[1, 2]`", "Code": "any(np.equal(a, [1, 2]).all(1))"}, {"ID": 22240602, "NL Utterance": "check if all elements in list `mylist` are the same", "Code": "len(set(mylist)) == 1"}, {"ID": 21205074, "NL Utterance": "split a string `s` at line breaks `\\r\\n`", "Code": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]"}, {"ID": 20230211, "NL Utterance": "sort a dictionary `a` by values that are list type", "Code": "t = sorted(list(a.items()), key=lambda x: x[1])"}, {"ID": 4940032, "NL Utterance": "Search for string 'blabla' in txt file 'example.txt'", "Code": "if ('blabla' in open('example.txt').read()):\n    pass"}, {"ID": 4940032, "NL Utterance": "Search for string 'blabla' in txt file 'example.txt'", "Code": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass"}, {"ID": 4940032, "NL Utterance": "Search for string `blabla` in txt file 'example.txt'", "Code": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False"}, {"ID": 14431731, "NL Utterance": "insert string `string1` after each character of `string2`", "Code": "string2.replace('', string1)[len(string1):-len(string1)]"}, {"ID": 5106228, "NL Utterance": "getting every possible combination of two elements in a list", "Code": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))"}, {"ID": 15390374, "NL Utterance": "get a utf-8 string literal representation of byte string `x`", "Code": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')"}, {"ID": 3501382, "NL Utterance": "check if `x` is an integer", "Code": "isinstance(x, int)"}, {"ID": 3501382, "NL Utterance": "check if `x` is an integer", "Code": "(type(x) == int)"}, {"ID": 307305, "NL Utterance": "play the wav file 'sound.wav'", "Code": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)"}, {"ID": 4152376, "NL Utterance": "create a list containing the `n` next values of generator `it`", "Code": "[next(it) for _ in range(n)]"}, {"ID": 4152376, "NL Utterance": "get list of n next values of a generator `it`", "Code": "list(itertools.islice(it, 0, n, 1))"}, {"ID": 1388818, "NL Utterance": "compare two lists in python `a` and `b` and return matches", "Code": "set(a).intersection(b)"}, {"ID": 1388818, "NL Utterance": null, "Code": "[i for i, j in zip(a, b) if i == j]"}, {"ID": 17757450, "NL Utterance": "convert list `data` into a string of its elements", "Code": "print(''.join(map(str, data)))"}, {"ID": 3166619, "NL Utterance": "match regex pattern '\\\\$[0-9]+[^\\\\$]*$' on string '$1 off delicious $5 ham.'", "Code": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')"}, {"ID": 10675054, "NL Utterance": "import a nested module `c.py` within `b` within `a` with importlib", "Code": "importlib.import_module('.c', 'a.b')"}, {"ID": 10675054, "NL Utterance": "import a module 'a.b.c' with importlib.import_module in python 2", "Code": "importlib.import_module('a.b.c')"}, {"ID": 7717380, "NL Utterance": "Convert array `a` to numpy array", "Code": "a = np.array(a)"}, {"ID": 13794532, "NL Utterance": "Find all `div` tags whose classes has the value `comment-` in a beautiful soup object `soup`", "Code": "soup.find_all('div', class_=re.compile('comment-'))"}, {"ID": 23612271, "NL Utterance": "a sequence of empty lists of length `n`", "Code": "[[] for _ in range(n)]"}, {"ID": 9495262, "NL Utterance": "create dictionary from list of variables 'foo' and 'bar' already defined", "Code": "dict((k, globals()[k]) for k in ('foo', 'bar'))"}, {"ID": 1731346, "NL Utterance": "get two random records from model 'MyModel' in Django", "Code": "MyModel.objects.order_by('?')[:2]"}, {"ID": 29035168, "NL Utterance": "Print a dictionary `{'user': {'name': 'Markus'}}` with string formatting", "Code": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})"}, {"ID": 20059427, "NL Utterance": "create a dictionary `list_dict` containing each tuple in list `tuple_list` as values and the tuple's first element as the corresponding key", "Code": "list_dict = {t[0]: t for t in tuple_list}"}, {"ID": 3996904, "NL Utterance": "Generate a random integer between 0 and 9", "Code": "randint(0, 9)"}, {"ID": 3996904, "NL Utterance": "Generate a random integer between `a` and `b`", "Code": "random.randint(a, b)"}, {"ID": 3996904, "NL Utterance": "Generate random integers between 0 and 9", "Code": "print((random.randint(0, 9)))"}, {"ID": 5864271, "NL Utterance": "reverse a string `a` by 2 characters at a time", "Code": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))"}, {"ID": 28664103, "NL Utterance": "transform time series `df` into a pivot table aggregated by column 'Close' using column `df.index.date` as index and values of column `df.index.time` as columns", "Code": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')"}, {"ID": 10666163, "NL Utterance": "check if the third element of all the lists in a list \"items\" is equal to zero.", "Code": "any(item[2] == 0 for item in items)"}, {"ID": 10666163, "NL Utterance": "Find all the lists from a lists of list 'items' if third element in all sub-lists is '0'", "Code": "[x for x in items if x[2] == 0]"}, {"ID": 16412563, "NL Utterance": "sort dictionary of dictionaries `dic` according to the key 'Fisher'", "Code": "sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)"}, {"ID": 17952279, "NL Utterance": "plot a data logarithmically in y axis", "Code": "plt.yscale('log', nonposy='clip')"}, {"ID": 10365225, "NL Utterance": null, "Code": "map(int, re.findall('\\\\d+', s))"}, {"ID": 2759323, "NL Utterance": "list the contents of a directory '/home/username/www/'", "Code": "os.listdir('/home/username/www/')"}, {"ID": 2759323, "NL Utterance": "list all the contents of the directory 'path'.", "Code": "os.listdir('path')"}, {"ID": 40076861, "NL Utterance": "merge a pandas data frame `distancesDF` and column `dates` in pandas data frame `datesDF` into single", "Code": "pd.concat([distancesDF, datesDF.dates], axis=1)"}, {"ID": 30062429, "NL Utterance": "get value of first index of each element in list `a`", "Code": "[x[0] for x in a]"}, {"ID": 30062429, "NL Utterance": "python how to get every first element in 2 dimensional list `a`", "Code": "[i[0] for i in a]"}, {"ID": 5075247, "NL Utterance": "remove line breaks from string `textblock` using regex", "Code": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)"}, {"ID": 1883604, "NL Utterance": "Open gzip-compressed file encoded as utf-8 'file.gz' in text mode", "Code": "gzip.open('file.gz', 'rt', encoding='utf-8')"}, {"ID": 6159313, "NL Utterance": "test if either of strings `a` or `b` are members of the set of strings, `['b', 'a', 'foo', 'bar']`", "Code": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])"}, {"ID": 6159313, "NL Utterance": "Check if all the values in a list `['a', 'b']` are present in another list `['b', 'a', 'foo', 'bar']`", "Code": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])"}, {"ID": 3939361, "NL Utterance": "Remove characters \"!@#$\" from a string `line`", "Code": "line.translate(None, '!@#$')"}, {"ID": 3939361, "NL Utterance": "Remove characters \"!@#$\" from a string `line`", "Code": "line = re.sub('[!@#$]', '', line)"}, {"ID": 3939361, "NL Utterance": "Remove string \"1\" from string `string`", "Code": "string.replace('1', '')"}, {"ID": 3939361, "NL Utterance": "Remove character `char` from a string `a`", "Code": "a = a.replace(char, '')"}, {"ID": 3939361, "NL Utterance": "Remove characters in `b` from a string `a`", "Code": "a = a.replace(char, '')"}, {"ID": 3939361, "NL Utterance": "Remove characters in '!@#$' from a string `line`", "Code": "line = line.translate(string.maketrans('', ''), '!@#$')"}, {"ID": 38704545, "NL Utterance": "binarize the values in columns of list `order` in a pandas data frame", "Code": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]"}, {"ID": 19672101, "NL Utterance": "store integer 3, 4, 1 and 2 in a list", "Code": "[3, 4, 1, 2]"}, {"ID": 13627865, "NL Utterance": "define global variable `something` with value `bob`", "Code": "globals()['something'] = 'bob'"}, {"ID": 199059, "NL Utterance": "insert spaces before capital letters in string `text`", "Code": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)"}, {"ID": 727507, "NL Utterance": "print unicode string `ex\\xe1mple` in uppercase", "Code": "print('ex\\xe1mple'.upper())"}, {"ID": 28657018, "NL Utterance": "get last element of string splitted by '\\\\' from list of strings `list_dirs`", "Code": "[l.split('\\\\')[-1] for l in list_dirs]"}, {"ID": 579856, "NL Utterance": "combine two sequences into a dictionary", "Code": "dict(zip(keys, values))"}, {"ID": 3220284, "NL Utterance": "customize the time format in python logging", "Code": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')"}, {"ID": 8172861, "NL Utterance": "Replace comma with dot in a string `original_string` using regex", "Code": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)"}, {"ID": 5826427, "NL Utterance": "call a function `otherfunc` inside a bash script `test.sh` using subprocess", "Code": "subprocess.call('test.sh otherfunc')"}, {"ID": 5826427, "NL Utterance": null, "Code": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])"}, {"ID": 1546226, "NL Utterance": "remove multiple spaces in a string `foo`", "Code": "\"\"\" \"\"\".join(foo.split())"}, {"ID": 13557937, "NL Utterance": "convert decimal 8 to a list of its binary values", "Code": "list('{0:0b}'.format(8))"}, {"ID": 13557937, "NL Utterance": "convert decimal integer 8 to a list of its binary values as elements", "Code": "[int(x) for x in list('{0:0b}'.format(8))]"}, {"ID": 13557937, "NL Utterance": "convert decimal `8` to binary list", "Code": "[int(x) for x in bin(8)[2:]]"}, {"ID": 9932549, "NL Utterance": "get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`", "Code": "dict(zip(my_list, map(my_dictionary.get, my_list)))"}, {"ID": 11144513, "NL Utterance": "cartesian product of `x` and `y` array points into single array of 2d points", "Code": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)"}, {"ID": 16739319, "NL Utterance": "selenium wait for driver `driver` 60 seconds before throwing a NoSuchElementExceptions exception", "Code": "driver.implicitly_wait(60)"}, {"ID": 16739319, "NL Utterance": "selenium webdriver switch to frame 'frameName'", "Code": "driver.switch_to_frame('frameName')"}, {"ID": 21618351, "NL Utterance": "format current date to pattern '{%Y-%m-%d %H:%M:%S}'", "Code": "time.strftime('{%Y-%m-%d %H:%M:%S}')"}, {"ID": 17713873, "NL Utterance": "sort list `['14:10:01', '03:12:08']`", "Code": "sorted(['14:10:01', '03:12:08'])"}, {"ID": 20778951, "NL Utterance": "find all occurrences of regex pattern '(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)' in string `x`", "Code": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)"}, {"ID": 21558999, "NL Utterance": "remove duplicate rows from dataframe `df1` and calculate their frequency", "Code": "df1.groupby(['key', 'year']).size().reset_index()"}, {"ID": 674509, "NL Utterance": "sort dictionary `dictionary` in ascending order by its values", "Code": "sorted(list(dictionary.items()), key=operator.itemgetter(1))"}, {"ID": 674509, "NL Utterance": "Iterate over dictionary `d` in ascending order of values", "Code": "sorted(iter(d.items()), key=lambda x: x[1])"}, {"ID": 674509, "NL Utterance": "iterate over a python dictionary, ordered by values", "Code": "sorted(list(dictionary.items()), key=lambda x: x[1])"}, {"ID": 42098487, "NL Utterance": "split 1d array `a` into 2d array at the last element", "Code": "np.split(a, [-1])"}, {"ID": 30406725, "NL Utterance": "convert dataframe `df` into a pivot table using column 'order' as index and values of column 'sample' as columns", "Code": "df.pivot(index='order', columns='sample')"}, {"ID": 8916302, "NL Utterance": "select all rows from pandas DataFrame 'df' where the value in column 'A' is greater than 1 or less than -1 in column 'B'.", "Code": "df[(df['A'] > 1) | (df['B'] < -1)]"}, {"ID": 8372399, "NL Utterance": "Get the zip output as list from the lists `[1, 2, 3]`, `[4, 5, 6]`, `[7, 8, 9]`", "Code": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]"}, {"ID": 17071871, "NL Utterance": "select rows of dataframe `df` whose value for column `A` is `foo`", "Code": "print(df.loc[df['A'] == 'foo'])"}, {"ID": 17071871, "NL Utterance": "select rows whose column value in column `column_name` does not equal `some_value` in pandas data frame", "Code": "df.loc[df['column_name'] != some_value]"}, {"ID": 17071871, "NL Utterance": "select rows from a dataframe `df` whose value for column `column_name` is not in `some_values`", "Code": "df.loc[~df['column_name'].isin(some_values)]"}, {"ID": 17071871, "NL Utterance": "select all rows whose values in a column `column_name` equals a scalar `some_value` in pandas data frame object `df`", "Code": "df.loc[df['column_name'] == some_value]"}, {"ID": 17071871, "NL Utterance": "Select rows whose value of the \"B\" column is \"one\" or \"three\" in the DataFrame `df`", "Code": "print(df.loc[df['B'].isin(['one', 'three'])])"}, {"ID": 38273353, "NL Utterance": "repeat every character for 7 times in string 'map'", "Code": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))"}, {"ID": 6996603, "NL Utterance": "delete an empty directory", "Code": "os.rmdir()"}, {"ID": 6996603, "NL Utterance": "recursively delete all contents in directory `path`", "Code": "shutil.rmtree(path, ignore_errors=False, onerror=None)"}, {"ID": 6996603, "NL Utterance": "recursively remove folder `name`", "Code": "os.removedirs(name)"}, {"ID": 19365513, "NL Utterance": "Add row `['8/19/2014', 'Jun', 'Fly', '98765']` to dataframe `df`", "Code": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']"}, {"ID": 22625616, "NL Utterance": "list all files in a current directory", "Code": "glob.glob('*')"}, {"ID": 22625616, "NL Utterance": "List all the files that doesn't contain the name `hello`", "Code": "glob.glob('[!hello]*.txt')"}, {"ID": 22625616, "NL Utterance": "List all the files that matches the pattern `hello*.txt`", "Code": "glob.glob('hello*.txt')"}, {"ID": 10586778, "NL Utterance": "evaluate the expression '20<30'", "Code": "eval('20<30')"}, {"ID": 28684154, "NL Utterance": "Copy list `old_list` and name it `new_list`", "Code": "new_list = [x[:] for x in old_list]"}, {"ID": 16962512, "NL Utterance": "convert scientific notation of variable `a` to decimal", "Code": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))"}, {"ID": 41154648, "NL Utterance": "convert dataframe `df` to integer-type sparse object", "Code": "df.to_sparse(0)"}, {"ID": 444058, "NL Utterance": "display attribute `attr` for each object `obj` in list `my_list_of_objs`", "Code": "print([obj.attr for obj in my_list_of_objs])"}, {"ID": 35269374, "NL Utterance": "count the number of True values associated with key 'success' in dictionary `d`", "Code": "sum(1 if d['success'] else 0 for d in s)"}, {"ID": 35269374, "NL Utterance": "get the sum of values associated with the key \u2018success\u2019 for a list of dictionaries `s`", "Code": "sum(d['success'] for d in s)"}, {"ID": 9534608, "NL Utterance": "get complete path of a module named `os`", "Code": "imp.find_module('os')[1]"}, {"ID": 432842, "NL Utterance": "get logical xor of `a` and `b`", "Code": "(bool(a) != bool(b))"}, {"ID": 432842, "NL Utterance": "get logical xor of `a` and `b`", "Code": "((a and (not b)) or ((not a) and b))"}, {"ID": 432842, "NL Utterance": "get logical xor of `a` and `b`", "Code": "(bool(a) ^ bool(b))"}, {"ID": 432842, "NL Utterance": "get logical xor of `a` and `b`", "Code": "xor(bool(a), bool(b))"}, {"ID": 432842, "NL Utterance": "get the logical xor of two variables `str1` and `str2`", "Code": "return (bool(str1) ^ bool(str2))"}, {"ID": 5048841, "NL Utterance": "Sort list `my_list` in alphabetical order based on the values associated with key 'name' of each dictionary in the list", "Code": "my_list.sort(key=operator.itemgetter('name'))"}, {"ID": 4697006, "NL Utterance": "split a string `a , b; cdf`  using both commas and semicolons as delimeters", "Code": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')"}, {"ID": 4697006, "NL Utterance": "Split a string `string` by multiple separators `,` and `;`", "Code": "[t.strip() for s in string.split(',') for t in s.split(';')]"}, {"ID": 7974442, "NL Utterance": "make a function `f` that calculates the sum of two integer variables `x` and `y`", "Code": "f = lambda x, y: x + y"}, {"ID": 348196, "NL Utterance": "Create list `instancelist` containing 29 objects of type MyClass", "Code": "instancelist = [MyClass() for i in range(29)]"}, {"ID": 23914774, "NL Utterance": "Make a dictionary from list `f` which is in the format of four sets of  \"val, key, val\"", "Code": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}"}, {"ID": 4433017, "NL Utterance": "convert bytes string `s`  to an unsigned integer", "Code": "struct.unpack('>q', s)[0]"}, {"ID": 20512297, "NL Utterance": "concatenate a series `students` onto a dataframe `marks` with pandas", "Code": "pd.concat([students, pd.DataFrame(marks)], axis=1)"}, {"ID": 11850425, "NL Utterance": "Sort list `alist` in ascending order based on each of its elements' attribute `foo`", "Code": "alist.sort(key=lambda x: x.foo)"}, {"ID": 42180455, "NL Utterance": "BeautifulSoup select 'div' elements with an id attribute value ending with sub-string '_answer' in HTML parsed string `soup`", "Code": "soup.select('div[id$=_answer]')"}, {"ID": 31547657, "NL Utterance": "sympy solve matrix of linear equations `(([1, 1, 1, 1], [1, 1, 2, 3]))` with variables `(x, y, z)`", "Code": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))"}, {"ID": 5352546, "NL Utterance": "best way to extract subset of key-value pairs with keys matching 'l', 'm', or 'n' from python dictionary object", "Code": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}"}, {"ID": 5352546, "NL Utterance": "extract subset of key-value pairs with keys as `('l', 'm', 'n')` from dictionary object `bigdict`", "Code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))"}, {"ID": 5352546, "NL Utterance": "Get items from a dictionary `bigdict` where the keys are present in `('l', 'm', 'n')`", "Code": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}"}, {"ID": 5352546, "NL Utterance": "Extract subset of key value pair for keys 'l', 'm', 'n' from `bigdict` in python 3", "Code": "{k: bigdict[k] for k in ('l', 'm', 'n')}"}, {"ID": 16114244, "NL Utterance": "Selenium get the entire `driver` page text", "Code": "driver.page_source"}, {"ID": 8386675, "NL Utterance": "extracting column `1` and `9` from array `data`", "Code": "data[:, ([1, 9])]"}, {"ID": 9470142, "NL Utterance": "remove all square brackets from string 'abcd[e]yth[ac]ytwec'", "Code": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')"}, {"ID": 2261011, "NL Utterance": null, "Code": "root.geometry('500x500')"}, {"ID": 32926587, "NL Utterance": "find all substrings in string `mystring` composed only of letters `a` and `b` where each `a` is directly preceded and succeeded by `b`", "Code": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)"}, {"ID": 16127862, "NL Utterance": "convert list `lst` of tuples of floats to list `str_list` of tuples of strings of floats in scientific notation with eight decimal point precision", "Code": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]"}, {"ID": 16127862, "NL Utterance": "convert list of sublists `lst` of floats to a list of sublists `str_list` of strings of integers in scientific notation with 8 decimal points", "Code": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]"}, {"ID": 2054416, "NL Utterance": "Create a tuple `t` containing first element of each tuple in tuple `s`", "Code": "t = tuple(x[0] for x in s)"}, {"ID": 15509617, "NL Utterance": "obtain the current day of the week in a 3 letter format from a datetime object", "Code": "datetime.datetime.now().strftime('%a')"}, {"ID": 227459, "NL Utterance": "get the ASCII value of a character 'a' as an int", "Code": "ord('a')"}, {"ID": 227459, "NL Utterance": "get the ASCII value of a character u'\u3042' as an int", "Code": "ord('\\u3042')"}, {"ID": 227459, "NL Utterance": "get the ASCII value of a character as an int", "Code": "ord()"}, {"ID": 2331943, "NL Utterance": "decode JSON string `u` to a dictionary", "Code": "json.load(u)"}, {"ID": 28538536, "NL Utterance": "Delete mulitple columns `columnheading1`, `columnheading2` in pandas data frame `yourdf`", "Code": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)"}, {"ID": 1397827, "NL Utterance": "get a list of of elements resulting from splitting user input by commas and stripping white space from each resulting string `s`", "Code": "[s.strip() for s in input().split(',')]"}, {"ID": 13081090, "NL Utterance": "create a list containing the digits values from binary string `x` as elements", "Code": "[int(d) for d in str(bin(x))[2:]]"}, {"ID": 39373620, "NL Utterance": "get the max string length in list `i`", "Code": "max(len(word) for word in i)"}, {"ID": 39373620, "NL Utterance": "get the maximum string length in nested list `i`", "Code": "len(max(i, key=len))"}, {"ID": 4965159, "NL Utterance": "execute os command `my_cmd`", "Code": "os.system(my_cmd)"}, {"ID": 36139, "NL Utterance": "sort list `mylist` alphabetically", "Code": "mylist.sort(key=lambda x: x.lower())"}, {"ID": 36139, "NL Utterance": "sort list `mylist` in alphabetical order", "Code": "mylist.sort(key=str.lower)"}, {"ID": 36139, "NL Utterance": "sort a list of strings 'mylist'.", "Code": "mylist.sort()"}, {"ID": 36139, "NL Utterance": "sort a list of strings `list`", "Code": "list.sort()"}, {"ID": 24041436, "NL Utterance": "Set multi index on columns 'Company' and 'date' of data frame `df` in pandas.", "Code": "df.set_index(['Company', 'date'], inplace=True)"}, {"ID": 9396706, "NL Utterance": "get the attribute `x` from object `your_obj`", "Code": "getattr(your_obj, x)"}, {"ID": 12883376, "NL Utterance": "remove first word in string `s`", "Code": "s.split(' ', 1)[1]"}, {"ID": 22904654, "NL Utterance": "save xlsxwriter file in 'app/smth1/smth2/Expenses01.xlsx' path and assign to variable `workbook`", "Code": "workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')"}, {"ID": 22904654, "NL Utterance": "save xlsxwriter file to 'C:/Users/Steven/Documents/demo.xlsx' path", "Code": "workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')"}, {"ID": 7125009, "NL Utterance": "change legend size to 'x-small' in upper-left location", "Code": "pyplot.legend(loc=2, fontsize='x-small')"}, {"ID": 7125009, "NL Utterance": "change legend font size with matplotlib.pyplot to 6", "Code": "plot.legend(loc=2, prop={'size': 6})"}, {"ID": 312443, "NL Utterance": "split list `l` into `n` sized lists", "Code": "[l[i:i + n] for i in range(0, len(l), n)]"}, {"ID": 312443, "NL Utterance": "split a list `l` into evenly sized chunks `n`", "Code": "[l[i:i + n] for i in range(0, len(l), n)]"}, {"ID": 39299703, "NL Utterance": "check if character '-' exists in a dataframe `df` cell 'a'", "Code": "df['a'].str.contains('-')"}, {"ID": 11403474, "NL Utterance": "remove all non -word, -whitespace, or -apostrophe characters from string `doesn't this mean it -technically- works?`", "Code": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")"}, {"ID": 31650399, "NL Utterance": "find all digits between two characters `\\xab` and `\\xbb`in a string `text`", "Code": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))"}, {"ID": 20084487, "NL Utterance": "plot data of column 'index' versus column 'A' of dataframe `monthly_mean` after resetting its index", "Code": "monthly_mean.reset_index().plot(x='index', y='A')"}, {"ID": 8217613, "NL Utterance": "get the output of a subprocess command `echo \"foo\"` in command line", "Code": "subprocess.check_output('echo \"foo\"', shell=True)"}, {"ID": 18272066, "NL Utterance": "Encode each value to 'UTF8' in the list `EmployeeList`", "Code": "[x.encode('UTF8') for x in EmployeeList]"}, {"ID": 10972410, "NL Utterance": "combine two columns `foo` and `bar` in a pandas data frame", "Code": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)"}, {"ID": 29558007, "NL Utterance": "generate a list of consecutive integers from 0 to 8", "Code": "list(range(9))"}, {"ID": 3855093, "NL Utterance": "convert list `myintegers` into a unicode string", "Code": "\"\"\"\"\"\".join(chr(i) for i in myintegers)"}, {"ID": 16128833, "NL Utterance": "inherit from class `Executive`", "Code": "super(Executive, self).__init__(*args)"}, {"ID": 14961014, "NL Utterance": "Remove the string value `item` from a list of strings `my_sequence`", "Code": "[item for item in my_sequence if item != 'item']"}, {"ID": 306400, "NL Utterance": "randomly select an item from list `foo`", "Code": "random.choice(foo)"}, {"ID": 3931541, "NL Utterance": "check if all of the following items in list `['a', 'b']` are in a list `['a', 'b', 'c']`", "Code": "set(['a', 'b']).issubset(['a', 'b', 'c'])"}, {"ID": 3931541, "NL Utterance": "Check if all the items in a list `['a', 'b']` exists in another list `l`", "Code": "set(['a', 'b']).issubset(set(l))"}, {"ID": 163542, "NL Utterance": "set the stdin of the process 'grep f' to be b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "Code": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]"}, {"ID": 163542, "NL Utterance": "set the stdin of the process 'grep f' to be 'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", "Code": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()"}, {"ID": 18637651, "NL Utterance": "to convert a list of tuples `list_of_tuples` into list of lists", "Code": "[list(t) for t in zip(*list_of_tuples)]"}, {"ID": 18637651, "NL Utterance": "group a list `list_of_tuples` of tuples by values", "Code": "zip(*list_of_tuples)"}, {"ID": 20504881, "NL Utterance": "merge pandas dataframe `x` with columns 'a' and 'b' and dataframe `y` with column 'y'", "Code": "pd.merge(y, x, on='k')[['a', 'b', 'y']]"}, {"ID": 21261330, "NL Utterance": "Split string with comma (,) and remove whitespace from a string 'my_string'", "Code": "[item.strip() for item in my_string.split(',')]"}, {"ID": 6886493, "NL Utterance": "Get all object attributes of object `obj`", "Code": "print((obj.__dict__))"}, {"ID": 6886493, "NL Utterance": "Get all object attributes of an object", "Code": "dir()"}, {"ID": 6886493, "NL Utterance": "Get all object attributes of an object", "Code": "dir()"}, {"ID": 16389188, "NL Utterance": "pygobject center window `window`", "Code": "window.set_position(Gtk.WindowPosition.CENTER)"}, {"ID": 14159753, "NL Utterance": "change the size of the sci notation to '30' above the y axis in matplotlib `plt`", "Code": "plt.rc('font', **{'size': '30'})"}, {"ID": 29530232, "NL Utterance": "check if datafram `df` has any NaN vlaues", "Code": "df.isnull().values.any()"}, {"ID": 4979542, "NL Utterance": "unpack the arguments out of list `params` to function `some_func`", "Code": "some_func(*params)"}, {"ID": 9880173, "NL Utterance": "decode encodeuricomponent in GAE", "Code": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')"}, {"ID": 41178532, "NL Utterance": "get proportion of rows in dataframe `trace_df` whose values for column `ratio` are greater than 0", "Code": "(trace_df['ratio'] > 0).mean()"}, {"ID": 8704952, "NL Utterance": "convert a set of tuples `queryresult` to a string `emaillist`", "Code": "emaillist = '\\n'.join(item[0] for item in queryresult)"}, {"ID": 8704952, "NL Utterance": "convert a set of tuples `queryresult` to a list of strings", "Code": "[item[0] for item in queryresult]"}, {"ID": 8704952, "NL Utterance": "convert a list of tuples `queryresult` to a string from the first indexes.", "Code": "emaillist = '\\n'.join([item[0] for item in queryresult])"}, {"ID": 27867754, "NL Utterance": "get the widget which has currently the focus in tkinter instance `window2`", "Code": "print(('focus object class:', window2.focus_get().__class__))"}, {"ID": 36113747, "NL Utterance": "Initialize a list `a` with `10000` items and each item's value `0`", "Code": "a = [0] * 10000"}, {"ID": 7794208, "NL Utterance": "Keep only unique words in list of words `words` and join into string", "Code": "print(' '.join(sorted(set(words), key=words.index)))"}, {"ID": 13628725, "NL Utterance": "generate 6 random numbers between 1 and 50", "Code": "random.sample(range(1, 50), 6)"}, {"ID": 13628725, "NL Utterance": "generate six unique random numbers in the range of 1 to 49.", "Code": "random.sample(range(1, 50), 6)"}, {"ID": 764235, "NL Utterance": "lowercase keys and values in dictionary `{'My Key': 'My Value'}`", "Code": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}"}, {"ID": 764235, "NL Utterance": "lowercase all keys and values in dictionary `{'My Key': 'My Value'}`", "Code": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())"}, {"ID": 764235, "NL Utterance": "Convert each key,value pair in a dictionary `{'My Key': 'My Value'}` to lowercase", "Code": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())"}, {"ID": 34197047, "NL Utterance": "sorting the lists in list of lists `data`", "Code": "[sorted(item) for item in data]"}, {"ID": 7831371, "NL Utterance": "SQLite get a list of column names from cursor object `cursor`", "Code": "names = list(map(lambda x: x[0], cursor.description))"}, {"ID": 3283306, "NL Utterance": "get the absolute path of a running python script", "Code": "os.path.abspath(__file__)"}, {"ID": 2173797, "NL Utterance": "sort 2d array `matrix` by row with index 1", "Code": "sorted(matrix, key=itemgetter(1))"}, {"ID": 7658932, "NL Utterance": "Get all indexes of a letter `e` from a string `word`", "Code": "[index for index, letter in enumerate(word) if letter == 'e']"}, {"ID": 8901996, "NL Utterance": "decode utf-8 code `x` into a raw unicode literal", "Code": "print(str(x).decode('raw_unicode_escape'))"}, {"ID": 464736, "NL Utterance": "split string 'abcdefg' into a list of characters", "Code": "re.findall('\\\\w', 'abcdefg')"}, {"ID": 82831, "NL Utterance": "check whether a file `fname` exists", "Code": "os.path.isfile(fname)"}, {"ID": 82831, "NL Utterance": "check whether file \"/path/to/file\" exists", "Code": "my_file = Path('/path/to/file')\nif my_file.is_file():\n    pass"}, {"ID": 82831, "NL Utterance": "check whether file `file_path` exists", "Code": "os.path.exists(file_path)"}, {"ID": 82831, "NL Utterance": "check whether a file \"/etc/password.txt\" exists", "Code": "print(os.path.isfile('/etc/password.txt'))"}, {"ID": 82831, "NL Utterance": "check whether a file \"/etc\" exists", "Code": "print(os.path.isfile('/etc'))"}, {"ID": 82831, "NL Utterance": "check whether a path \"/does/not/exist\" exists", "Code": "print(os.path.exists('/does/not/exist'))"}, {"ID": 82831, "NL Utterance": "check whether a file \"/does/not/exist\" exists", "Code": "print(os.path.isfile('/does/not/exist'))"}, {"ID": 82831, "NL Utterance": "check whether a path \"/etc\" exists", "Code": "print(os.path.exists('/etc'))"}, {"ID": 82831, "NL Utterance": "check whether a path \"/etc/password.txt\" exists", "Code": "print(os.path.exists('/etc/password.txt'))"}, {"ID": 1059559, "NL Utterance": "split string \"a;bcd,ef g\" on delimiters ';' and ','", "Code": "\"\"\"a;bcd,ef g\"\"\".replace(';', ' ').replace(',', ' ').split()"}, {"ID": 41127441, "NL Utterance": "get a list each value `i` in the implicit tuple `range(3)`", "Code": "list(i for i in range(3))"}, {"ID": 20347766, "NL Utterance": "add field names as headers in csv constructor `writer`", "Code": "writer.writeheader()"}, {"ID": 18500541, "NL Utterance": "flatten a tuple `l`", "Code": "[(a, b, c) for a, (b, c) in l]"}, {"ID": 7253907, "NL Utterance": "convert 3652458 to string represent a 32bit hex number", "Code": "\"\"\"0x{0:08X}\"\"\".format(3652458)"}, {"ID": 674519, "NL Utterance": "convert a python dictionary `d` to a list of tuples", "Code": "[(v, k) for k, v in list(d.items())]"}, {"ID": 674519, "NL Utterance": "convert dictionary of pairs `d` to a list of tuples", "Code": "[(v, k) for k, v in d.items()]"}, {"ID": 674519, "NL Utterance": "convert python 2 dictionary `a` to a list of tuples where the value is the first tuple element and the key is the second tuple element", "Code": "[(v, k) for k, v in a.items()]"}, {"ID": 674519, "NL Utterance": "convert a python dictionary 'a' to a list of tuples", "Code": "[(k, v) for k, v in a.items()]"}, {"ID": 2397687, "NL Utterance": "convert a list of hex byte strings `['BB', 'A7', 'F6', '9E']` to a list of hex integers", "Code": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]"}, {"ID": 2397687, "NL Utterance": "convert the elements of list `L` from hex byte strings to hex integers", "Code": "[int(x, 16) for x in L]"}, {"ID": 961263, "NL Utterance": "assign values to two variables, `var1` and `var2` from user input response to `'Enter two numbers here: ` split on whitespace", "Code": "var1, var2 = input('Enter two numbers here: ').split()"}, {"ID": 34358278, "NL Utterance": "Filter a json from a key-value pair as `{'fixed_key_1': 'foo2'}` in Django", "Code": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])"}, {"ID": 32292554, "NL Utterance": "create a list containing a four elements long tuples of permutations of binary values", "Code": "itertools.product(list(range(2)), repeat=4)"}, {"ID": 30483977, "NL Utterance": "get yesterday's date as a string in `YYYY-MM-DD` format using timedelta", "Code": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')"}, {"ID": 28253102, "NL Utterance": "Get the dot product of matrix `[1,0,0,1,0,0]` and matrix `[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]]`", "Code": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])"}, {"ID": 23797491, "NL Utterance": "convert date strings in pandas dataframe column`df['date']` to pandas timestamps using the format '%d%b%Y'", "Code": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')"}, {"ID": 4383571, "NL Utterance": "Importing file `file` from folder '/path/to/application/app/folder'", "Code": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file"}, {"ID": 20206615, "NL Utterance": "do a `left` merge of dataframes `x` and `y` on the column `state` and sort by `index`", "Code": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')"}, {"ID": 16436133, "NL Utterance": "Create a default empty json object if no json is available in request parameter `mydata`", "Code": "json.loads(request.POST.get('mydata', '{}'))"}, {"ID": 2231663, "NL Utterance": "get a list of tuples of every three consecutive items in list `[1, 2, 3, 4, 5, 6, 7, 8, 9]`", "Code": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))"}, {"ID": 2231663, "NL Utterance": "slice list `[1, 2, 3, 4, 5, 6, 7]` into lists of two elements each", "Code": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))"}, {"ID": 2231663, "NL Utterance": null, "Code": "[input[i:i + n] for i in range(0, len(input), n)]"}, {"ID": 2597099, "NL Utterance": "Sort list `keys` based on its elements' dot-seperated numbers", "Code": "keys.sort(key=lambda x: map(int, x.split('.')))"}, {"ID": 2597099, "NL Utterance": "Sort a list of integers `keys` where each value is in string format", "Code": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])"}, {"ID": 32838802, "NL Utterance": "convert a 3d array `img` of dimensions 4x2x3 to a 2d array   of dimensions 3x8", "Code": "img.transpose(2, 0, 1).reshape(3, -1)"}, {"ID": 27060098, "NL Utterance": "replacing 'ABC' and 'AB' values in column 'BrandName' of dataframe `df` with 'A'", "Code": "df['BrandName'].replace(['ABC', 'AB'], 'A')"}, {"ID": 27060098, "NL Utterance": "replace values `['ABC', 'AB']` in a column 'BrandName' of  pandas dataframe `df` with another value 'A'", "Code": "df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')"}, {"ID": 26081300, "NL Utterance": "Subtract the mean of each row in dataframe `df` from the corresponding row's elements", "Code": "df.sub(df.mean(axis=1), axis=0)"}, {"ID": 22520932, "NL Utterance": "remove all non-alphabet chars from string `s`", "Code": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])"}, {"ID": 6429638, "NL Utterance": "split a string `s` into integers", "Code": "l = (int(x) for x in s.split())"}, {"ID": 6429638, "NL Utterance": "split a string `42 0` by white spaces.", "Code": "\"\"\"42 0\"\"\".split()"}, {"ID": 6429638, "NL Utterance": null, "Code": "map(int, '42 0'.split())"}, {"ID": 13076560, "NL Utterance": "get indexes of all true boolean values from a list `bool_list`", "Code": "[i for i, elem in enumerate(bool_list, 1) if elem]"}, {"ID": 11391969, "NL Utterance": "group dataframe `data` entries by year value of the date in column 'date'", "Code": "data.groupby(data['date'].map(lambda x: x.year))"}, {"ID": 32191029, "NL Utterance": "Get the indices in array `b` of each element appearing in array `a`", "Code": "np.in1d(b, a).nonzero()[0]"}, {"ID": 3961581, "NL Utterance": "display current time in readable format", "Code": "time.strftime('%l:%M%p %z on %b %d, %Y')"}, {"ID": 10998621, "NL Utterance": "rotate x-axis text labels of plot `ax` 45 degrees", "Code": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)"}, {"ID": 25678689, "NL Utterance": "append array of strings `['x', 'x', 'x']` into one string", "Code": "\"\"\"\"\"\".join(['x', 'x', 'x'])"}, {"ID": 8712332, "NL Utterance": "retrieve all items in an numpy array 'x' except the item of the index 1", "Code": "x[(np.arange(x.shape[0]) != 1), :, :]"}, {"ID": 39605640, "NL Utterance": "pull a value with key 'name' from a json object `item`", "Code": "print(item['name'])"}, {"ID": 27318022, "NL Utterance": "read a file from redirected stdin and save to variable `result`", "Code": "result = sys.stdin.read()"}, {"ID": 2416823, "NL Utterance": "Get all the texts without tags from beautiful soup object `soup`", "Code": "\"\"\"\"\"\".join(soup.findAll(text=True))"}, {"ID": 17424182, "NL Utterance": "extract all rows from dataframe `data` where the value of column 'Value' is True", "Code": "data[data['Value'] == True]"}, {"ID": 9841303, "NL Utterance": "removing duplicate characters from a string variable \"foo\"", "Code": "\"\"\"\"\"\".join(set(foo))"}, {"ID": 930865, "NL Utterance": "sort objects in model `Profile` based on Theirs `reputation` attribute", "Code": "sorted(Profile.objects.all(), key=lambda p: p.reputation)"}, {"ID": 25440008, "NL Utterance": "flatten a dataframe df to a list", "Code": "df.values.flatten()"}, {"ID": 17734779, "NL Utterance": "sort list `users` using values associated with key 'id' according to elements in list `order`", "Code": "users.sort(key=lambda x: order.index(x['id']))"}, {"ID": 17734779, "NL Utterance": "sort a python list of dictionaries `users` by a given list `order` of ids 'id' with the desired order", "Code": "users.sort(key=lambda x: order.index(x['id']))"}, {"ID": 19069701, "NL Utterance": "request URI '<MY_URI>' and pass authorization token 'TOK:<MY_TOKEN>' to the header", "Code": "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})"}, {"ID": 1885181, "NL Utterance": "un-escape a backslash-escaped string in `Hello,\\\\nworld!`", "Code": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))"}, {"ID": 9507819, "NL Utterance": "match regex pattern 'a*?bc*?' on string 'aabcc' with DOTALL enabled", "Code": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)"}, {"ID": 7670226, "NL Utterance": "get second array column length of array `a`", "Code": "a.shape[1]"}, {"ID": 12376863, "NL Utterance": "use operations like max/min within a row to a dataframe 'd' in pandas", "Code": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)"}, {"ID": 8899905, "NL Utterance": "count number of occurrences of a substring 'ab' in a string \"abcdabcva\"", "Code": "\"\"\"abcdabcva\"\"\".count('ab')"}, {"ID": 25040875, "NL Utterance": "get a list of values with key 'key' from a list of dictionaries `l`", "Code": "[d['key'] for d in l if 'key' in d]"}, {"ID": 25040875, "NL Utterance": "get a list of values for key 'key' from a list of dictionaries `l`", "Code": "[d['key'] for d in l]"}, {"ID": 25040875, "NL Utterance": "get a list of values for key \"key\" from a list of dictionaries in `l`", "Code": "[d['key'] for d in l]"}, {"ID": 40744328, "NL Utterance": "order a list of lists `l1` by the first value", "Code": "l1.sort(key=lambda x: int(x[0]))"}, {"ID": 40744328, "NL Utterance": "order a list of lists `[[1, 'mike'], [1, 'bob']]` by the first value of individual list", "Code": "sorted([[1, 'mike'], [1, 'bob']])"}, {"ID": 3008992, "NL Utterance": "replace a string `Abc` in case sensitive way using maketrans", "Code": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))"}, {"ID": 8519599, "NL Utterance": "dictionary `d` to string, custom format", "Code": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])"}, {"ID": 22733642, "NL Utterance": null, "Code": "self.writer.writerow([str(s).encode('utf-8') for s in row])"}, {"ID": 4810537, "NL Utterance": "clear terminal screen on windows", "Code": "os.system('cls')"}, {"ID": 4810537, "NL Utterance": "clear the terminal screen in Linux", "Code": "os.system('clear')"}, {"ID": 533398, "NL Utterance": "execute external commands/script `your_own_script` with csh instead of bash", "Code": "os.system('tcsh your_own_script')"}, {"ID": 533398, "NL Utterance": "execute command 'echo $0' in Z shell", "Code": "os.system(\"zsh -c 'echo $0'\")"}, {"ID": 10592674, "NL Utterance": "update a list `l1` dictionaries with a key `count` and value from list `l2`", "Code": "[dict(d, count=n) for d, n in zip(l1, l2)]"}, {"ID": 14180866, "NL Utterance": "create a list with the sum of respective elements of the tuples of list `l`", "Code": "[sum(x) for x in zip(*l)]"}, {"ID": 14180866, "NL Utterance": "sum each value in a list `l` of tuples", "Code": "map(sum, zip(*l))"}, {"ID": 21778118, "NL Utterance": "count the number of non-nan elements in a numpy ndarray matrix `data`", "Code": "np.count_nonzero(~np.isnan(data))"}, {"ID": 31676133, "NL Utterance": "Convert each list in list `main_list` into a tuple", "Code": "map(list, zip(*main_list))"}, {"ID": 11336548, "NL Utterance": "django get the value of key 'title' from POST request `request` if exists, else return empty string ''", "Code": "request.POST.get('title', '')"}, {"ID": 18351951, "NL Utterance": "check if string `test.mp3` ends with one of the strings from a tuple `('.mp3', '.avi')`", "Code": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))"}, {"ID": 234512, "NL Utterance": "split a string 's' by space while ignoring spaces within square braces and quotes.", "Code": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)"}, {"ID": 20477190, "NL Utterance": "get biggest 3 values from each column of the pandas dataframe `data`", "Code": "data.apply(lambda x: sorted(x, 3))"}, {"ID": 30405804, "NL Utterance": "permanently set the current directory to the 'C:/Users/Name/Desktop'", "Code": "os.chdir('C:/Users/Name/Desktop')"}, {"ID": 15043326, "NL Utterance": "get all characters between two `$` characters in string `string`", "Code": "re.findall('\\\\$([^$]*)\\\\$', string)"}, {"ID": 15043326, "NL Utterance": "getting the string between 2 '$' characters in '$sin (x)$ is an function of x'", "Code": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')"}, {"ID": 12772057, "NL Utterance": "Format a date object `str_data` into iso fomrat", "Code": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()"}, {"ID": 2111163, "NL Utterance": "get element at index 0 of first row and element at index 1 of second row in array `A`", "Code": "A[[0, 1], [0, 1]]"}, {"ID": 2111163, "NL Utterance": "subset numpy array `a` by column and row, returning the values from the first row, first column and the second row, second column and the third row, first column.", "Code": "a[np.arange(3), (0, 1, 0)]"}, {"ID": 14743454, "NL Utterance": "Get a list of all keys from dictionary `dictA` where the number of occurrences of value `duck` in that key is more than `1`", "Code": "[k for k, v in dictA.items() if v.count('duck') > 1]"}, {"ID": 15650538, "NL Utterance": "Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)", "Code": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]"}, {"ID": 3582601, "NL Utterance": "get an element at index `[1,1]`in a numpy array `arr`", "Code": "print(arr[1, 1])"}, {"ID": 15282189, "NL Utterance": "Set colorbar range from `0` to `15` for pyplot object `quadmesh` in matplotlib", "Code": "quadmesh.set_clim(vmin=0, vmax=15)"}, {"ID": 3518778, "NL Utterance": "read csv file 'my_file.csv' into numpy array", "Code": "my_data = genfromtxt('my_file.csv', delimiter=',')"}, {"ID": 3518778, "NL Utterance": "read csv file 'myfile.csv' into array", "Code": "df = pd.read_csv('myfile.csv', sep=',', header=None)"}, {"ID": 3518778, "NL Utterance": "read csv file 'myfile.csv' into array", "Code": "np.genfromtxt('myfile.csv', delimiter=',')"}, {"ID": 3518778, "NL Utterance": "read csv file 'myfile.csv' into array", "Code": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)"}, {"ID": 11833266, "NL Utterance": "read the first line of a string `my_string`", "Code": "my_string.splitlines()[0]"}, {"ID": 11833266, "NL Utterance": null, "Code": "my_string.split('\\n', 1)[0]"}, {"ID": 11811392, "NL Utterance": "generate a list from a pandas dataframe `df` with the column name and column values", "Code": "df.values.tolist()"}, {"ID": 3878555, "NL Utterance": "Replace repeated instances of a character '*' with a single instance in a string 'text'", "Code": "re.sub('\\\\*\\\\*+', '*', text)"}, {"ID": 3878555, "NL Utterance": "replace repeated instances of \"*\" with a single instance of \"*\"", "Code": "re.sub('\\\\*+', '*', text)"}, {"ID": 15334783, "NL Utterance": "multiply values of dictionary `dict` with their respective values in dictionary `dict2`", "Code": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)"}, {"ID": 2030053, "NL Utterance": "Get a random string of length `length`", "Code": "return ''.join(random.choice(string.lowercase) for i in range(length))"}, {"ID": 4581646, "NL Utterance": "Get total number of values in a nested dictionary `food_colors`", "Code": "sum(len(x) for x in list(food_colors.values()))"}, {"ID": 4581646, "NL Utterance": "count all elements in a nested dictionary `food_colors`", "Code": "sum(len(v) for v in food_colors.values())"}, {"ID": 1790520, "NL Utterance": "apply logical operator 'AND' to all elements in list `a_list`", "Code": "all(a_list)"}, {"ID": 41083229, "NL Utterance": "removing vowel characters 'aeiouAEIOU' from string `text`", "Code": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')"}, {"ID": 16418415, "NL Utterance": "Divide elements in list `a` from elements at the same index in list `b`", "Code": "[(x / y) for x, y in zip(a, b)]"}, {"ID": 6018340, "NL Utterance": "match regex 'abc(de)fg(123)' on string 'abcdefg123 and again abcdefg123'", "Code": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')"}, {"ID": 18137341, "NL Utterance": "apply function `log2` to the grouped values by 'type' in dataframe `df`", "Code": "df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))"}, {"ID": 32792874, "NL Utterance": "get geys of dictionary `my_dict` that contain any values from list `lst`", "Code": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]"}, {"ID": 32792874, "NL Utterance": "get list of keys in dictionary `my_dict` whose values contain values from list `lst`", "Code": "[key for item in lst for key, value in list(my_dict.items()) if item in value]"}, {"ID": 40313203, "NL Utterance": "Sum elements of tuple `b` to their respective elements of each tuple in list `a`", "Code": "c = [[(i + j) for i, j in zip(e, b)] for e in a]"}, {"ID": 7287996, "NL Utterance": "get the common prefix from comparing two absolute paths '/usr/var' and '/usr/var2/log'", "Code": "os.path.commonprefix(['/usr/var', '/usr/var2/log'])"}, {"ID": 7287996, "NL Utterance": "get relative path of path '/usr/var' regarding path '/usr/var/log/'", "Code": "print(os.path.relpath('/usr/var/log/', '/usr/var'))"}, {"ID": 13167391, "NL Utterance": "filter dataframe `grouped` where the length of each group `x` is bigger than 1", "Code": "grouped.filter(lambda x: len(x) > 1)"}, {"ID": 1217251, "NL Utterance": "sort dictionary of lists `myDict` by the third item in each list", "Code": "sorted(list(myDict.items()), key=lambda e: e[1][2])"}, {"ID": 11921649, "NL Utterance": "Format string `hello {name}, how are you {name}, welcome {name}` to be interspersed by `name` three times, specifying the value as `john` only once", "Code": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')"}, {"ID": 30009948, "NL Utterance": "reorder indexed rows `['Z', 'C', 'A']` based on a list in pandas data frame `df`", "Code": "df.reindex(['Z', 'C', 'A'])"}, {"ID": 5251663, "NL Utterance": "check if any values in a list `input_list` is a list", "Code": "any(isinstance(el, list) for el in input_list)"}, {"ID": 1712227, "NL Utterance": "get the size of list `items`", "Code": "len(items)"}, {"ID": 1712227, "NL Utterance": "get the size of a list `[1,2,3]`", "Code": "len([1, 2, 3])"}, {"ID": 1712227, "NL Utterance": "get the size of object `items`", "Code": "items.__len__()"}, {"ID": 1712227, "NL Utterance": "function to get the size of object", "Code": "len()"}, {"ID": 1712227, "NL Utterance": "get the size of list `s`", "Code": "len(s)"}, {"ID": 25817930, "NL Utterance": "sort each row in a pandas dataframe `df` in descending order", "Code": "df.sort(axis=1, ascending=False)"}, {"ID": 25817930, "NL Utterance": null, "Code": "df.sort(df.columns, axis=1, ascending=False)"}, {"ID": 17679089, "NL Utterance": "get count of rows in each series grouped by column 'col5' and column 'col2' of dataframe `df`", "Code": "df.groupby(['col5', 'col2']).size().groupby(level=1).max()"}, {"ID": 4877844, "NL Utterance": "check if string 'x' is  in list `['x', 'd', 'a', 's', 'd', 's']`", "Code": "'x' in ['x', 'd', 'a', 's', 'd', 's']"}, {"ID": 15411107, "NL Utterance": "Delete an item with key \"key\" from `mydict`", "Code": "mydict.pop('key', None)"}, {"ID": 15411107, "NL Utterance": "Delete an item with key `key` from `mydict`", "Code": "del mydict[key]"}, {"ID": 15411107, "NL Utterance": "Delete an item with key `key` from `mydict`", "Code": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass"}, {"ID": 5373474, "NL Utterance": "specify multiple positional arguments with argparse", "Code": "parser.add_argument('input', nargs='+')"}, {"ID": 6027690, "NL Utterance": "Plot using the color code `#112233` in matplotlib pyplot", "Code": "pyplot.plot(x, y, color='#112233')"}, {"ID": 753052, "NL Utterance": "strip html from strings", "Code": "re.sub('<[^<]+?>', '', text)"}, {"ID": 41923906, "NL Utterance": "align values in array `b` to the order of corresponding values in array `a`", "Code": "a[np.in1d(a, b)]"}, {"ID": 11009155, "NL Utterance": "split string \"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\" on the first occurrence of delimiter '='", "Code": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)"}, {"ID": 7351270, "NL Utterance": "print numbers in list `list` with precision of 3 decimal places", "Code": "print('[%s]' % ', '.join('%.3f' % val for val in list))"}, {"ID": 7351270, "NL Utterance": "format print output of list of floats `l` to print only up to 3 decimal points", "Code": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')"}, {"ID": 7351270, "NL Utterance": "print a list of floating numbers `l` using string formatting", "Code": "print([('%5.3f' % val) for val in l])"}, {"ID": 12280143, "NL Utterance": "Change the current directory one level up", "Code": "os.chdir('..')"}, {"ID": 6740865, "NL Utterance": "print a unicode string `text`", "Code": "print(text.encode('windows-1252'))"}, {"ID": 8751653, "NL Utterance": "convert string representation `s2` of binary string rep of integer to floating point number", "Code": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]"}, {"ID": 8751653, "NL Utterance": "convert a binary '-0b1110' to a float number", "Code": "float(int('-0b1110', 0))"}, {"ID": 8751653, "NL Utterance": "convert a binary `b8` to a float number", "Code": "struct.unpack('d', b8)[0]"}, {"ID": 31029560, "NL Utterance": "plot a bar graph from the column 'color' in the DataFrame 'df'", "Code": "df.colour.value_counts().plot(kind='bar')"}, {"ID": 31029560, "NL Utterance": "plot categorical data in series `df` with kind `bar` using pandas and matplotlib", "Code": "df.groupby('colour').size().plot(kind='bar')"}, {"ID": 11354544, "NL Utterance": "strip and split each line `line` on white spaces", "Code": "line.strip().split(' ')"}, {"ID": 22128218, "NL Utterance": "apply functions `mean` and `std` to each column in dataframe `df`", "Code": "df.groupby(lambda idx: 0).agg(['mean', 'std'])"}, {"ID": 40208429, "NL Utterance": "sort dictionary `tag_weight` in reverse order by values cast to integers", "Code": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)"}, {"ID": 27758657, "NL Utterance": "find the largest integer less than `x`", "Code": "int(math.ceil(x)) - 1"}, {"ID": 9573244, "NL Utterance": "check if the string `myString` is empty", "Code": "if (not myString):\n    pass"}, {"ID": 9573244, "NL Utterance": "check if string `some_string` is empty", "Code": "if (not some_string):\n    pass"}, {"ID": 9573244, "NL Utterance": "check if string `my_string` is empty", "Code": "if (not my_string):\n    pass"}, {"ID": 9573244, "NL Utterance": "check if string `my_string` is empty", "Code": "if some_string:\n    pass"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `d` in sorted order", "Code": "it = iter(sorted(d.items()))"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `d` in sorted order", "Code": "for (key, value) in sorted(d.items()):\n    pass"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `dict` in sorted order", "Code": "return sorted(dict.items())"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `dict` in sorted order", "Code": "return iter(sorted(dict.items()))"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `foo` in sorted order", "Code": "for (k, v) in sorted(foo.items()):\n    pass"}, {"ID": 364519, "NL Utterance": "iterate over a dictionary `foo` sorted by the key", "Code": "for k in sorted(foo.keys()):\n    pass"}, {"ID": 34438901, "NL Utterance": "assign the index of the last occurence of `x` in list `s` to the variable `last`", "Code": "last = len(s) - s[::-1].index(x) - 1"}, {"ID": 5618878, "NL Utterance": "concatenating values in `list1` to a string", "Code": "str1 = ''.join(list1)"}, {"ID": 5618878, "NL Utterance": "concatenating values in list `L` to a string, separate by space", "Code": "' '.join((str(x) for x in L))"}, {"ID": 5618878, "NL Utterance": "concatenating values in `list1` to a string", "Code": "str1 = ''.join((str(e) for e in list1))"}, {"ID": 5618878, "NL Utterance": "concatenating values in list `L` to a string", "Code": "makeitastring = ''.join(map(str, L))"}, {"ID": 16096754, "NL Utterance": "remove None value from list `L`", "Code": "[x for x in L if x is not None]"}, {"ID": 1058712, "NL Utterance": "select a random element from array `[1, 2, 3]`", "Code": "random.choice([1, 2, 3])"}, {"ID": 4230000, "NL Utterance": "creating a 5x6 matrix filled with `None` and save it as `x`", "Code": "x = [[None for _ in range(5)] for _ in range(6)]"}, {"ID": 14262654, "NL Utterance": "create a new 2D array with 2 random rows from array `A`", "Code": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]"}, {"ID": 14262654, "NL Utterance": "create a new 2 dimensional array containing two random rows from array `A`", "Code": "A[(np.random.randint(A.shape[0], size=2)), :]"}, {"ID": 17438906, "NL Utterance": "combining rows in pandas by adding their values", "Code": "df.groupby(df.index).sum()"}, {"ID": 14853243, "NL Utterance": "find all `owl:Class` tags by parsing xml with namespace", "Code": "root.findall('{http://www.w3.org/2002/07/owl#}Class')"}, {"ID": 1957273, "NL Utterance": "generate a random string of length `x`  containing lower cased ASCII letters", "Code": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))"}, {"ID": 24722212, "NL Utterance": "add a path `/path/to/2014_07_13_test` to system path", "Code": "sys.path.append('/path/to/2014_07_13_test')"}, {"ID": 31818050, "NL Utterance": "round number `x` to nearest integer", "Code": "int(round(x))"}, {"ID": 31818050, "NL Utterance": "round number `h` to nearest integer", "Code": "h = int(round(h))"}, {"ID": 31818050, "NL Utterance": "round number 32.268907563 up to 3 decimal points", "Code": "round(32.268907563, 3)"}, {"ID": 31818050, "NL Utterance": "round number `value` up to `significantDigit` decimal places", "Code": "round(value, significantDigit)"}, {"ID": 31818050, "NL Utterance": "round number 1.0005 up to 3 decimal places", "Code": "round(1.0005, 3)"}, {"ID": 31818050, "NL Utterance": "round number 2.0005 up to 3 decimal places", "Code": "round(2.0005, 3)"}, {"ID": 31818050, "NL Utterance": "round number 3.0005 up to 3 decimal places", "Code": "round(3.0005, 3)"}, {"ID": 31818050, "NL Utterance": "round number 4.0005 up to 3 decimal places", "Code": "round(4.0005, 3)"}, {"ID": 31818050, "NL Utterance": "round number 8.005 up to 2 decimal places", "Code": "round(8.005, 2)"}, {"ID": 31818050, "NL Utterance": "round number 7.005 up to 2 decimal places", "Code": "round(7.005, 2)"}, {"ID": 31818050, "NL Utterance": "round number 6.005 up to 2 decimal places", "Code": "round(6.005, 2)"}, {"ID": 31818050, "NL Utterance": "round number 1.005 up to 2 decimal places", "Code": "round(1.005, 2)"}, {"ID": 30357276, "NL Utterance": "fill missing value in one column 'Cat1' with the value of another column 'Cat2'", "Code": "df['Cat1'].fillna(df['Cat2'])"}, {"ID": 12843099, "NL Utterance": "convert the argument `date` with string formatting in logging", "Code": "logging.info('date=%s', date)"}, {"ID": 12843099, "NL Utterance": "Log message of level 'info' with value of `date` in the message", "Code": "logging.info('date={}'.format(date))"}, {"ID": 9224385, "NL Utterance": "convert values in dictionary `d` into integers", "Code": "{k: int(v) for k, v in d.items()}"}, {"ID": 11280536, "NL Utterance": "sum elements at the same index of each list in list `lists`", "Code": "map(sum, zip(*lists))"}, {"ID": 10824319, "NL Utterance": "Convert a string `s` containing hex bytes to a hex string", "Code": "s.decode('hex')"}, {"ID": 10824319, "NL Utterance": "convert a string `s` containing hex bytes to a hex string", "Code": "binascii.a2b_hex(s)"}, {"ID": 40851413, "NL Utterance": "send data 'HTTP/1.0 200 OK\\r\\n\\r\\n' to socket `connection`", "Code": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')"}, {"ID": 40851413, "NL Utterance": "send data 'HTTP/1.0 200 OK\\r\\n\\r\\n' to socket `connection`", "Code": "connection.send('HTTP/1.0 200 OK\\r\\n\\r\\n')"}, {"ID": 13842088, "NL Utterance": "set the value of cell `['x']['C']` equal to 10 in dataframe `df`", "Code": "df['x']['C'] = 10"}, {"ID": 18524112, "NL Utterance": "normalize the dataframe `df` along the rows", "Code": "np.sqrt(np.square(df).sum(axis=1))"}, {"ID": 22741068, "NL Utterance": "remove identical items from list `my_list` and sort it alphabetically", "Code": "sorted(set(my_list))"}, {"ID": 11530799, "NL Utterance": "find the index of the element with the maximum value from a list 'a'.", "Code": "max(enumerate(a), key=lambda x: x[1])[0]"}, {"ID": 17117912, "NL Utterance": "create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`", "Code": "[d['Name'] for d in thisismylist]"}, {"ID": 17117912, "NL Utterance": "create a list of tuples with the values of keys 'Name' and 'Age' from each dictionary `d` in the list `thisismylist`", "Code": "[(d['Name'], d['Age']) for d in thisismylist]"}, {"ID": 9354127, "NL Utterance": "grab one random item from a database `model` in django/postgresql", "Code": "model.objects.all().order_by('?')[0]"}, {"ID": 3781851, "NL Utterance": "run python script 'script2.py' from another python script, passing in 1 as an argument", "Code": "os.system('script2.py 1')"}, {"ID": 8383213, "NL Utterance": "python regex for hyphenated words in `text`", "Code": "re.findall('\\\\w+(?:-\\\\w+)+', text)"}, {"ID": 27146262, "NL Utterance": "create variable key/value pairs with argparse", "Code": "parser.add_argument('--conf', nargs=2, action='append')"}, {"ID": 6494508, "NL Utterance": "Get `3` unique items from a list", "Code": "random.sample(list(range(1, 16)), 3)"}, {"ID": 1082413, "NL Utterance": "sort list `strings` in alphabetical order based on the letter after percent character `%` in each element", "Code": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))"}, {"ID": 1082413, "NL Utterance": "sort a list of strings `strings` based on regex match", "Code": "strings.sort(key=lambda str: re.sub('.*%', '', str))"}, {"ID": 7745562, "NL Utterance": "Create list `listy` containing 3 empty lists", "Code": "listy = [[] for i in range(3)]"}, {"ID": 12496531, "NL Utterance": "sort numpy float array `A` column by column", "Code": "A = np.array(sorted(A, key=tuple))"}, {"ID": 18649884, "NL Utterance": "Get a list from two strings `12345` and `ab` with values as each character concatenated", "Code": "[(x + y) for x in '12345' for y in 'ab']"}, {"ID": 761804, "NL Utterance": "trim string \" Hello \"", "Code": "' Hello '.strip()"}, {"ID": 761804, "NL Utterance": "trim string `myString `", "Code": "myString.strip()"}, {"ID": 761804, "NL Utterance": "Trimming a string \" Hello \"", "Code": "' Hello '.strip()"}, {"ID": 761804, "NL Utterance": "Trimming a string \" Hello\"", "Code": "' Hello'.strip()"}, {"ID": 761804, "NL Utterance": "Trimming a string \"Bob has a cat\"", "Code": "'Bob has a cat'.strip()"}, {"ID": 761804, "NL Utterance": "Trimming a string \"          Hello        \"", "Code": "'          Hello        '.strip()"}, {"ID": 761804, "NL Utterance": "Trimming a string `str`", "Code": "str.strip()"}, {"ID": 761804, "NL Utterance": "Trimming \"\\n\" from string `myString`", "Code": "myString.strip('\\n')"}, {"ID": 761804, "NL Utterance": "left trimming \"\\n\\r\" from string `myString`", "Code": "myString.lstrip('\\n\\r')"}, {"ID": 761804, "NL Utterance": "right trimming \"\\n\\t\" from string `myString`", "Code": "myString.rstrip('\\n\\t')"}, {"ID": 761804, "NL Utterance": "Trimming a string \"  Hello\\n\" by space", "Code": "'  Hello\\n'.strip(' ')"}, {"ID": 9376384, "NL Utterance": "sort a list of tuples 'unsorted' based on two elements, second and third", "Code": "sorted(unsorted, key=lambda element: (element[1], element[2]))"}, {"ID": 17577727, "NL Utterance": "decode string `content` to UTF-8 code", "Code": "print(content.decode('utf8'))"}, {"ID": 31767173, "NL Utterance": "find the index of the maximum value in the array `arr` where the boolean condition in array `cond` is true", "Code": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)"}, {"ID": 42100344, "NL Utterance": "convert a dataframe `df`'s column `ID` into datetime, after removing the first and last 3 letters", "Code": "pd.to_datetime(df.ID.str[1:-3])"}, {"ID": 30190459, "NL Utterance": "read CSV file 'my.csv' into a dataframe `df` with datatype of float for column 'my_column' considering character 'n/a' as NaN value", "Code": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])"}, {"ID": 30190459, "NL Utterance": "convert nan values to \u2018n/a\u2019 while reading rows from a csv `read_csv` with pandas", "Code": "df = pd.read_csv('my.csv', na_values=['n/a'])"}, {"ID": 798854, "NL Utterance": "create a list containing all cartesian products of elements in list `a`", "Code": "list(itertools.product(*a))"}, {"ID": 15886340, "NL Utterance": "remove uppercased characters in string `s`", "Code": "re.sub('[^A-Z]', '', s)"}, {"ID": 5882405, "NL Utterance": "convert string '2011221' into a DateTime object using format '%Y%W%w'", "Code": "datetime.strptime('2011221', '%Y%W%w')"}, {"ID": 16883447, "NL Utterance": "read file 'myfile' using encoding 'iso-8859-1'", "Code": "codecs.open('myfile', 'r', 'iso-8859-1').read()"}, {"ID": 1222677, "NL Utterance": "create a list containing elements from list `list` that are predicate to function `f`", "Code": "[f(x) for x in list]"}, {"ID": 41807864, "NL Utterance": "regex matching 5-digit substrings not enclosed with digits in `s`", "Code": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)"}, {"ID": 2655956, "NL Utterance": "create a list containing elements of list `a` if the sum of the element is greater than 10", "Code": "[item for item in a if sum(item) > 10]"}, {"ID": 3887469, "NL Utterance": "convert currency string `dollars` to decimal `cents_int`", "Code": "cents_int = int(round(float(dollars.strip('$')) * 100))"}, {"ID": 39532974, "NL Utterance": "remove letters from string `example_line` if the letter exist in list `bad_chars`", "Code": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]"}, {"ID": 2972212, "NL Utterance": "Creating an empty list `l`", "Code": "l = []"}, {"ID": 2972212, "NL Utterance": "Creating an empty list `l`", "Code": "l = list()"}, {"ID": 2972212, "NL Utterance": "Creating an empty list", "Code": "list()"}, {"ID": 2972212, "NL Utterance": "Creating an empty list", "Code": "[]"}, {"ID": 13022385, "NL Utterance": "properly quit a program", "Code": "sys.exit(0)"}, {"ID": 5254445, "NL Utterance": "add string `-` in `4th` position of a string `s`", "Code": "s[:4] + '-' + s[4:]"}, {"ID": 11219949, "NL Utterance": "append 3 lists in one list", "Code": "[[] for i in range(3)]"}, {"ID": 11219949, "NL Utterance": "Initialize a list of empty lists `a` of size 3", "Code": "a = [[] for i in range(3)]"}, {"ID": 20837786, "NL Utterance": "request URL `url` using http header `{'referer': my_referer}`", "Code": "requests.get(url, headers={'referer': my_referer})"}, {"ID": 2849286, "NL Utterance": "set the y axis range to `0, 1000` in subplot using pylab", "Code": "pylab.ylim([0, 1000])"}, {"ID": 29034928, "NL Utterance": "convert a column of list in series `s` to dummies", "Code": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)"}, {"ID": 3428769, "NL Utterance": null, "Code": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))"}, {"ID": 2636755, "NL Utterance": "convert a hex string `x` to string", "Code": "y = str(int(x, 16))"}, {"ID": 354038, "NL Utterance": "check if string `a` is an integer", "Code": "a.isdigit()"}, {"ID": 354038, "NL Utterance": "function to check if a string is a number", "Code": "isdigit()"}, {"ID": 354038, "NL Utterance": "check if string `b` is a number", "Code": "b.isdigit()"}, {"ID": 18366797, "NL Utterance": "pandas read comma-separated CSV file `s` and skip commented lines starting with '#'", "Code": "pd.read_csv(StringIO(s), sep=',', comment='#')"}, {"ID": 12604909, "NL Utterance": "pandas: change all the values of a column 'Date' into \"int(str(x)[-4:])\"", "Code": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))"}, {"ID": 4362586, "NL Utterance": "sum a list of numbers `list_of_nums`", "Code": "sum(list_of_nums)"}, {"ID": 6561653, "NL Utterance": "Get an item from a list of dictionary `lst` which has maximum value in the key `score` using lambda function", "Code": "max(lst, key=lambda x: x['score'])"}, {"ID": 3774571, "NL Utterance": "BeautifulSoup find all tags with attribute 'name' equal to 'description'", "Code": "soup.findAll(attrs={'name': 'description'})"}, {"ID": 39268928, "NL Utterance": "remove all spaces from a string converted from dictionary `{'a': 1, 'b': 'as df'}`", "Code": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')"}, {"ID": 39268928, "NL Utterance": "convert dictionary `dict` into a string formatted object", "Code": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'"}, {"ID": 13655392, "NL Utterance": "concatenate items from list `parts` into a string starting from the second element", "Code": "\"\"\"\"\"\".join(parts[1:])"}, {"ID": 13655392, "NL Utterance": "insert a character ',' into a string in front of '+' character in second part of the string", "Code": "\"\"\",+\"\"\".join(c.rsplit('+', 1))"}, {"ID": 18397805, "NL Utterance": "delete all rows in a numpy array `a` where any value in a row is zero `0`", "Code": "a[np.all(a != 0, axis=1)]"}, {"ID": 8199398, "NL Utterance": "extract only alphabetic characters from a string `your string`", "Code": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))"}, {"ID": 8199398, "NL Utterance": "Extract only characters from a string as a list", "Code": "re.split('[^a-zA-Z]*', 'your string')"}, {"ID": 2151517, "NL Utterance": "get the union set from list of lists `results_list`", "Code": "results_union = set().union(*results_list)"}, {"ID": 2151517, "NL Utterance": "get the union of values in list of lists `result_list`", "Code": "return list(set(itertools.chain(*result_list)))"}, {"ID": 36190533, "NL Utterance": "check if a numpy array `a1` contains any element of another array `a2`", "Code": "np.any(np.in1d(a1, a2))"}, {"ID": 4324790, "NL Utterance": "removing control characters from a string `s`", "Code": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')"}, {"ID": 28767642, "NL Utterance": "Compare if each value in list `a` is less than respective index value in list `b`", "Code": "all(i < j for i, j in zip(a, b))"}, {"ID": 21350605, "NL Utterance": "python selenium click on button '.button.c_button.s_button'", "Code": "driver.find_element_by_css_selector('.button.c_button.s_button').click()"}, {"ID": 21350605, "NL Utterance": null, "Code": "driver.find_element_by_css_selector('.button .c_button .s_button').click()"}, {"ID": 6278847, "NL Utterance": "kill a process `make.exe` from python script on windows", "Code": "os.system('taskkill /im make.exe')"}, {"ID": 4552380, "NL Utterance": "SQLAlchemy select records of columns of table `my_table` in addition to current date column", "Code": "print(select([my_table, func.current_date()]).execute())"}, {"ID": 4574509, "NL Utterance": "remove duplicate characters from string 'ffffffbbbbbbbqqq'", "Code": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')"}, {"ID": 40196941, "NL Utterance": "remove periods inbetween capital letters that aren't immediately preceeded by word character(s) in a string `s` using regular expressions", "Code": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)"}, {"ID": 6372228, "NL Utterance": "Get a list of strings `split_text` with fixed chunk size `n` from a string `the_list`", "Code": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]"}, {"ID": 4338032, "NL Utterance": "match string 'this is my string' with regex '\\\\b(this|string)\\\\b'\r\nthen replace it with regex '<markup>\\\\1</markup>'", "Code": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')"}, {"ID": 11361985, "NL Utterance": "output data of the first 7 columns of Pandas dataframe", "Code": "pandas.set_option('display.max_columns', 7)"}, {"ID": 11361985, "NL Utterance": "Display maximum output data of columns in dataframe `pandas` that will fit into the screen", "Code": "pandas.set_option('display.max_columns', None)"}, {"ID": 12307099, "NL Utterance": "set the value in column 'B' to NaN if the corresponding value in column 'A' is equal to 0 in pandas dataframe `df`", "Code": "df.ix[df.A == 0, 'B'] = np.nan"}, {"ID": 11406091, "NL Utterance": "Selecting Element \"//li/label/input\" followed by text \"polishpottery\" with Selenium WebDriver `driver`", "Code": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")"}, {"ID": 861190, "NL Utterance": "Sort a list of dictionaries `mylist` by keys \"weight\" and \"factor\"", "Code": "mylist.sort(key=operator.itemgetter('weight', 'factor'))"}, {"ID": 861190, "NL Utterance": "ordering a list of dictionaries `mylist` by elements 'weight' and 'factor'", "Code": "mylist.sort(key=lambda d: (d['weight'], d['factor']))"}, {"ID": 14986218, "NL Utterance": "Convert a list of lists `lol` to a dictionary with key as second value of a list and value as list itself", "Code": "{x[1]: x for x in lol}"}, {"ID": 4690094, "NL Utterance": "sort keys of dictionary 'd' based on their values", "Code": "sorted(d, key=lambda k: d[k][1])"}, {"ID": 2742784, "NL Utterance": "round 123 to 100", "Code": "int(round(123, -2))"}, {"ID": 1348026, "NL Utterance": "create file 'x' if file 'x' does not exist", "Code": "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)"}, {"ID": 40535203, "NL Utterance": "get a list of last trailing words from another list  of strings`Original_List`", "Code": "new_list = [x.split()[-1] for x in Original_List]"}, {"ID": 931092, "NL Utterance": "Reverse a string 'hello world'", "Code": "'hello world'[::(-1)]"}, {"ID": 931092, "NL Utterance": "Reverse list `s`", "Code": "s[::(-1)]"}, {"ID": 931092, "NL Utterance": "Reverse string 'foo'", "Code": "''.join(reversed('foo'))"}, {"ID": 931092, "NL Utterance": "Reverse a string `string`", "Code": "''.join(reversed(string))"}, {"ID": 931092, "NL Utterance": "Reverse a string \"foo\"", "Code": "'foo'[::(-1)]"}, {"ID": 931092, "NL Utterance": "Reverse a string `a_string`", "Code": "a_string[::(-1)]"}, {"ID": 931092, "NL Utterance": "Reverse a string `a_string`", "Code": "def reversed_string(a_string):\n    return a_string[::(-1)]"}, {"ID": 931092, "NL Utterance": "Reverse a string `s`", "Code": "''.join(reversed(s))"}, {"ID": 11064917, "NL Utterance": "generate a string of numbers separated by comma which is divisible by `4` with remainder `1` or `2`.", "Code": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))"}, {"ID": 33824334, "NL Utterance": "convert list `lst` of key, value pairs into a dictionary", "Code": "dict([(e[0], int(e[1])) for e in lst])"}, {"ID": 10213994, "NL Utterance": "sorting a list of tuples `list_of_tuples` where each tuple is reversed", "Code": "sorted(list_of_tuples, key=lambda tup: tup[::-1])"}, {"ID": 10213994, "NL Utterance": "sorting a list of tuples `list_of_tuples` by second key", "Code": "sorted(list_of_tuples, key=lambda tup: tup[1])"}, {"ID": 9236926, "NL Utterance": "Concatenating two one-dimensional NumPy arrays 'a' and 'b'.", "Code": "numpy.concatenate([a, b])"}, {"ID": 899103, "NL Utterance": "writing items in list `thelist` to file `thefile`", "Code": "for item in thelist:\n    thefile.write(('%s\\n' % item))"}, {"ID": 899103, "NL Utterance": "writing items in list `thelist` to file `thefile`", "Code": "for item in thelist:\n    pass"}, {"ID": 899103, "NL Utterance": "serialize `itemlist` to file `outfile`", "Code": "pickle.dump(itemlist, outfile)"}, {"ID": 899103, "NL Utterance": "writing items in list `itemlist` to file `outfile`", "Code": "outfile.write('\\n'.join(itemlist))"}, {"ID": 2631935, "NL Utterance": "Update a user's name as `Bob Marley` having id `123` in SQLAlchemy", "Code": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})"}, {"ID": 7164679, "NL Utterance": "send cookies `cookie` in a post request to url 'http://wikipedia.org' with the python requests library", "Code": "r = requests.post('http://wikipedia.org', cookies=cookie)"}, {"ID": 14850853, "NL Utterance": "insert directory 'libs' at the 0th index of current directory", "Code": "sys.path.insert(0, 'libs')"}, {"ID": 415511, "NL Utterance": "get current date and time", "Code": "datetime.datetime.now()"}, {"ID": 415511, "NL Utterance": "get current time", "Code": "datetime.datetime.now().time()"}, {"ID": 415511, "NL Utterance": "get current time in pretty format", "Code": "strftime('%Y-%m-%d %H:%M:%S', gmtime())"}, {"ID": 415511, "NL Utterance": "get current time in string format", "Code": "str(datetime.now())"}, {"ID": 415511, "NL Utterance": "get current time", "Code": "datetime.datetime.time(datetime.datetime.now())"}, {"ID": 19819863, "NL Utterance": "convert hex '\\xff' to integer", "Code": "ord('\\xff')"}, {"ID": 37497559, "NL Utterance": "identify duplicated rows in columns 'PplNum' and 'RoomNum' with additional column in dataframe `df`", "Code": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1"}, {"ID": 15940280, "NL Utterance": "get current utc time", "Code": "datetime.utcnow()"}, {"ID": 12845112, "NL Utterance": "move last item of array `a` to the first position", "Code": "a[-1:] + a[:-1]"}, {"ID": 35414625, "NL Utterance": "Convert dataframe `df` to a pivot table using column 'year', 'month', and 'item' as indexes", "Code": "df.set_index(['year', 'month', 'item']).unstack(level=-1)"}, {"ID": 35414625, "NL Utterance": "run a pivot with a multi-index `year` and `month` in a pandas data frame", "Code": "df.pivot_table(values='value', index=['year', 'month'], columns='item')"}, {"ID": 39381222, "NL Utterance": "print a rational number `3/2`", "Code": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')"}, {"ID": 7996940, "NL Utterance": null, "Code": "li1.sort(key=lambda x: not x.startswith('b.'))"}, {"ID": 3476732, "NL Utterance": "iterate backwards from 10 to 0", "Code": "range(10, 0, -1)"}, {"ID": 317413, "NL Utterance": "get value of first child of xml node `name`", "Code": "name[0].firstChild.nodeValue"}, {"ID": 849674, "NL Utterance": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1", "Code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"}, {"ID": 849674, "NL Utterance": "start a new thread for `myfunction` with parameters 'MyStringHere' and 1", "Code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))"}, {"ID": 3989016, "NL Utterance": "get index of the first biggest element in list `a`", "Code": "a.index(max(a))"}, {"ID": 42731970, "NL Utterance": "replace periods `.` that are not followed by periods or spaces with a period and a space `. `", "Code": "re.sub('\\\\.(?=[^ .])', '. ', para)"}, {"ID": 33147992, "NL Utterance": "convert a string `a` of letters embedded in squared brackets into embedded lists", "Code": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]"}, {"ID": 7900882, "NL Utterance": "extract dictionary `d` from list `a` where the value associated with the key 'name' of dictionary `d` is equal to 'pluto'", "Code": "[d for d in a if d['name'] == 'pluto']"}, {"ID": 7900882, "NL Utterance": "extract dictionary from list of dictionaries based on a key's value.", "Code": "[d for d in a if d['name'] == 'pluto']"}, {"ID": 16228248, "NL Utterance": "Retrieve list of values from dictionary 'd'", "Code": "list(d.values())"}, {"ID": 943809, "NL Utterance": "replace occurrences of two whitespaces or more with one whitespace ' ' in string `s`", "Code": "re.sub(' +', ' ', s)"}, {"ID": 14104778, "NL Utterance": "Change the mode of file 'my_script.sh' to permission number 484", "Code": "os.chmod('my_script.sh', 484)"}, {"ID": 30605909, "NL Utterance": "write pandas dataframe `df` to the file 'c:\\\\data\\\\t.csv' without row names", "Code": "df.to_csv('c:\\\\data\\\\t.csv', index=False)"}, {"ID": 18082130, "NL Utterance": "remove all words which contains number from a string `words` using regex", "Code": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()"}, {"ID": 1946181, "NL Utterance": "control the keyboard and mouse with dogtail in linux", "Code": "dogtail.rawinput.click(100, 100)"}, {"ID": 1101508, "NL Utterance": "parse date string '2009/05/13 19:19:30 -0400' using format '%Y/%m/%d %H:%M:%S %z'", "Code": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')"}, {"ID": 2674391, "NL Utterance": "Get the position of a regex match for word `is` in a string `String`", "Code": "re.search('\\\\bis\\\\b', String).start()"}, {"ID": 2674391, "NL Utterance": "Get the position of a regex match `is` in a string `String`", "Code": "re.search('is', String).start()"}, {"ID": 2233917, "NL Utterance": "input an integer tuple from user", "Code": "tuple(map(int, input().split(',')))"}, {"ID": 2233917, "NL Utterance": "input a tuple of integers from user", "Code": "tuple(int(x.strip()) for x in input().split(','))"}, {"ID": 13093727, "NL Utterance": "replace unicode character '\\u2022' in string 'str' with '*'", "Code": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')"}, {"ID": 13093727, "NL Utterance": "replace unicode characters ''\\u2022' in string 'str' with '*'", "Code": "str.decode('utf-8').replace('\\u2022', '*')"}, {"ID": 18200052, "NL Utterance": "convert ndarray with shape 3x3 to array", "Code": "np.zeros((3, 3)).ravel()"}, {"ID": 1854, "NL Utterance": "get os name", "Code": "import platform\nplatform.system()"}, {"ID": 1854, "NL Utterance": "get os version", "Code": "import platform\nplatform.release()"}, {"ID": 1854, "NL Utterance": "get the name of the OS", "Code": "print(os.name)"}, {"ID": 11791568, "NL Utterance": null, "Code": "[x for x in my_list if not x.startswith('#')]"}, {"ID": 2847272, "NL Utterance": "replace fields delimited by braces {} in string \"Day old bread, 50% sale {0}\" with string 'today'", "Code": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')"}, {"ID": 15148684, "NL Utterance": "Get a minimum value from a list of tuples `list` with values of type `string` and `float` with nan", "Code": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])"}, {"ID": 2153444, "NL Utterance": "Find average of a nested list `a`", "Code": "a = [(sum(x) / len(x)) for x in zip(*a)]"}, {"ID": 17558552, "NL Utterance": "Log info message 'Log message' with attributes `{'app_name': 'myapp'}`", "Code": "logging.info('Log message', extra={'app_name': 'myapp'})"}, {"ID": 21771133, "NL Utterance": "replace values of dataframe `df` with True if numeric", "Code": "df.applymap(lambda x: isinstance(x, (int, float)))"}, {"ID": 39129846, "NL Utterance": "sort list `l` based on its elements' digits", "Code": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))"}, {"ID": 8009176, "NL Utterance": "close the window in tkinter", "Code": "self.root.destroy()"}, {"ID": 36454494, "NL Utterance": "get mean of columns `2, 5, 6, 7, 8` for all rows in dataframe `df`", "Code": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)"}, {"ID": 12224778, "NL Utterance": "filter dataframe `df` by sub-level index '0630' in pandas", "Code": "df[df.index.map(lambda x: x[1].endswith('0630'))]"}, {"ID": 4921038, "NL Utterance": "flask-sqlalchemy delete row `page`", "Code": "db.session.delete(page)"}, {"ID": 2783079, "NL Utterance": "Format a string `u'Andr\\xc3\\xa9'` that has unicode characters", "Code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')"}, {"ID": 2783079, "NL Utterance": "convert a unicode 'Andr\\xc3\\xa9' to a string", "Code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')"}, {"ID": 120656, "NL Utterance": "list all files in directory \".\"", "Code": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass"}, {"ID": 120656, "NL Utterance": "list all files in directory `path`", "Code": "os.listdir(path)"}, {"ID": 11816315, "NL Utterance": "rename file `dir` to `dir` + '!'", "Code": "os.rename(dir, dir + '!')"}, {"ID": 3258573, "NL Utterance": "Insert a character `-` after every two elements in a string `s`", "Code": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))"}, {"ID": 3241594, "NL Utterance": "printing numbers rounding up to third decimal place", "Code": "print('%.3f' % 3.1415)"}, {"ID": 22296496, "NL Utterance": "add variable `var` to key 'f' of first element in JSON data `data`", "Code": "data[0]['f'] = var"}, {"ID": 247770, "NL Utterance": "get the path of module `a_module`", "Code": "print(a_module.__file__)"}, {"ID": 247770, "NL Utterance": "get the path of the current python module", "Code": "print(os.getcwd())"}, {"ID": 247770, "NL Utterance": "get the path of the python module `amodule`", "Code": "path = os.path.abspath(amodule.__file__)"}, {"ID": 7026131, "NL Utterance": "fill list `myList` with 4 0's", "Code": "self.myList.extend([0] * (4 - len(self.myList)))"}, {"ID": 22918212, "NL Utterance": "drop duplicate indexes in a pandas data frame `df`", "Code": "df[~df.index.duplicated()]"}, {"ID": 13891559, "NL Utterance": "unpack elements of list `i` as arguments into function `foo`", "Code": "foo(*i)"}, {"ID": 12030074, "NL Utterance": "generate list of numbers in specific format using string formatting precision.", "Code": "[('%.2d' % i) for i in range(16)]"}, {"ID": 3411025, "NL Utterance": "sort dictionary `mydict` in descending order based on the sum of each value in it", "Code": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]"}, {"ID": 3411025, "NL Utterance": "get top `3` items from a dictionary `mydict` with largest sum of values", "Code": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))"}, {"ID": 3847472, "NL Utterance": "get index of character 'b' in list '['a', 'b']'", "Code": "['a', 'b'].index('b')"}, {"ID": 12402561, "NL Utterance": "set font size of axis legend of plot `plt` to 'xx-small'", "Code": "plt.setp(legend.get_title(), fontsize='xx-small')"}, {"ID": 2508861, "NL Utterance": null, "Code": "int('  23  ')"}, {"ID": 3308102, "NL Utterance": "extract the 2nd elements from a list of tuples", "Code": "[x[1] for x in elements]"}, {"ID": 16114333, "NL Utterance": "get the opposite diagonal of a numpy array `array`", "Code": "np.diag(np.rot90(array))"}, {"ID": 10941229, "NL Utterance": "flatten list of tuples `a`", "Code": "list(chain.from_iterable(a))"}, {"ID": 36957908, "NL Utterance": "substitute two or more whitespace characters with character '|' in string `line`", "Code": "re.sub('\\\\s{2,}', '|', line.strip())"}, {"ID": 455612, "NL Utterance": "print float `a` with two decimal points", "Code": "print(('%.2f' % a))"}, {"ID": 455612, "NL Utterance": "print float `a` with two decimal points", "Code": "print(('{0:.2f}'.format(a)))"}, {"ID": 455612, "NL Utterance": "print float `a` with two decimal points", "Code": "print(('{0:.2f}'.format(round(a, 2))))"}, {"ID": 455612, "NL Utterance": "print float `a` with two decimal points", "Code": "print(('%.2f' % round(a, 2)))"}, {"ID": 455612, "NL Utterance": "limit float 13.9499999 to two decimal points", "Code": "('%.2f' % 13.9499999)"}, {"ID": 455612, "NL Utterance": "limit float 3.14159 to two decimal points", "Code": "('%.2f' % 3.14159)"}, {"ID": 455612, "NL Utterance": "limit float 13.949999999999999 to two decimal points", "Code": "float('{0:.2f}'.format(13.95))"}, {"ID": 455612, "NL Utterance": "limit float 13.949999999999999 to two decimal points", "Code": "'{0:.2f}'.format(13.95)"}, {"ID": 9652832, "NL Utterance": "load a tsv file `c:/~/trainSetRel3.txt` into a pandas data frame", "Code": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')"}, {"ID": 18722196, "NL Utterance": "set UTC offset by 9 hrs ahead for date '2013/09/11 00:17'", "Code": "dateutil.parser.parse('2013/09/11 00:17 +0900')"}, {"ID": 8671702, "NL Utterance": "pass a list of parameters `((1, 2, 3),) to sql queue 'SELECT * FROM table WHERE column IN %s;'", "Code": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))"}, {"ID": 9497290, "NL Utterance": "sum all elements of two-dimensions list `[[1, 2, 3, 4], [2, 4, 5, 6]]]`", "Code": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])"}, {"ID": 3097866, "NL Utterance": "Retrieve an arbitrary value from dictionary `dict`", "Code": "next(iter(dict.values()))"}, {"ID": 3097866, "NL Utterance": "access an arbitrary value from dictionary `dict`", "Code": "next(iter(list(dict.values())))"}, {"ID": 42012589, "NL Utterance": "group dataframe `df` by columns 'Month' and 'Fruit'", "Code": "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)"}, {"ID": 13408919, "NL Utterance": "sort list `mylist` of tuples by arbitrary key from list `order`", "Code": "sorted(mylist, key=lambda x: order.index(x[1]))"}, {"ID": 39804375, "NL Utterance": "sort a list of dictionary `persons` according to the key `['passport']['birth_info']['date']`", "Code": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])"}, {"ID": 6250046, "NL Utterance": "remove the fragment identifier `#something` from a url `http://www.address.com/something#something`", "Code": "urlparse.urldefrag('http://www.address.com/something#something')"}, {"ID": 21018612, "NL Utterance": "download to a directory '/path/to/dir/filename.ext' from source 'http://example.com/file.ext'", "Code": "urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')"}, {"ID": 32296933, "NL Utterance": "remove all duplicates from a list of sets `L`", "Code": "list(set(frozenset(item) for item in L))"}, {"ID": 32296933, "NL Utterance": "remove duplicates from a list of sets 'L'", "Code": "[set(item) for item in set(frozenset(item) for item in L)]"}, {"ID": 17856928, "NL Utterance": "terminate process `p`", "Code": "p.terminate()"}, {"ID": 14465279, "NL Utterance": "delete all values in a list `mylist`", "Code": "del mylist[:]"}, {"ID": 3365673, "NL Utterance": "throw an error window in python in windows", "Code": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)"}, {"ID": 3845423, "NL Utterance": "remove empty strings from list `str_list`", "Code": "str_list = list([_f for _f in str_list if _f])"}, {"ID": 4270742, "NL Utterance": "remove newlines and whitespace from string `yourstring`", "Code": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)"}, {"ID": 35118265, "NL Utterance": "remove the last dot and all text beyond it in string `s`", "Code": "re.sub('\\\\.[^.]+$', '', s)"}, {"ID": 40055835, "NL Utterance": "remove elements from an array `A` that are in array `B`", "Code": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"}, {"ID": 21206395, "NL Utterance": "Write column 'sum' of DataFrame `a` to csv file 'test.csv'", "Code": "a.to_csv('test.csv', cols=['sum'])"}, {"ID": 1186789, "NL Utterance": "call a Python script \"test2.py\"", "Code": "exec(compile(open('test2.py').read(), 'test2.py', 'exec'))"}, {"ID": 1186789, "NL Utterance": "call a Python script \"test1.py\"", "Code": "subprocess.call('test1.py', shell=True)"}, {"ID": 7142227, "NL Utterance": "sort a zipped list `zipped` using lambda function", "Code": "sorted(zipped, key=lambda x: x[1])"}, {"ID": 7142227, "NL Utterance": null, "Code": "zipped.sort(key=lambda t: t[1])"}, {"ID": 7742752, "NL Utterance": "sort a dictionary `y` by value then by key", "Code": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)"}, {"ID": 19011613, "NL Utterance": "using beautifulsoup to select div blocks within html `soup`", "Code": "soup.find_all('div', class_='crBlock ')"}, {"ID": 31267493, "NL Utterance": "remove elements from list `centroids` the indexes of which are in array `index`", "Code": "[element for i, element in enumerate(centroids) if i not in index]"}, {"ID": 11697709, "NL Utterance": "list duplicated elements in two lists `listA` and `listB`", "Code": "list(set(listA) & set(listB))"}, {"ID": 19602931, "NL Utterance": "download \"http://randomsite.com/file.gz\" from http and save as \"file.gz\"", "Code": "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')"}, {"ID": 19602931, "NL Utterance": "download file from http url \"http://randomsite.com/file.gz\" and save as \"file.gz\"", "Code": "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')"}, {"ID": 19602931, "NL Utterance": "download file from http url `file_url`", "Code": "file_name = wget.download(file_url)"}, {"ID": 2406700, "NL Utterance": "set an array of unicode characters `[u'\\xe9', u'\\xe3', u'\\xe2']` as labels in Matplotlib `ax`", "Code": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])"}, {"ID": 41727442, "NL Utterance": "get a list of all integer points in a `dim` dimensional hypercube with coordinates from `-x` to `y` for all dimensions", "Code": "list(itertools.product(list(range(-x, y)), repeat=dim))"}, {"ID": 20774910, "NL Utterance": "convert unicode string `s` into string literals", "Code": "print(s.encode('unicode_escape'))"}, {"ID": 18391059, "NL Utterance": "how to format a list of arguments `my_args` into a string", "Code": "'Hello %s' % ', '.join(my_args)"}, {"ID": 8970524, "NL Utterance": "search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(ddd)'", "Code": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)"}, {"ID": 8970524, "NL Utterance": "regex search and split string 'aaa bbb ccc ddd eee fff' by delimiter '(d(d)d)'", "Code": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)"}, {"ID": 20638006, "NL Utterance": "convert a list of dictionaries `d` to pandas data frame", "Code": "pd.DataFrame(d)"}, {"ID": 9206964, "NL Utterance": "split string \"This is a string\" into words that do not contain whitespaces", "Code": "\"\"\"This is a string\"\"\".split()"}, {"ID": 9206964, "NL Utterance": "split string \"This     is a     string\" into words that does not contain whitespaces", "Code": "\"\"\"This     is a     string\"\"\".split()"}, {"ID": 12182744, "NL Utterance": null, "Code": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)"}, {"ID": 6764909, "NL Utterance": "remove all duplicate items from a list `lseperatedOrblist`", "Code": "woduplicates = list(set(lseperatedOrblist))"}, {"ID": 34437284, "NL Utterance": "sum of product of combinations in a list `l`", "Code": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])"}, {"ID": 5900683, "NL Utterance": "regular expression for validating string 'user' containing a sequence of characters ending with '-' followed by any number of digits.", "Code": "re.compile('{}-\\\\d*'.format(user))"}, {"ID": 1614236, "NL Utterance": "convert all of the items in a list `lst` to float", "Code": "[float(i) for i in lst]"}, {"ID": 13840379, "NL Utterance": "multiply all items in a list `[1, 2, 3, 4, 5, 6]` together", "Code": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])"}, {"ID": 8687568, "NL Utterance": "write a tuple of tuples `A` to a csv file using python", "Code": "writer.writerow(A)"}, {"ID": 8687568, "NL Utterance": "Write all tuple of tuples `A` at once into csv file", "Code": "writer.writerows(A)"}, {"ID": 4928526, "NL Utterance": "python, format string \"{} %s {}\" to have 'foo' and 'bar' in the first and second positions", "Code": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')"}, {"ID": 13781828, "NL Utterance": "Truncate `\\r\\n` from each string in a list of string `example`", "Code": "example = [x.replace('\\r\\n', '') for x in example]"}, {"ID": 23145240, "NL Utterance": "split elements of a list `l` by '\\t'", "Code": "[i.partition('\\t')[-1] for i in l if '\\t' in i]"}, {"ID": 20062565, "NL Utterance": "search for regex pattern 'Test(.*)print' in string `testStr` including new line character '\\n'", "Code": "re.search('Test(.*)print', testStr, re.DOTALL)"}, {"ID": 20457174, "NL Utterance": "find button that is in li class `next` and assign it to variable `next`", "Code": "next = driver.find_element_by_css_selector('li.next>a')"}, {"ID": 6591931, "NL Utterance": "get the  size of file 'C:\\\\Python27\\\\Lib\\\\genericpath.py'", "Code": "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size"}, {"ID": 18493677, "NL Utterance": "return a string from a regex match with pattern '<img.*?>' in string 'line'", "Code": "imtag = re.match('<img.*?>', line).group(0)"}, {"ID": 8735312, "NL Utterance": "Rename a folder `Joe Blow` to `Blow, Joe`", "Code": "os.rename('Joe Blow', 'Blow, Joe')"}, {"ID": 11430863, "NL Utterance": "find overlapping matches from a string `hello` using regex", "Code": "re.findall('(?=(\\\\w\\\\w))', 'hello')"}, {"ID": 1476, "NL Utterance": "convert 173 to binary string", "Code": "bin(173)"}, {"ID": 1476, "NL Utterance": "convert binary string '01010101111' to integer", "Code": "int('01010101111', 2)"}, {"ID": 1476, "NL Utterance": "convert binary string '010101' to integer", "Code": "int('010101', 2)"}, {"ID": 1476, "NL Utterance": "convert binary string '0b0010101010' to integer", "Code": "int('0b0010101010', 2)"}, {"ID": 1476, "NL Utterance": "convert 21 to binary string", "Code": "bin(21)"}, {"ID": 1476, "NL Utterance": "convert binary string '11111111' to integer", "Code": "int('11111111', 2)"}, {"ID": 817122, "NL Utterance": "delete all digits in string `s` that are not directly attached to a word character", "Code": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)"}, {"ID": 817122, "NL Utterance": "delete digits at the end of string `s`", "Code": "re.sub('\\\\b\\\\d+\\\\b', '', s)"}, {"ID": 817122, "NL Utterance": "Delete self-contained digits from string `s`", "Code": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)"}, {"ID": 436599, "NL Utterance": "truncate string `s` up to character ':'", "Code": "s.split(':', 1)[1]"}, {"ID": 5864485, "NL Utterance": "print a string `s` by splitting with comma `,`", "Code": "print(s.split(','))"}, {"ID": 5864485, "NL Utterance": "Create list  by splitting string `mystring` using \",\" as delimiter", "Code": "mystring.split(',')"}, {"ID": 31405409, "NL Utterance": "remove parentheses only around single words in a string `s` using regex", "Code": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)"}, {"ID": 4302027, "NL Utterance": "webbrowser open url `url`", "Code": "webbrowser.open_new(url)"}, {"ID": 4302027, "NL Utterance": "webbrowser open url 'http://example.com'", "Code": "webbrowser.open('http://example.com')"}, {"ID": 20668060, "NL Utterance": "change the background colour of the button `pushbutton` to red", "Code": "self.pushButton.setStyleSheet('background-color: red')"}, {"ID": 4231345, "NL Utterance": "apply a list of functions named 'functions' over a list of values named 'values'", "Code": "[x(y) for x, y in zip(functions, values)]"}, {"ID": 14306852, "NL Utterance": "modify the width of a text control as `300` keeping default height in wxpython", "Code": "wx.TextCtrl(self, -1, size=(300, -1))"}, {"ID": 14111705, "NL Utterance": "display a grayscale image from array of pixels `imageArray`", "Code": "imshow(imageArray, cmap='Greys_r')"}, {"ID": 13295735, "NL Utterance": "replace all the nan values with 0 in a pandas dataframe `df`", "Code": "df.fillna(0)"}, {"ID": 31385363, "NL Utterance": "export a table dataframe `df` in pyspark to csv 'mycsv.csv'", "Code": "df.toPandas().to_csv('mycsv.csv')"}, {"ID": 31385363, "NL Utterance": "Write DataFrame `df` to csv file 'mycsv.csv'", "Code": "df.write.csv('mycsv.csv')"}, {"ID": 12218112, "NL Utterance": "get the sum of each second value from a list of tuple `structure`", "Code": "sum(x[1] for x in structure)"}, {"ID": 40517350, "NL Utterance": "sum the 3 largest integers in groupby by 'STNAME' and 'COUNTY_POP'", "Code": "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())"}, {"ID": 4363072, "NL Utterance": "Parse string '21/11/06 16:30' according to format '%d/%m/%y %H:%M'", "Code": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')"}, {"ID": 3718657, "NL Utterance": "get current script directory", "Code": "os.path.dirname(os.path.abspath(__file__))"}, {"ID": 15175142, "NL Utterance": "double each character in string `text.read()`", "Code": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)"}, {"ID": 19641579, "NL Utterance": "concatenate strings in tuple `('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e')` into a single string", "Code": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))"}, {"ID": 3430372, "NL Utterance": "get full path of current directory", "Code": "os.path.dirname(os.path.abspath(__file__))"}, {"ID": 14932247, "NL Utterance": "variable number of digits `digits` in variable `value` in format string \"{0:.{1}%}\"", "Code": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)"}, {"ID": 2764586, "NL Utterance": "get current requested url", "Code": "self.request.url"}, {"ID": 30651487, "NL Utterance": "get a random item from list `choices`", "Code": "random_choice = random.choice(choices)"}, {"ID": 3780403, "NL Utterance": "sum the length of all strings in a list `strings`", "Code": "length = sum(len(s) for s in strings)"}, {"ID": 4233476, "NL Utterance": "sort a list `s` by first and second attributes", "Code": "s = sorted(s, key=lambda x: (x[1], x[2]))"}, {"ID": 4233476, "NL Utterance": "sort a list of lists `s` by second and third element in each list.", "Code": "s.sort(key=operator.itemgetter(1, 2))"}, {"ID": 21974169, "NL Utterance": "Mysql commit current transaction", "Code": "con.commit()"}, {"ID": 2152898, "NL Utterance": "filtering out strings that contain 'ab' from a list of strings `lst`", "Code": "[k for k in lst if 'ab' in k]"}, {"ID": 5775719, "NL Utterance": "find the first letter of each element in string `input`", "Code": "output = ''.join(item[0].upper() for item in input.split())"}, {"ID": 13418405, "NL Utterance": "get name of primary field `name` of django model `CustomPK`", "Code": "CustomPK._meta.pk.name"}, {"ID": 19410018, "NL Utterance": "count the number of words in a string `s`", "Code": "len(s.split())"}, {"ID": 21562986, "NL Utterance": "multiply array `a` and array `b`respective elements then sum each row of the new array", "Code": "np.einsum('ji,i->j', a, b)"}, {"ID": 1093322, "NL Utterance": "check python version", "Code": "sys.version"}, {"ID": 1093322, "NL Utterance": "check python version", "Code": "sys.version_info"}, {"ID": 13490292, "NL Utterance": "format number 1000000000.0 using latex notation", "Code": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))"}, {"ID": 12791501, "NL Utterance": "Initialize a list of empty lists `x` of size 3", "Code": "x = [[] for i in range(3)]"}, {"ID": 4901483, "NL Utterance": "apply jinja2 filters `forceescape` and `linebreaks` on variable `my_variable`", "Code": "{{my_variable | forceescape | linebreaks}}"}, {"ID": 8092877, "NL Utterance": "zip a list of tuples `[(1, 4), (2, 5), (3, 6)]` into a list of tuples according to original tuple index", "Code": "zip(*[(1, 4), (2, 5), (3, 6)])"}, {"ID": 8092877, "NL Utterance": "split a list of tuples `data` into sub-lists of the same tuple field using itertools", "Code": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]"}, {"ID": 7522533, "NL Utterance": "Convert a string into a list", "Code": "list('hello')"}, {"ID": 18504967, "NL Utterance": "create new column `A_perc` in dataframe `df` with row values equal to the value in column `A` divided by the value in column `sum`", "Code": "df['A_perc'] = df['A'] / df['sum']"}, {"ID": 973473, "NL Utterance": "getting a list of all subdirectories in the directory `directory`", "Code": "os.walk(directory)"}, {"ID": 973473, "NL Utterance": "get a list of all subdirectories in the directory `directory`", "Code": "[x[0] for x in os.walk(directory)]"}, {"ID": 4484690, "NL Utterance": "update all values associated with key `i` to string 'updated' if value `j` is not equal to 'None' in dictionary `d`", "Code": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}"}, {"ID": 4484690, "NL Utterance": "Filter a dictionary `d` to remove keys with value None and replace other values with 'updated'", "Code": "dict((k, 'updated') for k, v in d.items() if v is None)"}, {"ID": 4484690, "NL Utterance": "Filter a dictionary `d` to remove keys with value 'None' and replace other values with 'updated'", "Code": "dict((k, 'updated') for k, v in d.items() if v != 'None')"}, {"ID": 19384532, "NL Utterance": "count number of rows in a group `key_columns` in pandas groupby object `df`", "Code": "df.groupby(key_columns).size()"}, {"ID": 13283689, "NL Utterance": "return list `result` of sum of elements of each list `b` in list of lists `a`", "Code": "result = [sum(b) for b in a]"}, {"ID": 1580270, "NL Utterance": "What's the best way to search for a Python dictionary value in a list of dictionaries?", "Code": "any(d['site'] == 'Superuser' for d in data)"}, {"ID": 6480441, "NL Utterance": "create a 2D array of `Node` objects with dimensions `cols` columns and `rows` rows", "Code": "nodes = [[Node() for j in range(cols)] for i in range(rows)]"}, {"ID": 3548673, "NL Utterance": "replace extension '.txt' in basename '/home/user/somefile.txt' with extension '.jpg'", "Code": "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')"}, {"ID": 19954469, "NL Utterance": "Set the resolution of a monitor as `FULLSCREEN` in pygame", "Code": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)"}, {"ID": 17306755, "NL Utterance": "format float `3.5e+20`  to `$3.5 \\\\times 10^{20}$` and set as title of matplotlib plot `ax`", "Code": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))"}, {"ID": 6879364, "NL Utterance": "Get the age of directory (or file) `/tmp` in seconds.", "Code": "print(os.path.getmtime('/tmp'))"}, {"ID": 9621388, "NL Utterance": "how to get month name of datetime `today`", "Code": "today.strftime('%B')"}, {"ID": 9621388, "NL Utterance": "get month name from a datetime object `today`", "Code": "today.strftime('%B')"}, {"ID": 716477, "NL Utterance": "Convert nested list `x` into a flat list", "Code": "[j for i in x for j in i]"}, {"ID": 716477, "NL Utterance": "get each value from a list of lists `a` using itertools", "Code": "print(list(itertools.chain.from_iterable(a)))"}, {"ID": 16766643, "NL Utterance": "convert date string 'January 11, 2010'  into day of week", "Code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')"}, {"ID": 16766643, "NL Utterance": null, "Code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')"}, {"ID": 2793324, "NL Utterance": "remove item \"b\" in list `a`", "Code": "a.remove('b')"}, {"ID": 2793324, "NL Utterance": "remove item `c` in list `a`", "Code": "a.remove(c)"}, {"ID": 2793324, "NL Utterance": "delete the element 6 from list `a`", "Code": "a.remove(6)"}, {"ID": 2793324, "NL Utterance": "delete the element 6 from list `a`", "Code": "a.remove(6)"}, {"ID": 2793324, "NL Utterance": "delete the element `c` from list `a`", "Code": "if (c in a):\n    a.remove(c)"}, {"ID": 2793324, "NL Utterance": "delete the element `c` from list `a`", "Code": "try:\n    a.remove(c)\nexcept ValueError:\n    pass"}, {"ID": 17467504, "NL Utterance": "Get all matching patterns 'a.*?a' from a string 'a 1 a 2 a 3 a 4 a'.", "Code": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')"}, {"ID": 41469647, "NL Utterance": "outer product of each column of a 2d `X` array to form a 3d array `X`", "Code": "np.einsum('ij,kj->jik', X, X)"}, {"ID": 930397, "NL Utterance": "Getting the last element of list `some_list`", "Code": "some_list[(-1)]"}, {"ID": 930397, "NL Utterance": "Getting the second to last element of list `some_list`", "Code": "some_list[(-2)]"}, {"ID": 930397, "NL Utterance": "gets the `n` th-to-last element in list `some_list`", "Code": "some_list[(- n)]"}, {"ID": 930397, "NL Utterance": "get the last element in list `alist`", "Code": "alist[(-1)]"}, {"ID": 930397, "NL Utterance": "get the last element in list `astr`", "Code": "astr[(-1)]"}, {"ID": 31743603, "NL Utterance": "make a list of integers from 0 to `5` where each second element is a duplicate of the previous element", "Code": "print([u for v in [[i, i] for i in range(5)] for u in v])"}, {"ID": 31743603, "NL Utterance": "create a list of integers with duplicate values `[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]`", "Code": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]"}, {"ID": 31743603, "NL Utterance": "create a list of integers from 1 to 5 with each value duplicated", "Code": "[(i // 2) for i in range(10)]"}, {"ID": 28134319, "NL Utterance": "remove first and last lines of string `s`", "Code": "s[s.find('\\n') + 1:s.rfind('\\n')]"}, {"ID": 19454970, "NL Utterance": "create dict of squared int values in range of 100", "Code": "{(x ** 2) for x in range(100)}"}, {"ID": 4112265, "NL Utterance": "zip lists `[1, 2], [3, 4], [5, 6]` in a list", "Code": "zip(*[[1, 2], [3, 4], [5, 6]])"}, {"ID": 4112265, "NL Utterance": "zip lists in a list [[1, 2], [3, 4], [5, 6]]", "Code": "zip(*[[1, 2], [3, 4], [5, 6]])"}, {"ID": 3355822, "NL Utterance": "request page 'https://www.mysite.com/' with credentials of username 'username' and password 'pwd'", "Code": "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))"}, {"ID": 663171, "NL Utterance": "get a new string from the 3rd character to the end of the string `x`", "Code": "x[2:]"}, {"ID": 663171, "NL Utterance": "get a new string including the first two characters of string `x`", "Code": "x[:2]"}, {"ID": 663171, "NL Utterance": "get a new string including all but the last character of string `x`", "Code": "x[:(-2)]"}, {"ID": 663171, "NL Utterance": "get a new string including the last two characters of string `x`", "Code": "x[(-2):]"}, {"ID": 663171, "NL Utterance": "get a new string with the 3rd to the second-to-last characters of string `x`", "Code": "x[2:(-2)]"}, {"ID": 663171, "NL Utterance": "reverse a string `some_string`", "Code": "some_string[::(-1)]"}, {"ID": 663171, "NL Utterance": "select alternate characters of \"H-e-l-l-o- -W-o-r-l-d\"", "Code": "'H-e-l-l-o- -W-o-r-l-d'[::2]"}, {"ID": 663171, "NL Utterance": "select a substring of `s` beginning at `beginning` of length `LENGTH`", "Code": "s = s[beginning:(beginning + LENGTH)]"}, {"ID": 73663, "NL Utterance": "terminate the program", "Code": "sys.exit()"}, {"ID": 73663, "NL Utterance": "terminate the program", "Code": "quit()"}, {"ID": 73663, "NL Utterance": "Terminating a Python script with error message \"some error message\"", "Code": "sys.exit('some error message')"}, {"ID": 10264618, "NL Utterance": "encode value of key `City` in dictionary `data` as `ascii`, ignoring non-ascii characters", "Code": "data['City'].encode('ascii', 'ignore')"}, {"ID": 276052, "NL Utterance": "get current CPU and RAM usage", "Code": "psutil.cpu_percent()\npsutil.virtual_memory()"}, {"ID": 276052, "NL Utterance": "get current RAM usage of current program", "Code": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))"}, {"ID": 276052, "NL Utterance": "print cpu and memory usage", "Code": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))"}, {"ID": 20154303, "NL Utterance": "read a ragged csv file `D:/Temp/tt.csv` using `names` parameter in pandas", "Code": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))"}, {"ID": 31828240, "NL Utterance": "get first non-null value per each row from dataframe `df`", "Code": "df.stack().groupby(level=0).first()"}, {"ID": 17895835, "NL Utterance": "print two numbers `10` and `20` using string formatting", "Code": "\"\"\"{0} {1}\"\"\".format(10, 20)"}, {"ID": 17895835, "NL Utterance": "replace placeholders in string '{1} {ham} {0} {foo} {1}' with arguments `(10, 20, foo='bar', ham='spam')`", "Code": "\"\"\"{1} {ham} {0} {foo} {1}\"\"\".format(10, 20, foo='bar', ham='spam')"}, {"ID": 818949, "NL Utterance": "create list `changed_list ` containing elements of list `original_list` whilst converting strings containing digits to integers", "Code": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]"}, {"ID": 11613284, "NL Utterance": "get a dictionary with keys from one list `keys` and values from other list `data`", "Code": "dict(zip(keys, zip(*data)))"}, {"ID": 6539881, "NL Utterance": "convert string `apple` from iso-8859-1/latin1 to utf-8", "Code": "apple.decode('iso-8859-1').encode('utf8')"}, {"ID": 19781609, "NL Utterance": "Exclude column names when writing dataframe `df` to a csv file `filename.csv`", "Code": "df.to_csv('filename.csv', header=False)"}, {"ID": 9079540, "NL Utterance": "Escape character '}' in string '{0}:<15}}{1}:<15}}{2}:<8}}' while using function `format` with arguments `('1', '2', '3')`", "Code": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))"}, {"ID": 30546889, "NL Utterance": "get dictionary with max value of key 'size' in list of dicts `ld`", "Code": "max(ld, key=lambda d: d['size'])"}, {"ID": 18609153, "NL Utterance": "format parameters 'b' and 'a' into plcaeholders in string \"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"", "Code": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')"}, {"ID": 19433630, "NL Utterance": "django create a foreign key column `user` and link it to table 'User'", "Code": "user = models.ForeignKey('User', unique=True)"}, {"ID": 2045175, "NL Utterance": "write a regex pattern to match even number of letter `A`", "Code": "re.compile('^([^A]*)AA([^A]|AA)*$')"}, {"ID": 6740311, "NL Utterance": "join Numpy array `b` with Numpy array 'a' along axis 0", "Code": "b = np.concatenate((a, a), axis=0)"}, {"ID": 41894454, "NL Utterance": "custom sort an alphanumeric list `l`", "Code": "sorted(l, key=lambda x: x.replace('0', 'Z'))"}, {"ID": 773814, "NL Utterance": "plot logarithmic axes with matplotlib", "Code": "ax.set_yscale('log')"}, {"ID": 4906977, "NL Utterance": "Access environment variable \"HOME\"", "Code": "os.environ['HOME']"}, {"ID": 4906977, "NL Utterance": "get value of environment variable \"HOME\"", "Code": "os.environ['HOME']"}, {"ID": 4906977, "NL Utterance": "print all environment variables", "Code": "print(os.environ)"}, {"ID": 4906977, "NL Utterance": "get all environment variables", "Code": "os.environ"}, {"ID": 4906977, "NL Utterance": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST'", "Code": "print(os.environ.get('KEY_THAT_MIGHT_EXIST'))"}, {"ID": 4906977, "NL Utterance": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`", "Code": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"}, {"ID": 4906977, "NL Utterance": "get value of the environment variable 'HOME' with default value '/home/username/'", "Code": "print(os.environ.get('HOME', '/home/username/'))"}, {"ID": 12739911, "NL Utterance": "create a dictionary containing each string in list `my_list` split by '=' as a key/value pairs", "Code": "print(dict([s.split('=') for s in my_list]))"}, {"ID": 9706041, "NL Utterance": "find the index of element closest to number 11.5 in list `a`", "Code": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))"}, {"ID": 14299978, "NL Utterance": "find element `a` that contains string \"TEXT A\" in file `root`", "Code": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')"}, {"ID": 14299978, "NL Utterance": "Find the`a` tag in html `root` which starts with the text `TEXT A`  and assign it to `e`", "Code": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')"}, {"ID": 14299978, "NL Utterance": "find the element that holds string 'TEXT A' in file `root`", "Code": "e = root.xpath('.//a[text()=\"TEXT A\"]')"}, {"ID": 12768504, "NL Utterance": "create list `c` containing items from list `b` whose index is in list `index`", "Code": "c = [b[i] for i in index]"}, {"ID": 23566515, "NL Utterance": "get the dot product of two one dimensional numpy arrays", "Code": "np.dot(a[:, (None)], b[(None), :])"}, {"ID": 23566515, "NL Utterance": "multiplication of two 1-dimensional arrays  in numpy", "Code": "np.outer(a, b)"}, {"ID": 5788891, "NL Utterance": "execute a file './abc.py' with arguments `arg1` and `arg2` in python shell", "Code": "subprocess.call(['./abc.py', arg1, arg2])"}, {"ID": 40682209, "NL Utterance": "Replace NaN values in  column 'value' with the mean of data in column 'group' of dataframe `df`", "Code": "df[['value']].fillna(df.groupby('group').transform('mean'))"}, {"ID": 27457970, "NL Utterance": "separate each character in string `s` by '-'", "Code": "re.sub('(.)(?=.)', '\\\\1-', s)"}, {"ID": 27457970, "NL Utterance": "concatenate '-' in between characters of string `str`", "Code": "re.sub('(?<=.)(?=.)', '-', str)"}, {"ID": 18079029, "NL Utterance": "get the indexes of the x and y axes in Numpy array `np` where variable `a` is equal to variable `value`", "Code": "i, j = np.where(a == value)"}, {"ID": 4131123, "NL Utterance": "print letter that appears most frequently in string `s`", "Code": "print(collections.Counter(s).most_common(1)[0])"}, {"ID": 12211944, "NL Utterance": "find float number proceeding sub-string `par` in string `dir`", "Code": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])"}, {"ID": 12211944, "NL Utterance": "Get all the matches from a string `abcd` if it begins with a character `a`", "Code": "re.findall('[^a]', 'abcd')"}, {"ID": 9759820, "NL Utterance": "get a list of variables from module 'adfix.py' in current module.", "Code": "print([item for item in dir(adfix) if not item.startswith('__')])"}, {"ID": 22412258, "NL Utterance": "get the first element of each tuple in a list `rows`", "Code": "[x[0] for x in rows]"}, {"ID": 22412258, "NL Utterance": "get a list `res_list` of the first elements of each tuple in a list of tuples `rows`", "Code": "res_list = [x[0] for x in rows]"}, {"ID": 23887881, "NL Utterance": "duplicate data in pandas dataframe `x` for 5 times", "Code": "pd.concat([x] * 5, ignore_index=True)"}, {"ID": 23887881, "NL Utterance": "Get a repeated pandas data frame object `x` by `5` times", "Code": "pd.concat([x] * 5)"}, {"ID": 34148637, "NL Utterance": "sort json `ips_data` by a key 'data_two'", "Code": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])"}, {"ID": 21104592, "NL Utterance": "read json `elevations` to pandas dataframe `df`", "Code": "pd.read_json(elevations)"}, {"ID": 4265988, "NL Utterance": "generate a random number in 1 to 7 with a given distribution [0.1, 0.05, 0.05, 0.2, 0.4, 0.2]", "Code": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])"}, {"ID": 15741759, "NL Utterance": "Return rows of data associated with the maximum value of column 'Value' in dataframe `df`", "Code": "df.loc[df['Value'].idxmax()]"}, {"ID": 11303238, "NL Utterance": "find recurring patterns in a string '42344343434'", "Code": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]"}, {"ID": 11760095, "NL Utterance": "convert binary string '\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@' to numpy array", "Code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='<f4')"}, {"ID": 11760095, "NL Utterance": "convert binary string to numpy array", "Code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')"}, {"ID": 902408, "NL Utterance": "insert variables `(var1, var2, var3)` into sql statement 'INSERT INTO table VALUES (?, ?, ?)'", "Code": "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))"}, {"ID": 902408, "NL Utterance": "Execute a sql statement using variables `var1`, `var2` and `var3`", "Code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"}, {"ID": 902408, "NL Utterance": null, "Code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))"}, {"ID": 29370211, "NL Utterance": "pandas split strings in column 'stats' by ',' into columns in dataframe `df`", "Code": "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)"}, {"ID": 29370211, "NL Utterance": "split string in column 'stats' by ',' into separate columns in dataframe `df`", "Code": "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)"}, {"ID": 29370211, "NL Utterance": "Unpack column 'stats' in dataframe `df` into a series of columns", "Code": "df['stats'].apply(pd.Series)"}, {"ID": 16196712, "NL Utterance": "wait for shell command `p` evoked by  subprocess.Popen to complete", "Code": "p.wait()"}, {"ID": 9339630, "NL Utterance": "encode string `s` to utf-8 code", "Code": "s.encode('utf8')"}, {"ID": 1713594, "NL Utterance": "parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'", "Code": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"}, {"ID": 123198, "NL Utterance": "copy a file from `src` to `dst`", "Code": "copyfile(src, dst)"}, {"ID": 123198, "NL Utterance": "copy file \"/dir/file.ext\" to \"/new/dir/newname.ext\"", "Code": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')"}, {"ID": 123198, "NL Utterance": "copy file '/dir/file.ext' to '/new/dir'", "Code": "shutil.copy2('/dir/file.ext', '/new/dir')"}, {"ID": 3590165, "NL Utterance": "print a list of integers `list_of_ints` using string formatting", "Code": "print(', '.join(str(x) for x in list_of_ints))"}, {"ID": 22702760, "NL Utterance": "multiply column 'A' and column 'B' by column 'C' in datafram `df`", "Code": "df[['A', 'B']].multiply(df['C'], axis='index')"}, {"ID": 21669374, "NL Utterance": "convert string 'a' to hex", "Code": "hex(ord('a'))"}, {"ID": 40639071, "NL Utterance": "Get the sum of values to the power of their indices in a list `l`", "Code": "sum(j ** i for i, j in enumerate(l, 1))"}, {"ID": 4241757, "NL Utterance": "remove extra white spaces & tabs from a string `s`", "Code": "\"\"\" \"\"\".join(s.split())"}, {"ID": 16233593, "NL Utterance": "replace comma in string `s` with empty string ''", "Code": "s = s.replace(',', '')"}, {"ID": 10020591, "NL Utterance": "Resample dataframe `frame` to resolution of 1 hour `1H` for timeseries index, summing values in the column `radiation` averaging those in column `tamb`", "Code": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})"}, {"ID": 1406145, "NL Utterance": null, "Code": "root.destroy()"}, {"ID": 37934969, "NL Utterance": "create a pandas dataframe `df` from elements of a dictionary `nvalues`", "Code": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})"}, {"ID": 13279399, "NL Utterance": "Flask get value of request variable 'firstname'", "Code": "first_name = request.args.get('firstname')"}, {"ID": 13279399, "NL Utterance": "Flask get posted form data 'firstname'", "Code": "first_name = request.form.get('firstname')"}, {"ID": 38379453, "NL Utterance": "get a list of substrings consisting of the first 5 characters of every string in list `buckets`", "Code": "[s[:5] for s in buckets]"}, {"ID": 4659524, "NL Utterance": "sort list `the_list` by the length of string followed by alphabetical order", "Code": "the_list.sort(key=lambda item: (-len(item), item))"}, {"ID": 33565643, "NL Utterance": "Set index equal to field 'TRX_DATE' in dataframe `df`", "Code": "df = df.set_index(['TRX_DATE'])"}, {"ID": 20222485, "NL Utterance": "List comprehension with an accumulator in range of 10", "Code": "list(accumulate(list(range(10))))"}, {"ID": 14524322, "NL Utterance": "How to convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%m/%d/%y'", "Code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')"}, {"ID": 14524322, "NL Utterance": "convert a date string '2013-1-25' in format '%Y-%m-%d' to different format '%-m/%d/%y'", "Code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')"}, {"ID": 38426168, "NL Utterance": "get a dataframe `df2` that contains all the columns of dataframe `df` that do not end in `prefix`", "Code": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]"}, {"ID": 8556076, "NL Utterance": "create list `new_list` containing the last 10 elements of list `my_list`", "Code": "new_list = my_list[-10:]"}, {"ID": 8556076, "NL Utterance": "get the last 10 elements from a list `my_list`", "Code": "my_list[-10:]"}, {"ID": 34155829, "NL Utterance": "convert matlab engine array `x` to a numpy ndarray", "Code": "np.array(x._data).reshape(x.size[::-1]).T"}, {"ID": 42747987, "NL Utterance": "select the first row grouped per level 0 of dataframe `df`", "Code": "df.groupby(level=0, as_index=False).nth(0)"}, {"ID": 27516849, "NL Utterance": "concatenate sequence of numpy arrays  `LIST` into a one dimensional array along the first axis", "Code": "numpy.concatenate(LIST, axis=0)"}, {"ID": 41552839, "NL Utterance": "convert and escape string \"\\\\xc3\\\\x85\u3042\" to UTF-8 code", "Code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')"}, {"ID": 41552839, "NL Utterance": "encode string \"\\\\xc3\\\\x85\u3042\" to bytes", "Code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')"}, {"ID": 3471999, "NL Utterance": "interleave the elements of two lists `a` and `b`", "Code": "[j for i in zip(a, b) for j in i]"}, {"ID": 3471999, "NL Utterance": "merge two lists `a` and `b` into a single list", "Code": "[j for i in zip(a, b) for j in i]"}, {"ID": 8282553, "NL Utterance": "delete all occureces of `8` in each string `s` in list `lst`", "Code": "print([s.replace('8', '') for s in lst])"}, {"ID": 14737222, "NL Utterance": "Split string `Hello` into a string of letters seperated by `,`", "Code": "\"\"\",\"\"\".join('Hello')"}, {"ID": 3506678, "NL Utterance": "in Django, select 100 random records from the database `Content.objects`", "Code": "Content.objects.all().order_by('?')[:100]"}, {"ID": 37878946, "NL Utterance": "create a NumPy array containing elements of array `A` as pointed to by index in array `B`", "Code": "A[np.arange(A.shape[0])[:, (None)], B]"}, {"ID": 39353758, "NL Utterance": "pivot dataframe `df` so that values for `upc` become column headings and values for `saleid` become the index", "Code": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)"}, {"ID": 22229255, "NL Utterance": "match zero-or-more instances of lower case alphabet characters in a string `f233op `", "Code": "re.findall('([a-z]*)', 'f233op')"}, {"ID": 22229255, "NL Utterance": "match zero-or-more instances of lower case alphabet characters in a string `f233op `", "Code": "re.findall('([a-z])*', 'f233op')"}, {"ID": 34410358, "NL Utterance": "split string 'happy_hats_for_cats' using string '_for_'", "Code": "re.split('_for_', 'happy_hats_for_cats')"}, {"ID": 34410358, "NL Utterance": "Split string 'sad_pandas_and_happy_cats_for_people' based on string 'and', 'or' or 'for'", "Code": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')"}, {"ID": 34410358, "NL Utterance": "Split a string `l` by multiple words `for` or `or` or `and`", "Code": "[re.split('_(?:f?or|and)_', s) for s in l]"}, {"ID": 13480031, "NL Utterance": "zip keys with individual values in lists `k` and `v`", "Code": "[dict(zip(k, x)) for x in v]"}, {"ID": 4644025, "NL Utterance": "Sort a list 'lst' in descending order.", "Code": "sorted(lst, reverse=True)"}, {"ID": 19156472, "NL Utterance": "sort array `order_array` based on column 'year', 'month' and 'day'", "Code": "order_array.sort(order=['year', 'month', 'day'])"}, {"ID": 19156472, "NL Utterance": "Sort a structured numpy array 'df' on multiple columns 'year', 'month' and 'day'.", "Code": "df.sort(['year', 'month', 'day'])"}, {"ID": 18131741, "NL Utterance": "check if elements in list `my_list` are coherent in order", "Code": "return my_list == list(range(my_list[0], my_list[-1] + 1))"}, {"ID": 34776651, "NL Utterance": "group rows of pandas dataframe `df` with same 'id'", "Code": "df.groupby('id').agg(lambda x: x.tolist())"}, {"ID": 4267019, "NL Utterance": "encode `u'X\\xc3\\xbcY\\xc3\\x9f'` as unicode and decode with utf-8", "Code": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')"}, {"ID": 379906, "NL Utterance": "parse string `a` to float", "Code": "float(a)"}, {"ID": 379906, "NL Utterance": "Parse String `s` to Float or Int", "Code": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)"}, {"ID": 610883, "NL Utterance": "check if object `a` has property 'property'", "Code": "if hasattr(a, 'property'):\n    pass"}, {"ID": 610883, "NL Utterance": "check if object `a` has property 'property'", "Code": "if hasattr(a, 'property'):\n    pass"}, {"ID": 610883, "NL Utterance": "get the value of attribute 'property' of object `a` with default value 'default value'", "Code": "getattr(a, 'property', 'default value')"}, {"ID": 28925267, "NL Utterance": "delete every 8th column in a numpy array 'a'.", "Code": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)"}, {"ID": 748491, "NL Utterance": "convert `ms` milliseconds to a datetime object", "Code": "datetime.datetime.fromtimestamp(ms / 1000.0)"}, {"ID": 19863964, "NL Utterance": "find the magnitude (length) squared of a vector `vf` field", "Code": "np.einsum('...j,...j->...', vf, vf)"}, {"ID": 4476373, "NL Utterance": "request http url `url`", "Code": "r = requests.get(url)"}, {"ID": 4476373, "NL Utterance": "request http url `url` with parameters `payload`", "Code": "r = requests.get(url, params=payload)"}, {"ID": 4476373, "NL Utterance": "post request url `url` with parameters `payload`", "Code": "r = requests.post(url, data=payload)"}, {"ID": 4476373, "NL Utterance": "make an HTTP post request with data `post_data`", "Code": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)"}, {"ID": 23422542, "NL Utterance": "django jinja slice list `mylist` by '3:8'", "Code": "{{(mylist | slice): '3:8'}}"}, {"ID": 14591855, "NL Utterance": "create dataframe `df` with content of hdf store file '/home/.../data.h5' with key of 'firstSet'", "Code": "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')"}, {"ID": 31950612, "NL Utterance": "get the largest index of the last occurrence of characters '([{' in string `test_string`", "Code": "max(test_string.rfind(i) for i in '([{')"}, {"ID": 10569438, "NL Utterance": "print 'here is your checkmark: ' plus unicode character u'\\u2713'", "Code": "print('here is your checkmark: ' + '\\u2713')"}, {"ID": 10569438, "NL Utterance": "print unicode characters in a string `\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f`", "Code": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')"}, {"ID": 3505831, "NL Utterance": "pads string '5' on the left with 1 zero", "Code": "print('{0}'.format('5'.zfill(2)))"}, {"ID": 7458689, "NL Utterance": "Remove duplicates elements from list `sequences` and sort it in ascending order", "Code": "sorted(set(itertools.chain.from_iterable(sequences)))"}, {"ID": 23748995, "NL Utterance": "pandas dataframe `df` column 'a' to list", "Code": "df['a'].values.tolist()"}, {"ID": 23748995, "NL Utterance": "Get a list of all values in column `a` in pandas data frame `df`", "Code": "df['a'].tolist()"}, {"ID": 6275762, "NL Utterance": "escaping quotes in string", "Code": "replace('\"', '\\\\\"')"}, {"ID": 3668964, "NL Utterance": "check if all string elements in list `words` are upper-cased", "Code": "print(all(word[0].isupper() for word in words))"}, {"ID": 29218750, "NL Utterance": "remove items from dictionary `myDict` if the item's value `val` is equal to 42", "Code": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}"}, {"ID": 29218750, "NL Utterance": "Remove all items from a dictionary `myDict` whose values are `42`", "Code": "{key: val for key, val in list(myDict.items()) if val != 42}"}, {"ID": 6714826, "NL Utterance": "Determine the byte length of a utf-8 encoded string `s`", "Code": "return len(s.encode('utf-8'))"}, {"ID": 1064335, "NL Utterance": "kill a process with id `process.pid`", "Code": "os.kill(process.pid, signal.SIGKILL)"}, {"ID": 14247586, "NL Utterance": "get data of columns with Null values in dataframe `df`", "Code": "df[pd.isnull(df).any(axis=1)]"}, {"ID": 41133414, "NL Utterance": "strip everything up to and including the character `&` from url `url`, strip the character `=` from the remaining string and concatenate `.html` to the end", "Code": "url.split('&')[-1].replace('=', '') + '.html'"}, {"ID": 1179305, "NL Utterance": "Parse a file `sample.xml` using expat parsing in python 3", "Code": "parser.ParseFile(open('sample.xml', 'rb'))"}, {"ID": 3376534, "NL Utterance": "Exit script", "Code": "sys.exit()"}, {"ID": 19153328, "NL Utterance": "assign value in `group` dynamically to class property `attr`", "Code": "setattr(self, attr, group)"}, {"ID": 28431359, "NL Utterance": "decode url-encoded string `some_string` to its character equivalents", "Code": "urllib.parse.unquote(urllib.parse.unquote(some_string))"}, {"ID": 28431359, "NL Utterance": "decode a double URL encoded string \r\n'FireShot3%2B%25282%2529.png' to\r\n'FireShot3+(2).png'", "Code": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))"}, {"ID": 14793098, "NL Utterance": "change flask security register url to `/create_account`", "Code": "app.config['SECURITY_REGISTER_URL'] = '/create_account'"}, {"ID": 5285181, "NL Utterance": "open a file `/home/user/test/wsservice/data.pkl` in binary write mode", "Code": "output = open('/home/user/test/wsservice/data.pkl', 'wb')"}, {"ID": 627435, "NL Utterance": "remove the last element in list `a`", "Code": "del a[(-1)]"}, {"ID": 627435, "NL Utterance": "remove the element in list `a` with index 1", "Code": "a.pop(1)"}, {"ID": 627435, "NL Utterance": "remove the last element in list `a`", "Code": "a.pop()"}, {"ID": 627435, "NL Utterance": "remove the element in list `a` at index `index`", "Code": "a.pop(index)"}, {"ID": 627435, "NL Utterance": "remove the element in list `a` at index `index`", "Code": "del a[index]"}, {"ID": 8440117, "NL Utterance": "print a celsius symbol on x axis of a plot `ax`", "Code": "ax.set_xlabel('Temperature (\\u2103)')"}, {"ID": 8440117, "NL Utterance": "Print a celsius symbol with matplotlib", "Code": "ax.set_xlabel('Temperature ($^\\\\circ$C)')"}, {"ID": 18022241, "NL Utterance": "convert a list of lists `list_of_lists` into a list of strings keeping empty sub-lists as empty string ''", "Code": "[''.join(l) for l in list_of_lists]"}, {"ID": 14657241, "NL Utterance": "get a list of all the duplicate items in dataframe `df` using pandas", "Code": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)"}, {"ID": 3877491, "NL Utterance": "Delete third row in a numpy array `x`", "Code": "x = numpy.delete(x, 2, axis=1)"}, {"ID": 3877491, "NL Utterance": "delete first row of array `x`", "Code": "x = numpy.delete(x, 0, axis=0)"}, {"ID": 19490064, "NL Utterance": "merge rows from dataframe `df1` with rows from dataframe `df2` and calculate the mean for rows that have the same value of axis 1", "Code": "pd.concat((df1, df2), axis=1).mean(axis=1)"}, {"ID": 18461623, "NL Utterance": "Get the average values from two numpy arrays `old_set` and `new_set`", "Code": "np.mean(np.array([old_set, new_set]), axis=0)"}, {"ID": 19948732, "NL Utterance": "Matplotlib change marker size to 500", "Code": "scatter(x, y, s=500, color='green', marker='h')"}, {"ID": 12808420, "NL Utterance": "Create new list `result` by splitting each item in list `words`", "Code": "result = [item for word in words for item in word.split(',')]"}, {"ID": 10805589, "NL Utterance": "convert JSON string '2012-05-29T19:30:03.283Z' into a DateTime object using format '%Y-%m-%dT%H:%M:%S.%fZ'", "Code": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')"}, {"ID": 35561743, "NL Utterance": "count `True` values associated with key 'one' in dictionary `tadas`", "Code": "sum(item['one'] for item in list(tadas.values()))"}, {"ID": 208894, "NL Utterance": "encode a pdf file `pdf_reference.pdf` with `base64` encoding", "Code": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')"}, {"ID": 2094176, "NL Utterance": "split string `a` using new-line character '\\n' as separator", "Code": "a.rstrip().split('\\n')"}, {"ID": 2094176, "NL Utterance": "split a string `a` with new line character", "Code": "a.split('\\n')[:-1]"}, {"ID": 12476452, "NL Utterance": "return http status code 204 from a django view", "Code": "return HttpResponse(status=204)"}, {"ID": 7571635, "NL Utterance": "check if 7 is in `a`", "Code": "(7 in a)"}, {"ID": 7571635, "NL Utterance": "check if 'a' is in list `a`", "Code": "('a' in a)"}, {"ID": 13438574, "NL Utterance": "sort list `results` by keys value 'year'", "Code": "sorted(results, key=itemgetter('year'))"}, {"ID": 15985339, "NL Utterance": "get current url in selenium webdriver `browser`", "Code": "print(browser.current_url)"}, {"ID": 4998629, "NL Utterance": "split string `str` with delimiter '; ' or delimiter ', '", "Code": "re.split('; |, ', str)"}, {"ID": 5555063, "NL Utterance": "un-escaping characters in a string with python", "Code": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')"}, {"ID": 9637838, "NL Utterance": "convert date string `s` in format pattern '%d/%m/%Y' into a timestamp", "Code": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())"}, {"ID": 9637838, "NL Utterance": "convert string '01/12/2011' to an integer timestamp", "Code": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))"}, {"ID": 29386995, "NL Utterance": "get http header of the key 'your-header-name' in flask", "Code": "request.headers['your-header-name']"}, {"ID": 27868020, "NL Utterance": "select records of dataframe `df` where the sum of column 'X' for each value in column 'User' is 0", "Code": "df.groupby('User')['X'].filter(lambda x: x.sum() == 0)"}, {"ID": 27868020, "NL Utterance": "Get data of dataframe `df` where the sum of column 'X' grouped by column 'User' is equal to 0", "Code": "df.loc[df.groupby('User')['X'].transform(sum) == 0]"}, {"ID": 27868020, "NL Utterance": "Get data from dataframe `df` where column 'X' is equal to 0", "Code": "df.groupby('User')['X'].transform(sum) == 0"}, {"ID": 12323403, "NL Utterance": null, "Code": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")"}, {"ID": 14301913, "NL Utterance": "convert pandas group by object to multi-indexed dataframe with indices 'Name' and 'Destination'", "Code": "df.set_index(['Name', 'Destination'])"}, {"ID": 2813829, "NL Utterance": "coalesce non-word-characters in string `a`", "Code": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))"}, {"ID": 1679798, "NL Utterance": "open a file \"$file\" under Unix", "Code": "os.system('start \"$file\"')"}, {"ID": 1207457, "NL Utterance": "Convert a Unicode string `title` to a 'ascii' string", "Code": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')"}, {"ID": 1207457, "NL Utterance": "Convert a Unicode string `a` to a 'ascii' string", "Code": "a.encode('ascii', 'ignore')"}, {"ID": 2225564, "NL Utterance": "create a list `files` containing all files in directory '.' that starts with numbers between 0 and 9 and ends with the extension '.jpg'", "Code": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]"}, {"ID": 32283692, "NL Utterance": "adding a 1-d array `[1, 2, 3, 4, 5, 6, 7, 8, 9]` to a 3-d array `np.zeros((6, 9, 20))`", "Code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]"}, {"ID": 32283692, "NL Utterance": "add array of shape `(6, 9, 20)` to array `[1, 2, 3, 4, 5, 6, 7, 8, 9]`", "Code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))"}, {"ID": 247724, "NL Utterance": null, "Code": "os.system('start excel.exe <path/to/file>')"}, {"ID": 29760130, "NL Utterance": "get the list with the highest sum value in list `x`", "Code": "print(max(x, key=sum))"}, {"ID": 35707224, "NL Utterance": "sum the length of lists in list `x` that are more than 1 item in length", "Code": "sum(len(y) for y in x if len(y) > 1)"}, {"ID": 42364992, "NL Utterance": "Enclose numbers in quotes in a string `This is number 1 and this is number 22`", "Code": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')"}, {"ID": 13163145, "NL Utterance": "multiply the columns of sparse matrix `m` by array `a` then multiply the rows of the resulting matrix by array `a`", "Code": "numpy.dot(numpy.dot(a, m), a)"}, {"ID": 9561243, "NL Utterance": "Django check if an object with criteria `name` equal to 'name' and criteria `title` equal to 'title' exists in model `Entry`", "Code": "Entry.objects.filter(name='name', title='title').exists()"}, {"ID": 34705205, "NL Utterance": "sort a nested list by the inverse of element 2, then by element 1", "Code": "sorted(l, key=lambda x: (-int(x[1]), x[0]))"}, {"ID": 29945684, "NL Utterance": "get domain/host name from request object in Django", "Code": "request.META['HTTP_HOST']"}, {"ID": 29703793, "NL Utterance": "get a string `randomkey123xyz987` between two substrings in a string `api('randomkey123xyz987', 'key', 'text')` using regex", "Code": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")"}, {"ID": 4682088, "NL Utterance": "invoke perl script './uireplace.pl' using perl interpeter '/usr/bin/perl' and send argument `var` to it", "Code": "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])"}, {"ID": 15769246, "NL Utterance": "print list of items `myList`", "Code": "print('\\n'.join(str(p) for p in myList))"}, {"ID": 13860026, "NL Utterance": "update the dictionary `mydic` with dynamic keys `i` and values with key 'name' from dictionary `o`", "Code": "mydic.update({i: o['name']})"}, {"ID": 18711384, "NL Utterance": "split a `utf-8` encoded string `stru` into a list of characters", "Code": "list(stru.decode('utf-8'))"}, {"ID": 8898294, "NL Utterance": "convert utf-8 with bom string `s` to utf-8 with no bom `u`", "Code": "u = s.decode('utf-8-sig')"}, {"ID": 687295, "NL Utterance": "Filter model 'Entry' where 'id' is not equal to 3 in Django", "Code": "Entry.objects.filter(~Q(id=3))"}, {"ID": 2850966, "NL Utterance": "lookup an attribute in any scope by name 'range'", "Code": "getattr(__builtins__, 'range')"}, {"ID": 14764126, "NL Utterance": "restart a computer after `900` seconds using subprocess", "Code": "subprocess.call(['shutdown', '/r', '/t', '900'])"}, {"ID": 14764126, "NL Utterance": "shutdown a computer using subprocess", "Code": "subprocess.call(['shutdown', '/s'])"}, {"ID": 14764126, "NL Utterance": "abort a computer shutdown using subprocess", "Code": "subprocess.call(['shutdown', '/a '])"}, {"ID": 14764126, "NL Utterance": "logoff computer having windows operating system using python", "Code": "subprocess.call(['shutdown', '/l '])"}, {"ID": 14764126, "NL Utterance": "shutdown and restart a computer running windows from script", "Code": "subprocess.call(['shutdown', '/r'])"}, {"ID": 2769061, "NL Utterance": "erase the contents of a file `filename`", "Code": "open('filename', 'w').close()"}, {"ID": 2769061, "NL Utterance": null, "Code": "open('file.txt', 'w').close()"}, {"ID": 29815129, "NL Utterance": "convert dataframe `df` to list of dictionaries including the index values", "Code": "df.to_dict('index')"}, {"ID": 29815129, "NL Utterance": "Create list of dictionaries from pandas dataframe `df`", "Code": "df.to_dict('records')"}, {"ID": 24082784, "NL Utterance": "Group a pandas data frame by monthly frequenct `M` using groupby", "Code": "df.groupby(pd.TimeGrouper(freq='M'))"}, {"ID": 3731426, "NL Utterance": "divide the members of a list `conversions` by the corresponding members of another list `trials`", "Code": "[(c / t) for c, t in zip(conversions, trials)]"}, {"ID": 16772071, "NL Utterance": "sort dict `data` by value", "Code": "sorted(data, key=data.get)"}, {"ID": 16772071, "NL Utterance": "Sort a dictionary `data` by its values", "Code": "sorted(data.values())"}, {"ID": 16772071, "NL Utterance": "Get a list of pairs of key-value sorted by values in dictionary `data`", "Code": "sorted(list(data.items()), key=lambda x: x[1])"}, {"ID": 16772071, "NL Utterance": null, "Code": "sorted(list(data.items()), key=lambda x: x[1])"}, {"ID": 5110352, "NL Utterance": "display current time", "Code": "now = datetime.datetime.now().strftime('%H:%M:%S')"}, {"ID": 1883980, "NL Utterance": "find the index of the second occurrence of the substring `bar` in string `foo bar bar bar`", "Code": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')"}, {"ID": 2813806, "NL Utterance": "check if key 'stackoverflow' and key 'google' are presented in dictionary `sites`", "Code": "set(['stackoverflow', 'google']).issubset(sites)"}, {"ID": 10037742, "NL Utterance": "replace string ' and ' in string `stuff` with character '/'", "Code": "stuff.replace(' and ', '/')"}, {"ID": 22712292, "NL Utterance": "Save array at index 0, index 1 and index 8 of array `np` to tmp file `tmp`", "Code": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])"}, {"ID": 14043934, "NL Utterance": "substract 1 hour and 10 minutes from current time", "Code": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))"}, {"ID": 14043934, "NL Utterance": "subtract 1 hour and 10 minutes from time object `t`", "Code": "(t - datetime.timedelta(hours=1, minutes=10))"}, {"ID": 14043934, "NL Utterance": "add 1 hour and 2 minutes to time object `t`", "Code": "dt = datetime.datetime.combine(datetime.date.today(), t)"}, {"ID": 14043934, "NL Utterance": "subtract 5 hours from the time object `dt`", "Code": "dt -= datetime.timedelta(hours=5)"}, {"ID": 3059301, "NL Utterance": "encode string `data` using hex 'hex' encoding", "Code": "print(data.encode('hex'))"}, {"ID": 3059301, "NL Utterance": "Return the decimal value for each hex character in data `data`", "Code": "print(' '.join([str(ord(a)) for a in data]))"}, {"ID": 18131367, "NL Utterance": "Get all the items from a list of tuple 'l' where second item in tuple is '1'.", "Code": "[x for x in l if x[1] == 1]"}, {"ID": 8192379, "NL Utterance": "Create array `a` containing integers from stdin", "Code": "a.fromlist([int(val) for val in stdin.read().split()])"}, {"ID": 26155985, "NL Utterance": "place '\\' infront of each non-letter char in string `line`", "Code": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))"}, {"ID": 2755950, "NL Utterance": "Get all `a` tags where the text starts with value `some text` using regex", "Code": "doc.xpath(\"//a[starts-with(text(),'some text')]\")"}, {"ID": 35017035, "NL Utterance": "convert a list of lists `a` into list of tuples of appropriate elements form nested lists", "Code": "zip(*a)"}, {"ID": 34696853, "NL Utterance": "convert a list of strings `lst` to list of integers", "Code": "[map(int, sublist) for sublist in lst]"}, {"ID": 34696853, "NL Utterance": "convert strings in list-of-lists `lst` to ints", "Code": "[[int(x) for x in sublist] for sublist in lst]"}, {"ID": 28901311, "NL Utterance": "get index of elements in array `A` that occur in another array `B`", "Code": "np.where(np.in1d(A, B))[0]"}, {"ID": 1780174, "NL Utterance": "create a list where each element is a dictionary with keys 'key1' and 'key2' and values corresponding to each value in the lists referenced by keys 'key1' and 'key2' in dictionary `d`", "Code": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]"}, {"ID": 1780174, "NL Utterance": null, "Code": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))"}, {"ID": 42950, "NL Utterance": "Get Last Day of the first month in 2002", "Code": "calendar.monthrange(2002, 1)"}, {"ID": 42950, "NL Utterance": "Get Last Day of the second month in 2002", "Code": "calendar.monthrange(2008, 2)"}, {"ID": 42950, "NL Utterance": "Get Last Day of the second month in 2100", "Code": "calendar.monthrange(2100, 2)"}, {"ID": 42950, "NL Utterance": "Get Last Day of the month `month` in year `year`", "Code": "calendar.monthrange(year, month)[1]"}, {"ID": 42950, "NL Utterance": "Get Last Day of the second month in year 2012", "Code": "monthrange(2012, 2)"}, {"ID": 42950, "NL Utterance": "Get Last Day of the first month in year 2000", "Code": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))"}, {"ID": 89228, "NL Utterance": "Calling an external command \"ls -l\"", "Code": "from subprocess import call"}, {"ID": 89228, "NL Utterance": "Calling an external command \"some_command with args\"", "Code": "os.system('some_command with args')"}, {"ID": 89228, "NL Utterance": "Calling an external command \"some_command < input_file | another_command > output_file\"", "Code": "os.system('some_command < input_file | another_command > output_file')"}, {"ID": 89228, "NL Utterance": "Calling an external command \"some_command with args\"", "Code": "stream = os.popen('some_command with args')"}, {"ID": 89228, "NL Utterance": "Calling an external command \"echo Hello World\"", "Code": "print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())"}, {"ID": 89228, "NL Utterance": "Calling an external command \"echo Hello World\"", "Code": "print(os.popen('echo Hello World').read())"}, {"ID": 89228, "NL Utterance": "Calling an external command \"echo Hello World\"", "Code": "return_code = subprocess.call('echo Hello World', shell=True)"}, {"ID": 89228, "NL Utterance": "Calling an external command \"ls\"", "Code": "p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()"}, {"ID": 89228, "NL Utterance": "Calling an external command \"ls -l\"", "Code": "call(['ls', '-l'])"}, {"ID": 16566069, "NL Utterance": "decode url `url` with utf8 and print it", "Code": "print(urllib.parse.unquote(url).decode('utf8'))"}, {"ID": 16566069, "NL Utterance": "decode a urllib escaped url string `url` with `utf8`", "Code": "url = urllib.parse.unquote(url).decode('utf8')"}, {"ID": 14750675, "NL Utterance": "delete letters from string '12454v'", "Code": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))"}, {"ID": 25292838, "NL Utterance": "Update row values for a column `Season` using vectorized string operation in pandas", "Code": "df['Season'].str.split('-').str[0].astype(int)"}, {"ID": 8459231, "NL Utterance": "sort a list of tuples `my_list` by second parameter in the tuple", "Code": "my_list.sort(key=lambda x: x[1])"}, {"ID": 4664850, "NL Utterance": "find indexes of all occurrences of a substring `tt` in a string `ttt`", "Code": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]"}, {"ID": 4664850, "NL Utterance": "find all occurrences of a substring in a string", "Code": "[m.start() for m in re.finditer('test', 'test test test test')]"}, {"ID": 35005907, "NL Utterance": "split string `s` based on white spaces", "Code": "re.findall('\\\\s+|\\\\S+', s)"}, {"ID": 18071222, "NL Utterance": "set columns `['race_date', 'track_code', 'race_number']` as indexes in dataframe `rdata`", "Code": "rdata.set_index(['race_date', 'track_code', 'race_number'])"}, {"ID": 13571134, "NL Utterance": "recursively go through all subdirectories and files in `rootdir`", "Code": "for (root, subFolders, files) in os.walk(rootdir):\n    pass"}, {"ID": 652291, "NL Utterance": "sort a list of dictionary values by 'date' in reverse order", "Code": "list.sort(key=lambda item: item['date'], reverse=True)"}, {"ID": 24076297, "NL Utterance": "display first 5 characters of string 'aaabbbccc'", "Code": "\"\"\"{:.5}\"\"\".format('aaabbbccc')"}, {"ID": 14961562, "NL Utterance": "unpack hexadecimal string `s` to a list of integer values", "Code": "struct.unpack('11B', s)"}, {"ID": 176918, "NL Utterance": "finding the index of an item 'foo' given a list `['foo', 'bar', 'baz']` containing it", "Code": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']"}, {"ID": 104420, "NL Utterance": "generate all permutations of list `[1, 2, 3]` and list `[4, 5, 6]`", "Code": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))"}, {"ID": 104420, "NL Utterance": "generate all permutations of a list `[1, 2, 3]`", "Code": "itertools.permutations([1, 2, 3])"}, {"ID": 11066400, "NL Utterance": "substitute occurrences of unicode regex pattern u'\\\\p{P}+' with empty string '' in string `text`", "Code": "return re.sub('\\\\p{P}+', '', text)"}, {"ID": 2052390, "NL Utterance": "manually throw/raise a `ValueError` exception with the message 'A very specific bad thing happened'", "Code": "raise ValueError('A very specific bad thing happened')"}, {"ID": 2052390, "NL Utterance": "throw an exception \"I know Python!\"", "Code": "raise Exception('I know Python!')"}, {"ID": 2052390, "NL Utterance": "Manually throw an exception \"I know python!\"", "Code": "raise Exception('I know python!')"}, {"ID": 2052390, "NL Utterance": "throw a ValueError with message 'represents a hidden bug, do not catch this'", "Code": "raise ValueError('represents a hidden bug, do not catch this')"}, {"ID": 2052390, "NL Utterance": "throw an Exception with message 'This is the exception you expect to handle'", "Code": "raise Exception('This is the exception you expect to handle')"}, {"ID": 2052390, "NL Utterance": "throw a value error with message 'A very specific bad thing happened', 'foo', 'bar', 'baz'", "Code": "raise ValueError('A very specific bad thing happened')"}, {"ID": 2052390, "NL Utterance": "throw a runtime error with message 'specific message'", "Code": "raise RuntimeError('specific message')"}, {"ID": 2052390, "NL Utterance": "throw an assertion error with message \"Unexpected value of 'distance'!\", distance", "Code": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)"}, {"ID": 7732125, "NL Utterance": "if Selenium textarea element `foo` is not empty, clear the field", "Code": "driver.find_element_by_id('foo').clear()"}, {"ID": 7732125, "NL Utterance": "clear text from textarea 'foo' with selenium", "Code": "driver.find_element_by_id('foo').clear()"}, {"ID": 9590965, "NL Utterance": "convert a number 2130706433 to ip string", "Code": "socket.inet_ntoa(struct.pack('!L', 2130706433))"}, {"ID": 12329853, "NL Utterance": "Rearrange the columns 'a','b','x','y' of pandas DataFrame `df` in mentioned sequence 'x' ,'y','a' ,'b'", "Code": "df = df[['x', 'y', 'a', 'b']]"}, {"ID": 19205916, "NL Utterance": "call base class's __init__ method from the child class `ChildClass`", "Code": "super(ChildClass, self).__init__(*args, **kwargs)"}, {"ID": 4880960, "NL Utterance": "sum of all values in a python dict `d`", "Code": "sum(d.values())"}, {"ID": 4880960, "NL Utterance": null, "Code": "sum(d.values())"}, {"ID": 14661051, "NL Utterance": "convert python dictionary `your_data` to json array", "Code": "json.dumps(your_data, ensure_ascii=False)"}, {"ID": 23638638, "NL Utterance": "assign an array of floats in range from 0 to 100 to a variable `values`", "Code": "values = np.array([i for i in range(100)], dtype=np.float64)"}, {"ID": 35078261, "NL Utterance": "sort a list of dictionaries `list_of_dct` by values in an order `order`", "Code": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))"}, {"ID": 4223923, "NL Utterance": "change the case of the first letter in string `s`", "Code": "return s[0].upper() + s[1:]"}, {"ID": 2597932, "NL Utterance": "join list of numbers `[1,2,3,4] ` to string of numbers.", "Code": "\"\"\"\"\"\".join([1, 2, 3, 4])"}, {"ID": 26541968, "NL Utterance": "delete every non `utf-8` characters from a string `line`", "Code": "line = line.decode('utf-8', 'ignore').encode('utf-8')"}, {"ID": 33065588, "NL Utterance": "execute a command `command ` in the terminal from a python script", "Code": "os.system(command)"}, {"ID": 775296, "NL Utterance": "MySQL execute query 'SELECT * FROM foo WHERE bar = %s AND baz = %s' with parameters `param1` and `param2`", "Code": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))"}, {"ID": 5868374, "NL Utterance": "Parse string `datestr` into a datetime object using format pattern '%Y-%m-%d'", "Code": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()"}], "test": [{"ID": 15080500, "NL Utterance": "send a signal `signal.SIGUSR1` to the current process", "Code": "os.kill(os.getpid(), signal.SIGUSR1)"}, {"ID": 3283984, "NL Utterance": "decode a hex string '4a4b4c' to UTF-8.", "Code": "bytes.fromhex('4a4b4c').decode('utf-8')"}, {"ID": 3844801, "NL Utterance": "check if all elements in list `myList` are identical", "Code": "all(x == myList[0] for x in myList)"}, {"ID": 4302166, "NL Utterance": "format number of spaces between strings `Python`, `:` and `Very Good` to be `20`", "Code": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))"}, {"ID": 7555335, "NL Utterance": null, "Code": "d.decode('cp1251').encode('utf8')"}, {"ID": 2544710, "NL Utterance": "get rid of None values in dictionary `kwargs`", "Code": "res = {k: v for k, v in list(kwargs.items()) if v is not None}"}, {"ID": 2544710, "NL Utterance": "get rid of None values in dictionary `kwargs`", "Code": "res = dict((k, v) for k, v in kwargs.items() if v is not None)"}, {"ID": 14971373, "NL Utterance": "capture final output of a chain of system commands `ps -ef | grep something | wc -l`", "Code": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)"}, {"ID": 6726636, "NL Utterance": "concatenate a list of strings `['a', 'b', 'c']`", "Code": "\"\"\"\"\"\".join(['a', 'b', 'c'])"}, {"ID": 18079563, "NL Utterance": "find intersection data between series `s1` and series `s2`", "Code": "pd.Series(list(set(s1).intersection(set(s2))))"}, {"ID": 8315209, "NL Utterance": "sending http headers to `client`", "Code": "client.send('HTTP/1.0 200 OK\\r\\n')"}, {"ID": 26153795, "NL Utterance": "Format a datetime string `when` to extract date only", "Code": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()"}, {"ID": 172439, "NL Utterance": "split a multi-line string `inputString` into separate strings", "Code": "inputString.split('\\n')"}, {"ID": 172439, "NL Utterance": "Split a multi-line string ` a \\n b \\r\\n c ` by new line character `\\n`", "Code": "' a \\n b \\r\\n c '.split('\\n')"}, {"ID": 13954222, "NL Utterance": "concatenate elements of list `b` by a colon \":\"", "Code": "\"\"\":\"\"\".join(str(x) for x in b)"}, {"ID": 5123839, "NL Utterance": "get the first object from a queryset in django model `Entry`", "Code": "Entry.objects.filter()[:1].get()"}, {"ID": 13567345, "NL Utterance": "Calculate sum over all rows of 2D numpy array", "Code": "a.sum(axis=1)"}, {"ID": 29784889, "NL Utterance": "enable warnings using action 'always'", "Code": "warnings.simplefilter('always')"}, {"ID": 13550423, "NL Utterance": "concatenate items of list `l` with a space ' '", "Code": "print(' '.join(map(str, l)))"}, {"ID": 25651990, "NL Utterance": "run script 'hello.py' with argument 'htmlfilename.htm' on terminal using python executable", "Code": "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])"}, {"ID": 698223, "NL Utterance": null, "Code": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')"}, {"ID": 6633523, "NL Utterance": "convert a string `my_string` with dot and comma into a float number `my_float`", "Code": "my_float = float(my_string.replace(',', ''))"}, {"ID": 6633523, "NL Utterance": "convert a string `123,456.908` with dot and comma into a floating number", "Code": "float('123,456.908'.replace(',', ''))"}, {"ID": 3108285, "NL Utterance": "set pythonpath in python script.", "Code": "sys.path.append('/path/to/whatever')"}, {"ID": 2195340, "NL Utterance": "split string 'Words, words, words.' using a regex '(\\\\W+)'", "Code": "re.split('(\\\\W+)', 'Words, words, words.')"}, {"ID": 17977584, "NL Utterance": "open a file `Output.txt` in append mode", "Code": "file = open('Output.txt', 'a')"}, {"ID": 22676, "NL Utterance": "download a file \"http://www.example.com/songs/mp3.mp3\" over HTTP and save to \"mp3.mp3\"", "Code": "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')"}, {"ID": 22676, "NL Utterance": "download a file `url` over HTTP and save to `file_name`", "Code": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()"}, {"ID": 22676, "NL Utterance": "download a file 'http://www.example.com/' over HTTP", "Code": "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()"}, {"ID": 22676, "NL Utterance": "download a file `url` over HTTP", "Code": "r = requests.get(url)"}, {"ID": 22676, "NL Utterance": "download a file `url` over HTTP and save to \"10MB\"", "Code": "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)"}, {"ID": 15405636, "NL Utterance": "argparse add argument with flag '--version' and version action of '%(prog)s 2.0' to parser `parser`", "Code": "parser.add_argument('--version', action='version', version='%(prog)s 2.0')"}, {"ID": 17665809, "NL Utterance": "remove key 'c' from dictionary `d`", "Code": "{i: d[i] for i in d if i != 'c'}"}, {"ID": 41861705, "NL Utterance": "Create new DataFrame object by merging columns \"key\" of  dataframes `split_df` and `csv_df` and rename the columns from dataframes `split_df` and `csv_df` with suffix `_left` and `_right` respectively", "Code": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))"}, {"ID": 10697757, "NL Utterance": "Split a string `s` by space with `4` splits", "Code": "s.split(' ', 4)"}, {"ID": 5404068, "NL Utterance": "read keyboard-input", "Code": "input('Enter your input:')"}, {"ID": 16344756, "NL Utterance": "enable debug mode on Flask application `app`", "Code": "app.run(debug=True)"}, {"ID": 40133826, "NL Utterance": "python save list `mylist` to file object 'save.txt'", "Code": "pickle.dump(mylist, open('save.txt', 'wb'))"}, {"ID": 4490961, "NL Utterance": "Multiply a matrix `P` with a 3d tensor `T` in scipy", "Code": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)"}, {"ID": 2173087, "NL Utterance": "Create 3d array of zeroes of size `(3,3,3)`", "Code": "numpy.zeros((3, 3, 3))"}, {"ID": 6266727, "NL Utterance": "cut off the last word of a sentence `content`", "Code": "\"\"\" \"\"\".join(content.split(' ')[:-1])"}, {"ID": 30385151, "NL Utterance": "convert scalar `x` to array", "Code": "x = np.asarray(x).reshape(1, -1)[(0), :]"}, {"ID": 15856127, "NL Utterance": "sum all elements of nested list `L`", "Code": "sum(sum(i) if isinstance(i, list) else i for i in L)"}, {"ID": 1592158, "NL Utterance": "convert hex string '470FC614' to a float number", "Code": "struct.unpack('!f', '470FC614'.decode('hex'))[0]"}, {"ID": 5010536, "NL Utterance": "Multiple each value by `2` for all keys in a dictionary `my_dict`", "Code": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))"}, {"ID": 13745648, "NL Utterance": "running bash script 'sleep.sh'", "Code": "subprocess.call('sleep.sh', shell=True)"}, {"ID": 44778, "NL Utterance": "Join elements of list `l` with a comma `,`", "Code": "\"\"\",\"\"\".join(l)"}, {"ID": 44778, "NL Utterance": "make a comma-separated string from a list `myList`", "Code": "myList = ','.join(map(str, myList))"}, {"ID": 7286365, "NL Utterance": "reverse the list that contains 1 to 10", "Code": "list(reversed(list(range(10))))"}, {"ID": 18454570, "NL Utterance": "remove substring 'bag,' from a string 'lamp, bag, mirror'", "Code": "print('lamp, bag, mirror'.replace('bag,', ''))"}, {"ID": 4357787, "NL Utterance": "Reverse the order of words, delimited by `.`, in string `s`", "Code": "\"\"\".\"\"\".join(s.split('.')[::-1])"}, {"ID": 21787496, "NL Utterance": "convert epoch time represented as milliseconds `s` to string using format '%Y-%m-%d %H:%M:%S.%f'", "Code": "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')"}, {"ID": 21787496, "NL Utterance": "parse milliseconds epoch time '1236472051807' to format '%Y-%m-%d %H:%M:%S'", "Code": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))"}, {"ID": 20573459, "NL Utterance": "get the date 7 days before the current date", "Code": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()"}, {"ID": 15352457, "NL Utterance": "sum elements at index `column` of each list in list `data`", "Code": "print(sum(row[column] for row in data))"}, {"ID": 15352457, "NL Utterance": "sum columns of a list `array`", "Code": "[sum(row[i] for row in array) for i in range(len(array[0]))]"}, {"ID": 23164058, "NL Utterance": "encode binary string 'your string' to base64 code", "Code": "base64.b64encode(bytes('your string', 'utf-8'))"}, {"ID": 11533274, "NL Utterance": "combine list of dictionaries `dicts` with the same keys in each list to a single dictionary", "Code": "dict((k, [d[k] for d in dicts]) for k in dicts[0])"}, {"ID": 11533274, "NL Utterance": "Merge a nested dictionary `dicts` into a flat dictionary by concatenating nested values with the same key `k`", "Code": "{k: [d[k] for d in dicts] for k in dicts[0]}"}, {"ID": 14026704, "NL Utterance": null, "Code": "request.args['myParam']"}, {"ID": 11236006, "NL Utterance": "identify duplicate values in list `mylist`", "Code": "[k for k, v in list(Counter(mylist).items()) if v > 1]"}, {"ID": 2354166, "NL Utterance": "Insert directory 'apps' into directory `__file__`", "Code": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))"}, {"ID": 2354166, "NL Utterance": "modify sys.path for python module `subdir`", "Code": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))"}, {"ID": 20211942, "NL Utterance": "Insert a 'None' value into a SQLite3 table.", "Code": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))"}, {"ID": 406121, "NL Utterance": "flatten list `list_of_menuitems`", "Code": "[image for menuitem in list_of_menuitems for image in menuitem]"}, {"ID": 4741537, "NL Utterance": "append elements of a set `b` to a list `a`", "Code": "a.extend(b)"}, {"ID": 4741537, "NL Utterance": null, "Code": "a.extend(list(b))"}, {"ID": 31247198, "NL Utterance": "write the data of dataframe `df` into text file `np.txt`", "Code": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')"}, {"ID": 31247198, "NL Utterance": "write content of DataFrame `df` into text file 'c:\\\\data\\\\pandas.txt'", "Code": "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')"}, {"ID": 15851568, "NL Utterance": "Split a string `x` by last occurrence of character `-`", "Code": "print(x.rpartition('-')[0])"}, {"ID": 15851568, "NL Utterance": "get the last part of a string before the character '-'", "Code": "print(x.rsplit('-', 1)[0])"}, {"ID": 17438096, "NL Utterance": "upload file using FTP", "Code": "ftp.storlines('STOR ' + filename, open(filename, 'r'))"}, {"ID": 15049182, "NL Utterance": "add one to the hidden web element with id 'XYZ' with selenium python script", "Code": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")"}, {"ID": 28742436, "NL Utterance": "create array containing the maximum value of respective elements of array `[2, 3, 4]` and array `[1, 5, 2]`", "Code": "np.maximum([2, 3, 4], [1, 5, 2])"}, {"ID": 34280147, "NL Utterance": "print a list `l` and move first 3 elements to the end of the list", "Code": "print(l[3:] + l[:3])"}, {"ID": 11801309, "NL Utterance": "loop over files in directory '.'", "Code": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass"}, {"ID": 11801309, "NL Utterance": "loop over files in directory `source`", "Code": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass"}, {"ID": 4172131, "NL Utterance": "create a random list of integers", "Code": "[int(1000 * random.random()) for i in range(10000)]"}, {"ID": 6677332, "NL Utterance": null, "Code": "datetime.datetime.now().strftime('%H:%M:%S.%f')"}, {"ID": 852055, "NL Utterance": "Google App Engine execute GQL query 'SELECT * FROM Schedule WHERE station = $1' with parameter `foo.key()`", "Code": "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())"}, {"ID": 15325182, "NL Utterance": "filter rows in pandas starting with alphabet 'f' using regular expression.", "Code": "df.b.str.contains('^f')"}, {"ID": 583557, "NL Utterance": "print a 2 dimensional list `tab` as a table with delimiters", "Code": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))"}, {"ID": 38535931, "NL Utterance": "pandas: delete rows in dataframe `df` based on multiple columns values", "Code": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()"}, {"ID": 13945749, "NL Utterance": "format the variables `self.goals` and `self.penalties` using string formatting", "Code": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)"}, {"ID": 13945749, "NL Utterance": "format string \"({} goals, ${})\" with variables `goals` and `penalties`", "Code": "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)"}, {"ID": 13945749, "NL Utterance": "format string \"({0.goals} goals, ${0.penalties})\"", "Code": "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)"}, {"ID": 18524642, "NL Utterance": "convert list of lists `L` to list of integers", "Code": "[int(''.join(str(d) for d in x)) for x in L]"}, {"ID": 18524642, "NL Utterance": "combine elements of each list in list `L` into digits of a single integer", "Code": "[''.join(str(d) for d in x) for x in L]"}, {"ID": 18524642, "NL Utterance": "convert a list of lists `L` to list of integers", "Code": "L = [int(''.join([str(y) for y in x])) for x in L]"}, {"ID": 7138686, "NL Utterance": "write the elements of list `lines` concatenated by special character '\\n' to file `myfile`", "Code": "myfile.write('\\n'.join(lines))"}, {"ID": 1866343, "NL Utterance": "removing an element from a list based on a predicate 'X' or 'N'", "Code": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]"}, {"ID": 17238587, "NL Utterance": "Remove duplicate words from a string `text` using regex", "Code": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)"}, {"ID": 26053849, "NL Utterance": "count non zero values in each column in pandas data frame", "Code": "df.astype(bool).sum(axis=1)"}, {"ID": 15534223, "NL Utterance": "search for string that matches regular expression pattern '(?<!Distillr)\\\\\\\\AcroTray\\\\.exe' in string 'C:\\\\SomeDir\\\\AcroTray.exe'", "Code": "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')"}, {"ID": 5453026, "NL Utterance": "split string 'QH QD JC KD JS' into a list on white spaces", "Code": "\"\"\"QH QD JC KD JS\"\"\".split()"}, {"ID": 18168684, "NL Utterance": "search for occurrences of regex pattern '>.*<' in xml string `line`", "Code": "print(re.search('>.*<', line).group(0))"}, {"ID": 4914277, "NL Utterance": "erase all the contents of a file `filename`", "Code": "open(filename, 'w').close()"}, {"ID": 19068269, "NL Utterance": "convert a string into datetime using the format '%Y-%m-%d %H:%M:%S.%f'", "Code": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')"}, {"ID": 20683167, "NL Utterance": "find the index of a list with the first element equal to '332' within the list of lists `thelist`", "Code": "[index for index, item in enumerate(thelist) if item[0] == '332']"}, {"ID": 30693804, "NL Utterance": "lower a string `text` and remove non-alphanumeric characters aside from space", "Code": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()"}, {"ID": 30693804, "NL Utterance": "remove all non-alphanumeric characters except space from a string `text` and lower it", "Code": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()"}, {"ID": 17138464, "NL Utterance": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "Code": "plt.plot(x, y, label='H\\u2082O')"}, {"ID": 17138464, "NL Utterance": "subscript text 'H20' with '2' as subscripted in matplotlib labels for arrays 'x' and 'y'.", "Code": "plt.plot(x, y, label='$H_2O$')"}, {"ID": 9138112, "NL Utterance": "loop over a list `mylist` if sublists length equals 3", "Code": "[x for x in mylist if len(x) == 3]"}, {"ID": 1807026, "NL Utterance": "initialize a list `lst` of 100 objects Object()", "Code": "lst = [Object() for _ in range(100)]"}, {"ID": 1807026, "NL Utterance": "create list `lst` containing 100 instances of object `Object`", "Code": "lst = [Object() for i in range(100)]"}, {"ID": 19664253, "NL Utterance": "get the content of child tag with`href` attribute whose parent has css `someclass`", "Code": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')"}, {"ID": 13793321, "NL Utterance": "joining data from dataframe `df1` with data from dataframe `df2` based on matching values of column 'Date_Time' in both dataframes", "Code": "df1.merge(df2, on='Date_Time')"}, {"ID": 3367288, "NL Utterance": "use `%s` operator to print variable values `str1` inside a string", "Code": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')"}, {"ID": 3475251, "NL Utterance": null, "Code": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]"}, {"ID": 273192, "NL Utterance": "check if directory `directory ` exists and create it if necessary", "Code": "if (not os.path.exists(directory)):\n    os.makedirs(directory)"}, {"ID": 273192, "NL Utterance": "check if a directory `path` exists and create it if necessary", "Code": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise"}, {"ID": 273192, "NL Utterance": "check if a directory `path` exists and create it if necessary", "Code": "distutils.dir_util.mkpath(path)"}, {"ID": 273192, "NL Utterance": "check if a directory `path` exists and create it if necessary", "Code": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise"}, {"ID": 18785032, "NL Utterance": "Replace a separate word 'H3' by 'H1' in a string 'text'", "Code": "re.sub('\\\\bH3\\\\b', 'H1', text)"}, {"ID": 1450897, "NL Utterance": "substitute ASCII letters in string 'aas30dsa20' with empty string ''", "Code": "re.sub('\\\\D', '', 'aas30dsa20')"}, {"ID": 1450897, "NL Utterance": "get digits only from a string `aas30dsa20` using lambda function", "Code": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])"}, {"ID": 14435268, "NL Utterance": "access a tag called \"name\" in beautifulsoup `soup`", "Code": "print(soup.find('name').string)"}, {"ID": 4928274, "NL Utterance": "get a dictionary `records` of key-value pairs in PyMongo cursor `cursor`", "Code": "records = dict((record['_id'], record) for record in cursor)"}, {"ID": 20180210, "NL Utterance": "Create new matrix object  by concatenating data from matrix A and matrix B", "Code": "np.concatenate((A, B))"}, {"ID": 20180210, "NL Utterance": "concat two matrices `A` and `B` in numpy", "Code": "np.vstack((A, B))"}, {"ID": 2011048, "NL Utterance": "Get the characters count in a file `filepath`", "Code": "os.stat(filepath).st_size"}, {"ID": 2600191, "NL Utterance": "count the occurrences of item \"a\" in list `l`", "Code": "l.count('a')"}, {"ID": 2600191, "NL Utterance": "count the occurrences of items in list `l`", "Code": "Counter(l)"}, {"ID": 2600191, "NL Utterance": "count the occurrences of items in list `l`", "Code": "[[x, l.count(x)] for x in set(l)]"}, {"ID": 2600191, "NL Utterance": "count the occurrences of items in list `l`", "Code": "dict(((x, l.count(x)) for x in set(l)))"}, {"ID": 2600191, "NL Utterance": "count the occurrences of item \"b\" in list `l`", "Code": "l.count('b')"}, {"ID": 12842997, "NL Utterance": "copy file `srcfile` to directory `dstdir`", "Code": "shutil.copy(srcfile, dstdir)"}, {"ID": 1555968, "NL Utterance": "find the key associated with the largest value in dictionary `x` whilst key is non-zero value", "Code": "max(k for k, v in x.items() if v != 0)"}, {"ID": 1555968, "NL Utterance": "get the largest key whose not associated with value of 0 in dictionary `x`", "Code": "(k for k, v in x.items() if v != 0)"}, {"ID": 1555968, "NL Utterance": "get the largest key in a dictionary `x` with non-zero value", "Code": "max(k for k, v in x.items() if v != 0)"}, {"ID": 17021863, "NL Utterance": "Put the curser at beginning of the file", "Code": "file.seek(0)"}, {"ID": 38152389, "NL Utterance": "combine values from column 'b' and column 'a' of dataframe `df`  into column 'c' of datafram `df`", "Code": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])"}, {"ID": 4175686, "NL Utterance": "remove key 'ele' from dictionary `d`", "Code": "del d['ele']"}, {"ID": 5871168, "NL Utterance": "Update datetime field in `MyModel` to be the existing `timestamp` plus 100 years", "Code": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))"}, {"ID": 11574195, "NL Utterance": "merge list `['it']` and list `['was']` and list `['annoying']` into one list", "Code": "['it'] + ['was'] + ['annoying']"}, {"ID": 587647, "NL Utterance": "increment a value with leading zeroes in a number `x`", "Code": "str(int(x) + 1).zfill(len(x))"}, {"ID": 17315881, "NL Utterance": "check if a pandas dataframe `df`'s index is sorted", "Code": "all(df.index[:-1] <= df.index[1:])"}, {"ID": 16296643, "NL Utterance": "Convert tuple `t` to list", "Code": "list(t)"}, {"ID": 16296643, "NL Utterance": "Convert list `t` to tuple", "Code": "tuple(l)"}, {"ID": 16296643, "NL Utterance": "Convert tuple `level1` to list", "Code": "level1 = map(list, level1)"}, {"ID": 3880399, "NL Utterance": "send the output of pprint object `dataobject` to file `logFile`", "Code": "pprint.pprint(dataobject, logFile)"}, {"ID": 21800169, "NL Utterance": "get index of rows in column 'BoolCol'", "Code": "df.loc[df['BoolCol']]"}, {"ID": 21800169, "NL Utterance": "Create a list containing the indexes of rows where the value of column 'BoolCol' in dataframe `df` are equal to True", "Code": "df.iloc[np.flatnonzero(df['BoolCol'])]"}, {"ID": 21800169, "NL Utterance": "get list of indexes of rows where column 'BoolCol' values match True", "Code": "df[df['BoolCol'] == True].index.tolist()"}, {"ID": 21800169, "NL Utterance": "get index of rows in dataframe `df` which column 'BoolCol' matches value True", "Code": "df[df['BoolCol']].index.tolist()"}, {"ID": 299446, "NL Utterance": "change working directory to the directory `owd`", "Code": "os.chdir(owd)"}, {"ID": 14695134, "NL Utterance": "insert data from a string `testfield` to sqlite db `c`", "Code": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))"}, {"ID": 24242433, "NL Utterance": "decode string \"\\\\x89\\\\n\" into a normal string", "Code": "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')"}, {"ID": 24242433, "NL Utterance": "convert a raw string `raw_string` into a normal string", "Code": "raw_string.decode('string_escape')"}, {"ID": 24242433, "NL Utterance": "convert a raw string `raw_byte_string` into a normal string", "Code": "raw_byte_string.decode('unicode_escape')"}, {"ID": 22882922, "NL Utterance": "split a string `s` with into all strings of repeated characters", "Code": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]"}, {"ID": 4143502, "NL Utterance": "scatter a plot with x, y position of `np.random.randn(100)` and face color equal to none", "Code": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')"}, {"ID": 4143502, "NL Utterance": "do a scatter plot with empty circles", "Code": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')"}, {"ID": 32063985, "NL Utterance": "remove a div with a id `main-content` using beautifulsoup", "Code": "soup.find('div', id='main-content').decompose()"}, {"ID": 27975069, "NL Utterance": "filter rows containing key word `ball` in column `ids`", "Code": "df[df['ids'].str.contains('ball')]"}, {"ID": 20461165, "NL Utterance": "convert index at level 0 into a column in dataframe `df`", "Code": "df.reset_index(level=0, inplace=True)"}, {"ID": 20461165, "NL Utterance": "Add indexes in a data frame `df` to a column `index1`", "Code": "df['index1'] = df.index"}, {"ID": 20461165, "NL Utterance": "convert pandas index in a dataframe to columns", "Code": "df.reset_index(level=['tick', 'obs'])"}, {"ID": 4685571, "NL Utterance": "Get reverse of list items from list 'b' using extended slicing", "Code": "[x[::-1] for x in b]"}, {"ID": 17960441, "NL Utterance": "join each element in array `a` with element at the same index in array `b` as a tuple", "Code": "np.array([zip(x, y) for x, y in zip(a, b)])"}, {"ID": 17960441, "NL Utterance": "zip two 2-d arrays `a` and `b`", "Code": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)"}, {"ID": 438684, "NL Utterance": "convert list `list_of_ints` into a comma separated string", "Code": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])"}, {"ID": 8519922, "NL Utterance": "Send a post request with raw data `DATA` and basic authentication with `username` and `password`", "Code": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))"}, {"ID": 26443308, "NL Utterance": "Find last occurrence of character '}' in string \"abcd}def}\"", "Code": "'abcd}def}'.rfind('}')"}, {"ID": 22365172, "NL Utterance": "Iterate ove list `[1, 2, 3]` using list comprehension", "Code": "print([item for item in [1, 2, 3]])"}, {"ID": 12300912, "NL Utterance": "extract all the values with keys 'x' and 'y' from a list of dictionaries `d` to list of tuples", "Code": "[(x['x'], x['y']) for x in d]"}, {"ID": 678236, "NL Utterance": "get the filename without the extension from file 'hemanth.txt'", "Code": "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])"}, {"ID": 2597166, "NL Utterance": "create a dictionary by adding each two adjacent elements in tuple `x` as key/value pair to it", "Code": "dict(x[i:i + 2] for i in range(0, len(x), 2))"}, {"ID": 7895449, "NL Utterance": "create a list containing flattened list `[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]`", "Code": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])"}, {"ID": 31617845, "NL Utterance": "select rows in a dataframe `df` column 'closing_price' between two values 99 and 101", "Code": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]"}, {"ID": 25698710, "NL Utterance": "replace all occurences of newlines `\\n` with `<br>` in dataframe `df`", "Code": "df.replace({'\\n': '<br>'}, regex=True)"}, {"ID": 25698710, "NL Utterance": "replace all occurrences of a string `\\n` by string `<br>` in a pandas data frame `df`", "Code": "df.replace({'\\n': '<br>'}, regex=True)"}, {"ID": 41923858, "NL Utterance": "create a list containing each two adjacent letters in string `word` as its elements", "Code": "[(x + y) for x, y in zip(word, word[1:])]"}, {"ID": 41923858, "NL Utterance": "Get a list of pairs from a string `word` using lambda function", "Code": "list(map(lambda x, y: x + y, word[:-1], word[1:]))"}, {"ID": 9760588, "NL Utterance": "extract a url from a string `myString`", "Code": "print(re.findall('(https?://[^\\\\s]+)', myString))"}, {"ID": 9760588, "NL Utterance": "extract a url from a string `myString`", "Code": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))"}, {"ID": 5843518, "NL Utterance": "remove all special characters, punctuation and spaces from a string `mystring` using regex", "Code": "re.sub('[^A-Za-z0-9]+', '', mystring)"}, {"ID": 36674519, "NL Utterance": "create a DatetimeIndex containing 13 periods of the second friday of each month starting from date '2016-01-01'", "Code": "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)"}, {"ID": 508657, "NL Utterance": "Create multidimensional array `matrix` with 3 rows and 2 columns in python", "Code": "matrix = [[a, b], [c, d], [e, f]]"}, {"ID": 1007481, "NL Utterance": "replace spaces with underscore", "Code": "mystring.replace(' ', '_')"}, {"ID": 51520, "NL Utterance": "get an absolute file path of file 'mydir/myfile.txt'", "Code": "os.path.abspath('mydir/myfile.txt')"}, {"ID": 1249786, "NL Utterance": "split string `my_string` on white spaces", "Code": "\"\"\" \"\"\".join(my_string.split())"}, {"ID": 4444923, "NL Utterance": "get filename without extension from file `filename`", "Code": "os.path.splitext(filename)[0]"}, {"ID": 13728486, "NL Utterance": "get a list containing the sum of each element `i` in list `l` plus the previous elements", "Code": "[sum(l[:i]) for i, _ in enumerate(l)]"}, {"ID": 9743134, "NL Utterance": "split a string `Docs/src/Scripts/temp` by `/` keeping `/` in the result", "Code": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')"}, {"ID": 20546419, "NL Utterance": "shuffle columns of an numpy array 'r'", "Code": "np.random.shuffle(np.transpose(r))"}, {"ID": 32675861, "NL Utterance": "copy all values in a column 'B' to a new column 'D' in a pandas data frame 'df'", "Code": "df['D'] = df['B']"}, {"ID": 14227561, "NL Utterance": "find a value within nested json 'data' where the key inside another key 'B' is unknown.", "Code": "list(data['A']['B'].values())[0]['maindata'][0]['Info']"}, {"ID": 14858916, "NL Utterance": "check characters of string `string` are true predication of function `predicate`", "Code": "all(predicate(x) for x in string)"}, {"ID": 574236, "NL Utterance": "determine number of files on a drive with python", "Code": "os.statvfs('/').f_files - os.statvfs('/').f_ffree"}, {"ID": 7011291, "NL Utterance": null, "Code": "cursor.fetchone()[0]"}, {"ID": 6378889, "NL Utterance": "convert string `user_input` into a list of integers `user_list`", "Code": "user_list = [int(number) for number in user_input.split(',')]"}, {"ID": 6378889, "NL Utterance": "Get a list of integers by splitting  a string `user` with comma", "Code": "[int(s) for s in user.split(',')]"}, {"ID": 5212870, "NL Utterance": null, "Code": "sorted(list, key=lambda x: (x[0], -x[1]))"}, {"ID": 403421, "NL Utterance": "sort a list of objects `ut`, based on a function `cmpfun` in descending order", "Code": "ut.sort(key=cmpfun, reverse=True)"}, {"ID": 403421, "NL Utterance": "reverse list `ut` based on the `count` attribute of each object", "Code": "ut.sort(key=lambda x: x.count, reverse=True)"}, {"ID": 403421, "NL Utterance": "sort a list of objects `ut` in reverse order by their `count` property", "Code": "ut.sort(key=lambda x: x.count, reverse=True)"}, {"ID": 19601086, "NL Utterance": "click a href button 'Send' with selenium", "Code": "driver.find_element_by_partial_link_text('Send').click()"}, {"ID": 19601086, "NL Utterance": "click a href button having text `Send InMail` with selenium", "Code": "driver.findElement(By.linkText('Send InMail')).click()"}, {"ID": 19601086, "NL Utterance": "click a href button with text 'Send InMail' with selenium", "Code": "driver.find_element_by_link_text('Send InMail').click()"}, {"ID": 3944876, "NL Utterance": "cast an int `i` to a string and concat to string 'ME'", "Code": "'ME' + str(i)"}, {"ID": 40903174, "NL Utterance": null, "Code": "df.sort_values(['System_num', 'Dis'])"}, {"ID": 4454298, "NL Utterance": "prepend the line '#test firstline\\n' to the contents of file 'infile' and save as the file 'outfile'", "Code": "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())"}, {"ID": 19729928, "NL Utterance": "sort a list `l` by length of value in tuple", "Code": "l.sort(key=lambda t: len(t[1]), reverse=True)"}, {"ID": 31371879, "NL Utterance": "split string `s` by words that ends with 'd'", "Code": "re.findall('\\\\b(\\\\w+)d\\\\b', s)"}, {"ID": 9012008, "NL Utterance": "return `True` if string `foobarrrr` contains regex `ba[rzd]`", "Code": "bool(re.search('ba[rzd]', 'foobarrrr'))"}, {"ID": 7961363, "NL Utterance": "Removing duplicates in list `t`", "Code": "list(set(t))"}, {"ID": 7961363, "NL Utterance": "Removing duplicates in list `source_list`", "Code": "list(set(source_list))"}, {"ID": 7961363, "NL Utterance": "Removing duplicates in list `abracadabra`", "Code": "list(OrderedDict.fromkeys('abracadabra'))"}, {"ID": 5183533, "NL Utterance": "Convert array `a` into a list", "Code": "numpy.array(a).reshape(-1).tolist()"}, {"ID": 5183533, "NL Utterance": "Convert the first row of numpy matrix `a` to a list", "Code": "numpy.array(a)[0].tolist()"}, {"ID": 5999747, "NL Utterance": "In `soup`, get the content of the sibling of the `td`  tag with text content `Address:`", "Code": "print(soup.find(text='Address:').findNext('td').contents[0])"}, {"ID": 4284648, "NL Utterance": "convert elements of each tuple in list `l` into a string  separated by character `@`", "Code": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])"}, {"ID": 4284648, "NL Utterance": "convert each tuple in list `l` to a string with '@' separating the tuples' elements", "Code": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])"}, {"ID": 26809954, "NL Utterance": "get the html from the current web page of a Selenium driver", "Code": "driver.execute_script('return document.documentElement.outerHTML;')"}, {"ID": 29696641, "NL Utterance": "Get all matches with regex pattern `\\\\d+[xX]` in list of string `teststr`", "Code": "[i for i in teststr if re.search('\\\\d+[xX]', i)]"}, {"ID": 15315452, "NL Utterance": "select values from column 'A' for which corresponding values in column 'B' will be greater than 50, and in column 'C' - equal 900 in dataframe `df`", "Code": "df['A'][(df['B'] > 50) & (df['C'] == 900)]"}, {"ID": 4642501, "NL Utterance": "Sort dictionary `o` in ascending order based on its keys and items", "Code": "sorted(o.items())"}, {"ID": 4642501, "NL Utterance": "get sorted list of keys of dict `d`", "Code": "sorted(d)"}, {"ID": 4642501, "NL Utterance": null, "Code": "sorted(d.items())"}, {"ID": 642154, "NL Utterance": "convert string \"1\" into integer", "Code": "int('1')"}, {"ID": 642154, "NL Utterance": "function to convert strings into integers", "Code": "int()"}, {"ID": 642154, "NL Utterance": "convert items in `T1` to integers", "Code": "T2 = [map(int, x) for x in T1]"}, {"ID": 3777301, "NL Utterance": "call a shell script `./test.sh` using subprocess", "Code": "subprocess.call(['./test.sh'])"}, {"ID": 3777301, "NL Utterance": "call a shell script `notepad` using subprocess", "Code": "subprocess.call(['notepad'])"}, {"ID": 7946798, "NL Utterance": "combine lists `l1` and `l2`  by alternating their elements", "Code": "[val for pair in zip(l1, l2) for val in pair]"}, {"ID": 8908287, "NL Utterance": "encode string 'data to be encoded'", "Code": "encoded = base64.b64encode('data to be encoded')"}, {"ID": 8908287, "NL Utterance": "encode a string `data to be encoded` to `ascii` encoding", "Code": "encoded = 'data to be encoded'.encode('ascii')"}, {"ID": 7856296, "NL Utterance": "parse tab-delimited CSV file 'text.txt' into a list", "Code": "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))"}, {"ID": 9035479, "NL Utterance": "Get attribute `my_str` of object `my_object`", "Code": "getattr(my_object, my_str)"}, {"ID": 5558418, "NL Utterance": "group a list of dicts `LD` into one dict by key", "Code": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))"}, {"ID": 638048, "NL Utterance": null, "Code": "sum([pair[0] for pair in list_of_pairs])"}, {"ID": 14950260, "NL Utterance": "convert unicode string u\"{'code1':1,'code2':1}\" into dictionary", "Code": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")"}, {"ID": 11416772, "NL Utterance": "find all words in a string `mystring` that start with the `$` sign", "Code": "[word for word in mystring.split() if word.startswith('$')]"}, {"ID": 11331982, "NL Utterance": "remove any url within string `text`", "Code": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)"}, {"ID": 34945274, "NL Utterance": "replace all elements in array `A` that are not present in array `[1, 3, 4]` with zeros", "Code": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)"}, {"ID": 15819980, "NL Utterance": "calculate mean across dimension in a 2d array `a`", "Code": "np.mean(a, axis=1)"}, {"ID": 19894365, "NL Utterance": "running r script '/pathto/MyrScript.r' from python", "Code": "subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])"}, {"ID": 19894365, "NL Utterance": "run r script '/usr/bin/Rscript --vanilla /pathto/MyrScript.r'", "Code": "subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)"}, {"ID": 15907200, "NL Utterance": "add a header to a csv file", "Code": "writer.writeheader()"}, {"ID": 33058590, "NL Utterance": "replacing nan in the dataframe `df` with row average", "Code": "df.fillna(df.mean(axis=1), axis=1)"}, {"ID": 12400256, "NL Utterance": "Convert unix timestamp '1347517370' to formatted string '%Y-%m-%d %H:%M:%S'", "Code": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))"}, {"ID": 1269217, "NL Utterance": "Call a base class's class method `do` from derived class `Derived`", "Code": "super(Derived, cls).do(a)"}, {"ID": 23359886, "NL Utterance": "selecting rows in Numpy ndarray 'a', where the value in the first column is 0 and value in the second column is 1", "Code": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]"}, {"ID": 4383082, "NL Utterance": "separate words delimited by one or more spaces into a list", "Code": "re.split(' +', 'hello world sample text')"}, {"ID": 14637696, "NL Utterance": "length of longest element in list `words`", "Code": "len(max(words, key=len))"}, {"ID": 3933478, "NL Utterance": "get the value associated with unicode key 'from_user' of first dictionary in list `result`", "Code": "result[0]['from_user']"}, {"ID": 39112645, "NL Utterance": "Retrieve each line from a file 'File.txt' as a list", "Code": "[line.split() for line in open('File.txt')]"}, {"ID": 1031851, "NL Utterance": "swap keys with values in a dictionary `a`", "Code": "res = dict((v, k) for k, v in a.items())"}, {"ID": 8577137, "NL Utterance": "Open a file `path/to/FILE_NAME.ext` in write mode", "Code": "new_file = open('path/to/FILE_NAME.ext', 'w')"}, {"ID": 17926273, "NL Utterance": null, "Code": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()"}, {"ID": 3735814, "NL Utterance": "Check if any key in the dictionary `dict1` starts with the string `EMP$$`", "Code": "any(key.startswith('EMP$$') for key in dict1)"}, {"ID": 3735814, "NL Utterance": "create list of values from dictionary `dict1` that have a key that starts with 'EMP$$'", "Code": "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]"}, {"ID": 26097916, "NL Utterance": "convert a pandas series `sf` into a pandas dataframe `df` with columns `email` and `list`", "Code": "pd.DataFrame({'email': sf.index, 'list': sf.values})"}, {"ID": 4048964, "NL Utterance": "print elements of list `list` seperated by tabs `\\t`", "Code": "print('\\t'.join(map(str, list)))"}, {"ID": 3182716, "NL Utterance": "print unicode string '\\xd0\\xbf\\xd1\\x80\\xd0\\xb8' with utf-8", "Code": "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))"}, {"ID": 3182716, "NL Utterance": "Encode a latin character in string `Sopet\\xc3\\xb3n` properly", "Code": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')"}, {"ID": 1405602, "NL Utterance": "resized image `image` to width, height of `(x, y)` with filter of `ANTIALIAS`", "Code": "image = image.resize((x, y), Image.ANTIALIAS)"}, {"ID": 35622945, "NL Utterance": "regex, find \"n\"s only in the middle of string `s`", "Code": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)"}, {"ID": 5306756, "NL Utterance": "display the float `1/3*100` as a percentage", "Code": "print('{0:.0f}%'.format(1.0 / 3 * 100))"}, {"ID": 2878084, "NL Utterance": "sort a list of dictionary `mylist` by the key `title`", "Code": "mylist.sort(key=lambda x: x['title'])"}, {"ID": 2878084, "NL Utterance": "sort a list `l` of dicts by dict value 'title'", "Code": "l.sort(key=lambda x: x['title'])"}, {"ID": 2878084, "NL Utterance": "sort a list of dictionaries by the value of keys 'title', 'title_url', 'id' in ascending order.", "Code": "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))"}, {"ID": 9323159, "NL Utterance": "find 10 largest differences between each respective elements of list `l1` and list `l2`", "Code": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))"}, {"ID": 29877663, "NL Utterance": "BeautifulSoup find all 'span' elements in HTML string `soup` with class of 'starGryB sp'", "Code": "soup.find_all('span', {'class': 'starGryB sp'})"}, {"ID": 24189150, "NL Utterance": "write records in dataframe `df` to table 'test' in schema 'a_schema'", "Code": "df.to_sql('test', engine, schema='a_schema')"}, {"ID": 30766151, "NL Utterance": "Extract brackets from string `s`", "Code": "brackets = re.sub('[^(){}[\\\\]]', '', s)"}, {"ID": 1143379, "NL Utterance": "remove duplicate elements from list 'L'", "Code": "list(dict((x[0], x) for x in L).values())"}, {"ID": 12330522, "NL Utterance": "read a file `file` without newlines", "Code": "[line.rstrip('\\n') for line in file]"}, {"ID": 364621, "NL Utterance": "get the position of item 1 in `testlist`", "Code": "[i for (i, x) in enumerate(testlist) if (x == 1)]"}, {"ID": 364621, "NL Utterance": "get the position of item 1 in `testlist`", "Code": "[i for (i, x) in enumerate(testlist) if (x == 1)]"}, {"ID": 364621, "NL Utterance": "get the position of item 1 in `testlist`", "Code": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass"}, {"ID": 364621, "NL Utterance": "get the position of item 1 in `testlist`", "Code": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass"}, {"ID": 364621, "NL Utterance": "get the position of item 1 in `testlist`", "Code": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass"}, {"ID": 364621, "NL Utterance": "get the position of item `element` in list `testlist`", "Code": "print(testlist.index(element))"}, {"ID": 364621, "NL Utterance": "get the position of item `element` in list `testlist`", "Code": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass"}, {"ID": 13145368, "NL Utterance": "find the first element of the tuple with the maximum second element in a list of tuples `lis`", "Code": "max(lis, key=lambda item: item[1])[0]"}, {"ID": 13145368, "NL Utterance": "get the item at index 0 from the tuple that has maximum value at index 1 in list `lis`", "Code": "max(lis, key=itemgetter(1))[0]"}, {"ID": 2689189, "NL Utterance": "Make a delay of 1 second", "Code": "time.sleep(1)"}, {"ID": 12485244, "NL Utterance": "convert list of tuples `L` to a string", "Code": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)"}, {"ID": 755857, "NL Utterance": "Django set default value of field `b` equal to '0000000'", "Code": "b = models.CharField(max_length=7, default='0000000', editable=False)"}, {"ID": 16193578, "NL Utterance": "Sort lis `list5` in ascending order based on the degrees value of its elements", "Code": "sorted(list5, lambda x: (degree(x), x))"}, {"ID": 16193578, "NL Utterance": null, "Code": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))"}, {"ID": 16041405, "NL Utterance": "convert a list  into a generator object", "Code": "(n for n in [1, 2, 3, 5])"}, {"ID": 18837607, "NL Utterance": "remove elements from list `oldlist` that have an index number mentioned in list `removelist`", "Code": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]"}, {"ID": 4710067, "NL Utterance": "Open a file `yourfile.txt` in write mode", "Code": "f = open('yourfile.txt', 'w')"}, {"ID": 7373219, "NL Utterance": "get attribute 'attr' from object `obj`", "Code": "getattr(obj, 'attr')"}, {"ID": 8171751, "NL Utterance": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to tuple", "Code": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))"}, {"ID": 8171751, "NL Utterance": "convert tuple of tuples `(('aa',), ('bb',), ('cc',))` to list in one line", "Code": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))"}, {"ID": 28986489, "NL Utterance": null, "Code": "df['range'].replace(',', '-', inplace=True)"}, {"ID": 19339, "NL Utterance": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "Code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"}, {"ID": 19339, "NL Utterance": "unzip the list `[('a', 1), ('b', 2), ('c', 3), ('d', 4)]`", "Code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])"}, {"ID": 19339, "NL Utterance": "unzip list `original`", "Code": "result = ([a for (a, b) in original], [b for (a, b) in original])"}, {"ID": 19339, "NL Utterance": "unzip list `original` and return a generator", "Code": "result = ((a for (a, b) in original), (b for (a, b) in original))"}, {"ID": 19339, "NL Utterance": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]`", "Code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}, {"ID": 19339, "NL Utterance": "unzip list `[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]` and fill empty results with None", "Code": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])"}, {"ID": 1960516, "NL Utterance": "encode `Decimal('3.9')` to a JSON string", "Code": "json.dumps(Decimal('3.9'))"}, {"ID": 1024847, "NL Utterance": "Add key \"mynewkey\" to dictionary `d` with value \"mynewvalue\"", "Code": "d['mynewkey'] = 'mynewvalue'"}, {"ID": 1024847, "NL Utterance": "Add key 'a' to dictionary `data` with value 1", "Code": "data.update({'a': 1, })"}, {"ID": 1024847, "NL Utterance": "Add key 'a' to dictionary `data` with value 1", "Code": "data.update(dict(a=1))"}, {"ID": 1024847, "NL Utterance": "Add key 'a' to dictionary `data` with value 1", "Code": "data.update(a=1)"}, {"ID": 35837346, "NL Utterance": "find maximal value in matrix `matrix`", "Code": "max([max(i) for i in matrix])"}, {"ID": 20457038, "NL Utterance": "Round number `answer` to 2 precision after the decimal point", "Code": "answer = str(round(answer, 2))"}, {"ID": 2890896, "NL Utterance": "extract ip address from an html string", "Code": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)"}, {"ID": 29836836, "NL Utterance": "filter dataframe `df` by values in column `A` that appear more than once", "Code": "df.groupby('A').filter(lambda x: len(x) > 1)"}, {"ID": 2545397, "NL Utterance": "append each line in file `myfile` into a list", "Code": "[x for x in myfile.splitlines() if x != '']"}, {"ID": 2545397, "NL Utterance": "Get a list of integers `lst` from a file `filename.txt`", "Code": "lst = map(int, open('filename.txt').readlines())"}, {"ID": 35420052, "NL Utterance": "add color bar with image `mappable` to plot `plt`", "Code": "plt.colorbar(mappable=mappable, cax=ax3)"}, {"ID": 29903025, "NL Utterance": "count most frequent 100 words in column 'text' of dataframe `df`", "Code": "Counter(' '.join(df['text']).split()).most_common(100)"}, {"ID": 16330838, "NL Utterance": null, "Code": "re.findall('(.+?):(.+?)\\\\b ?', text)"}, {"ID": 7378180, "NL Utterance": "generate all 2-element subsets of tuple `(1, 2, 3)`", "Code": "list(itertools.combinations((1, 2, 3), 2))"}, {"ID": 4530069, "NL Utterance": "get a value of datetime.today() in the UTC time zone", "Code": "datetime.now(pytz.utc)"}, {"ID": 4842956, "NL Utterance": "Get a new list `list2`by removing empty list from a list of lists `list1`", "Code": "list2 = [x for x in list1 if x != []]"}, {"ID": 4842956, "NL Utterance": "Create `list2` to contain the lists from list `list1` excluding the empty lists from `list1`", "Code": "list2 = [x for x in list1 if x]"}, {"ID": 9262278, "NL Utterance": "Django response with JSON `data`", "Code": "return HttpResponse(data, mimetype='application/json')"}, {"ID": 17284947, "NL Utterance": "get all text that is not enclosed within square brackets in string `example_str`", "Code": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)"}, {"ID": 17284947, "NL Utterance": "Use a regex to get all text in a string `example_str` that is not surrounded by square brackets", "Code": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)"}, {"ID": 14182339, "NL Utterance": "get whatever is between parentheses as a single match, and any char outside as an individual match in string '(zyx)bc'", "Code": "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')"}, {"ID": 14182339, "NL Utterance": "match regex '\\\\((.*?)\\\\)|(\\\\w)' with string '(zyx)bc'", "Code": "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')"}, {"ID": 14182339, "NL Utterance": "match multiple regex patterns with the alternation operator `|` in a string `(zyx)bc`", "Code": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')"}, {"ID": 7126916, "NL Utterance": "formate each string cin list `elements` into pattern '%{0}%'", "Code": "elements = ['%{0}%'.format(element) for element in elements]"}, {"ID": 3595685, "NL Utterance": "Open a background process 'background-process' with arguments 'arguments'", "Code": "subprocess.Popen(['background-process', 'arguments'])"}, {"ID": 18453566, "NL Utterance": "get list of values from dictionary 'mydict' w.r.t. list of keys 'mykeys'", "Code": "[mydict[x] for x in mykeys]"}, {"ID": 12692135, "NL Utterance": "convert list `[('Name', 'Joe'), ('Age', 22)]` into a dictionary", "Code": "dict([('Name', 'Joe'), ('Age', 22)])"}, {"ID": 14401047, "NL Utterance": "average each two columns of array `data`", "Code": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)"}, {"ID": 18886596, "NL Utterance": "double backslash escape all double quotes in string `s`", "Code": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))"}, {"ID": 5932059, "NL Utterance": "split a string into a list of words and whitespace", "Code": "re.split('(\\\\W+)', s)"}, {"ID": 9938130, "NL Utterance": null, "Code": "df.plot(kind='barh', stacked=True)"}, {"ID": 35945473, "NL Utterance": "reverse the keys and values in a dictionary `myDictionary`", "Code": "{i[1]: i[0] for i in list(myDictionary.items())}"}, {"ID": 30729735, "NL Utterance": "finding the index of elements containing substring 'how' and 'what' in a list of strings 'myList'.", "Code": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]"}, {"ID": 1303243, "NL Utterance": "check if object `obj` is a string", "Code": "isinstance(obj, str)"}, {"ID": 1303243, "NL Utterance": "check if object `o` is a string", "Code": "isinstance(o, str)"}, {"ID": 1303243, "NL Utterance": "check if object `o` is a string", "Code": "(type(o) is str)"}, {"ID": 1303243, "NL Utterance": "check if object `o` is a string", "Code": "isinstance(o, str)"}, {"ID": 1303243, "NL Utterance": "check if `obj_to_test` is a string", "Code": "isinstance(obj_to_test, str)"}, {"ID": 8177079, "NL Utterance": "append list `list1` to `list2`", "Code": "list2.extend(list1)"}, {"ID": 8177079, "NL Utterance": "append list `mylog` to `list1`", "Code": "list1.extend(mylog)"}, {"ID": 8177079, "NL Utterance": "append list `a` to `c`", "Code": "c.extend(a)"}, {"ID": 8177079, "NL Utterance": "append items in list `mylog` to `list1`", "Code": "for line in mylog:\n    list1.append(line)"}, {"ID": 4126227, "NL Utterance": "append a tuple of elements from list `a` with indexes '[0][0] [0][2]' to list `b`", "Code": "b.append((a[0][0], a[0][2]))"}, {"ID": 34902378, "NL Utterance": "Initialize `SECRET_KEY` in flask config with `Your_secret_string `", "Code": "app.config['SECRET_KEY'] = 'Your_secret_string'"}, {"ID": 22799300, "NL Utterance": "unpack a series of tuples in pandas into a DataFrame with column names 'out-1' and 'out-2'", "Code": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)"}, {"ID": 1762484, "NL Utterance": "find the index of an element 'MSFT' in a list `stocks_list`", "Code": "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']"}, {"ID": 3464359, "NL Utterance": "rotate the xtick labels of matplotlib plot `ax` by `45` degrees to make long labels readable", "Code": "ax.set_xticklabels(labels, rotation=45)"}, {"ID": 875968, "NL Utterance": "remove symbols from a string `s`", "Code": "re.sub('[^\\\\w]', ' ', s)"}, {"ID": 31258561, "NL Utterance": "Get the current directory of a script", "Code": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))"}, {"ID": 34750084, "NL Utterance": "Find octal characters matches from a string `str` using regex", "Code": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))"}, {"ID": 13209288, "NL Utterance": "split string `input` based on occurrences of regex pattern '[ ](?=[A-Z]+\\\\b)'", "Code": "re.split('[ ](?=[A-Z]+\\\\b)', input)"}, {"ID": 13209288, "NL Utterance": "Split string `input` at every space followed by an upper-case letter", "Code": "re.split('[ ](?=[A-Z])', input)"}, {"ID": 24642040, "NL Utterance": "send multipart encoded file `files` to url `url` with headers `headers` and metadata `data`", "Code": "r = requests.post(url, files=files, headers=headers, data=data)"}, {"ID": 4290716, "NL Utterance": "write bytes `bytes_` to a file `filename` in python 3", "Code": "open('filename', 'wb').write(bytes_)"}, {"ID": 33078554, "NL Utterance": "get a list from a list `lst` with values mapped into a dictionary `dct`", "Code": "[dct[k] for k in lst]"}, {"ID": 15247628, "NL Utterance": "find duplicate names in column 'name' of the dataframe `x`", "Code": "x.set_index('name').index.get_duplicates()"}, {"ID": 783897, "NL Utterance": "truncate float 1.923328437452 to 3 decimal places", "Code": "round(1.923328437452, 3)"}, {"ID": 22859493, "NL Utterance": "sort list `li` in descending order based on the date value in second element of each list in list `li`", "Code": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)"}, {"ID": 29394552, "NL Utterance": "place the radial ticks in plot `ax` at 135 degrees", "Code": "ax.set_rlabel_position(135)"}, {"ID": 3320406, "NL Utterance": "check if path `my_path` is an absolute path", "Code": "os.path.isabs(my_path)"}, {"ID": 2212433, "NL Utterance": "get number of keys in dictionary `yourdict`", "Code": "len(list(yourdict.keys()))"}, {"ID": 2212433, "NL Utterance": "count the number of keys in dictionary `yourdictfile`", "Code": "len(set(open(yourdictfile).read().split()))"}, {"ID": 20067636, "NL Utterance": "pandas dataframe get first row of each group by 'id'", "Code": "df.groupby('id').first()"}, {"ID": 40924332, "NL Utterance": "split a list in first column  into multiple columns keeping other columns as well in pandas data frame", "Code": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)"}, {"ID": 30759776, "NL Utterance": "extract attributes 'src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"' from string `data`", "Code": "re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)"}, {"ID": 25388796, "NL Utterance": "Sum integers contained in strings in list `['', '3.4', '', '', '1.0']`", "Code": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])"}, {"ID": 804995, "NL Utterance": "Call a subprocess with arguments `c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat` that may contain spaces", "Code": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])"}, {"ID": 26441253, "NL Utterance": "reverse a priority queue `q` in python without using classes", "Code": "q.put((-n, n))"}, {"ID": 18897261, "NL Utterance": "make a barplot of data in column `group` of dataframe `df` colour-coded according to list `color`", "Code": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])"}, {"ID": 373194, "NL Utterance": "find all matches of regex pattern '([a-fA-F\\\\d]{32})' in string `data`", "Code": "re.findall('([a-fA-F\\\\d]{32})', data)"}, {"ID": 518021, "NL Utterance": "Get the length of list `my_list`", "Code": "len(my_list)"}, {"ID": 518021, "NL Utterance": "Getting the length of array `l`", "Code": "len(l)"}, {"ID": 518021, "NL Utterance": "Getting the length of array `s`", "Code": "len(s)"}, {"ID": 518021, "NL Utterance": "Getting the length of `my_tuple`", "Code": "len(my_tuple)"}, {"ID": 518021, "NL Utterance": "Getting the length of `my_string`", "Code": "len(my_string)"}, {"ID": 40452956, "NL Utterance": "remove escape character from string \"\\\\a\"", "Code": "\"\"\"\\\\a\"\"\".decode('string_escape')"}, {"ID": 8687018, "NL Utterance": "replace each 'a' with 'b' and each 'b' with 'a' in the string 'obama' in a single pass.", "Code": "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')"}, {"ID": 303200, "NL Utterance": "remove directory tree '/folder_name'", "Code": "shutil.rmtree('/folder_name')"}, {"ID": 13740672, "NL Utterance": "create a new column `weekday` in pandas data frame `data` based on the values in column `my_dt`", "Code": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())"}, {"ID": 20950650, "NL Utterance": "reverse sort Counter `x` by values", "Code": "sorted(x, key=x.get, reverse=True)"}, {"ID": 20950650, "NL Utterance": "reverse sort counter `x` by value", "Code": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)"}, {"ID": 9775297, "NL Utterance": "append a numpy array 'b' to a numpy array 'a'", "Code": "np.vstack((a, b))"}, {"ID": 21887754, "NL Utterance": "numpy concatenate two arrays `a` and `b` along the first axis", "Code": "print(concatenate((a, b), axis=0))"}, {"ID": 21887754, "NL Utterance": "numpy concatenate two arrays `a` and `b` along the second axis", "Code": "print(concatenate((a, b), axis=1))"}, {"ID": 21887754, "NL Utterance": "numpy concatenate two arrays `a` and `b` along the first axis", "Code": "c = np.r_[(a[None, :], b[None, :])]"}, {"ID": 21887754, "NL Utterance": "numpy concatenate two arrays `a` and `b` along the first axis", "Code": "np.array((a, b))"}, {"ID": 2805231, "NL Utterance": "fetch address information for host 'google.com' ion port 80", "Code": "print(socket.getaddrinfo('google.com', 80))"}, {"ID": 17552997, "NL Utterance": "add a column 'day' with value 'sat' to dataframe `df`", "Code": "df.xs('sat', level='day', drop_level=False)"}, {"ID": 4356842, "NL Utterance": "return a 401 unauthorized in django", "Code": "return HttpResponse('Unauthorized', status=401)"}, {"ID": 13598363, "NL Utterance": "Flask set folder 'wherever' as the default template folder", "Code": "Flask(__name__, template_folder='wherever')"}, {"ID": 1849375, "NL Utterance": "How do I INSERT INTO t1 (SELECT * FROM t2) in SQLAlchemy?", "Code": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')"}, {"ID": 3398589, "NL Utterance": "sort a list of lists 'c2' such that third row comes first", "Code": "c2.sort(key=lambda row: row[2])"}, {"ID": 3398589, "NL Utterance": null, "Code": "c2.sort(key=lambda row: (row[2], row[1], row[0]))"}, {"ID": 3398589, "NL Utterance": null, "Code": "c2.sort(key=lambda row: (row[2], row[1]))"}, {"ID": 10960463, "NL Utterance": "set font `Arial` to display non-ascii characters in matplotlib", "Code": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})"}, {"ID": 20576618, "NL Utterance": "Convert  DateTime column 'date' of pandas dataframe 'df' to ordinal", "Code": "df['date'].apply(lambda x: x.toordinal())"}, {"ID": 7263824, "NL Utterance": "get html source of Selenium WebElement `element`", "Code": "element.get_attribute('innerHTML')"}, {"ID": 31793195, "NL Utterance": "Get the integer location of a key `bob` in a pandas data frame", "Code": "df.index.get_loc('bob')"}, {"ID": 7574841, "NL Utterance": "open a 'gnome' terminal from python script and run  'sudo apt-get update' command.", "Code": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')"}, {"ID": 10487278, "NL Utterance": "add an item with key 'third_key' and value 1 to an dictionary `my_dict`", "Code": "my_dict.update({'third_key': 1})"}, {"ID": 10487278, "NL Utterance": "declare an array", "Code": "my_list = []"}, {"ID": 10487278, "NL Utterance": "Insert item `12` to a list `my_list`", "Code": "my_list.append(12)"}, {"ID": 10155684, "NL Utterance": "add an entry 'wuggah' at the beginning of list `myList`", "Code": "myList.insert(0, 'wuggah')"}, {"ID": 3519125, "NL Utterance": "convert a hex-string representation to actual bytes", "Code": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')"}, {"ID": 40144769, "NL Utterance": "select the last column of dataframe `df`", "Code": "df[df.columns[-1]]"}, {"ID": 30787901, "NL Utterance": "get the first value from dataframe `df` where column 'Letters' is equal to 'C'", "Code": "df.loc[df['Letters'] == 'C', 'Letters'].values[0]"}, {"ID": 18730044, "NL Utterance": "converting two lists `[1, 2, 3]` and `[4, 5, 6]` into a matrix", "Code": "np.column_stack(([1, 2, 3], [4, 5, 6]))"}, {"ID": 402504, "NL Utterance": "get the type of `i`", "Code": "type(i)"}, {"ID": 402504, "NL Utterance": "determine the type of variable `v`", "Code": "type(v)"}, {"ID": 402504, "NL Utterance": "determine the type of variable `v`", "Code": "type(v)"}, {"ID": 402504, "NL Utterance": "determine the type of variable `v`", "Code": "type(v)"}, {"ID": 402504, "NL Utterance": "determine the type of variable `v`", "Code": "type(v)"}, {"ID": 402504, "NL Utterance": "get the type of variable `variable_name`", "Code": "print(type(variable_name))"}, {"ID": 2300756, "NL Utterance": "get the 5th item of a generator", "Code": "next(itertools.islice(range(10), 5, 5 + 1))"}, {"ID": 20056548, "NL Utterance": "Print a string `word` with string format", "Code": "print('\"{}\"'.format(word))"}, {"ID": 8546245, "NL Utterance": "join a list of strings `list` using a space ' '", "Code": "\"\"\" \"\"\".join(list)"}, {"ID": 2276416, "NL Utterance": "create list `y` containing two empty lists", "Code": "y = [[] for n in range(2)]"}, {"ID": 3925614, "NL Utterance": "read a file 'C:/name/MyDocuments/numbers' into a list `data`", "Code": "data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]"}, {"ID": 22187233, "NL Utterance": "delete all occurrences of character 'i' in string 'it is icy'", "Code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"}, {"ID": 22187233, "NL Utterance": "delete all instances of a character 'i' in a string 'it is icy'", "Code": "re.sub('i', '', 'it is icy')"}, {"ID": 22187233, "NL Utterance": "delete all characters \"i\" in string \"it is icy\"", "Code": "\"\"\"it is icy\"\"\".replace('i', '')"}, {"ID": 22187233, "NL Utterance": null, "Code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])"}, {"ID": 13413590, "NL Utterance": "Drop rows of pandas dataframe `df` having NaN in column at index \"1\"", "Code": "df.dropna(subset=[1])"}, {"ID": 598398, "NL Utterance": "get elements from list `myList`, that have a field `n` value 30", "Code": "[x for x in myList if x.n == 30]"}, {"ID": 10351772, "NL Utterance": "converting list of strings `intstringlist` to list of integer `nums`", "Code": "nums = [int(x) for x in intstringlist]"}, {"ID": 10351772, "NL Utterance": "convert list of string numbers into list of integers", "Code": "map(int, eval(input('Enter the unfriendly numbers: ')))"}, {"ID": 493386, "NL Utterance": "print \".\" without newline", "Code": "sys.stdout.write('.')"}, {"ID": 6569528, "NL Utterance": "round off the float that is the product of `2.52 * 100` and convert it to an int", "Code": "int(round(2.51 * 100))"}, {"ID": 3964681, "NL Utterance": "Find all files in directory \"/mydir\" with extension \".txt\"", "Code": "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass"}, {"ID": 3964681, "NL Utterance": "Find all files in directory \"/mydir\" with extension \".txt\"", "Code": "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass"}, {"ID": 3964681, "NL Utterance": "Find all files in directory \"/mydir\" with extension \".txt\"", "Code": "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass"}, {"ID": 20865487, "NL Utterance": "plot dataframe `df` without a legend", "Code": "df.plot(legend=False)"}, {"ID": 13368659, "NL Utterance": "loop through the IP address range \"192.168.x.x\"", "Code": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)"}, {"ID": 13368659, "NL Utterance": "loop through the IP address range \"192.168.x.x\"", "Code": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass"}, {"ID": 13368659, "NL Utterance": "loop through the IP address range \"192.168.x.x\"", "Code": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)"}, {"ID": 4065737, "NL Utterance": "Sum the corresponding decimal values for binary values of each boolean element in list `x`", "Code": "sum(1 << i for i, b in enumerate(x) if b)"}, {"ID": 8691311, "NL Utterance": "write multiple strings `line1`, `line2` and `line3` in one line in a file `target`", "Code": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))"}, {"ID": 10632111, "NL Utterance": "Convert list of lists `data` into a flat list", "Code": "[y for x in data for y in (x if isinstance(x, list) else [x])]"}, {"ID": 15392730, "NL Utterance": "Print new line character as `\\n` in a string `foo\\nbar`", "Code": "print('foo\\nbar'.encode('string_escape'))"}, {"ID": 1010961, "NL Utterance": "remove last comma character ',' in string `s`", "Code": "\"\"\"\"\"\".join(s.rsplit(',', 1))"}, {"ID": 23855976, "NL Utterance": "calculate the mean of each element in array `x` with the element previous to it", "Code": "(x[1:] + x[:-1]) / 2"}, {"ID": 23855976, "NL Utterance": "get an array of the mean of each two consecutive values in numpy array `x`", "Code": "x[:-1] + (x[1:] - x[:-1]) / 2"}, {"ID": 6375343, "NL Utterance": "load data containing `utf-8` from file `new.txt` into numpy array `arr`", "Code": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')"}, {"ID": 1547733, "NL Utterance": "reverse sort list of dicts `l` by value for key `time`", "Code": "l = sorted(l, key=itemgetter('time'), reverse=True)"}, {"ID": 1547733, "NL Utterance": "Sort a list of dictionary `l` based on key `time` in descending order", "Code": "l = sorted(l, key=lambda a: a['time'], reverse=True)"}, {"ID": 37080612, "NL Utterance": "get rows of dataframe `df` that match regex '(Hel|Just)'", "Code": "df.loc[df[0].str.contains('(Hel|Just)')]"}, {"ID": 14716342, "NL Utterance": "find the string in `your_string` between two special characters \"[\" and \"]\"", "Code": "re.search('\\\\[(.*)\\\\]', your_string).group(1)"}, {"ID": 18684076, "NL Utterance": null, "Code": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]"}, {"ID": 1666700, "NL Utterance": "count number of times string 'brown' occurred in string 'The big brown fox is brown'", "Code": "\"\"\"The big brown fox is brown\"\"\".count('brown')"}, {"ID": 18979111, "NL Utterance": "decode json string `request.body` to python dict", "Code": "json.loads(request.body)"}, {"ID": 7243750, "NL Utterance": "download the file from url `url` and save it under file `file_name`", "Code": "urllib.request.urlretrieve(url, file_name)"}, {"ID": 743806, "NL Utterance": "split string `text` by space", "Code": "text.split()"}, {"ID": 743806, "NL Utterance": "split string `text` by \",\"", "Code": "text.split(',')"}, {"ID": 743806, "NL Utterance": "Split string `line` into a list by whitespace", "Code": "line.split()"}, {"ID": 35044115, "NL Utterance": "replace dot characters  '.' associated with ascii letters in list `s` with space ' '", "Code": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]"}, {"ID": 38388799, "NL Utterance": "sort list `list_of_strings` based on second index of each string `s`", "Code": "sorted(list_of_strings, key=lambda s: s.split(',')[1])"}, {"ID": 9609375, "NL Utterance": "call multiple bash function \u2018vasp\u2019 and \u2018tee tee_output\u2019 using \u2018|\u2019", "Code": "subprocess.check_call('vasp | tee tee_output', shell=True)"}, {"ID": 37004138, "NL Utterance": "eliminate all strings from list `lst`", "Code": "[element for element in lst if isinstance(element, int)]"}, {"ID": 37004138, "NL Utterance": "get all the elements except strings from the list 'lst'.", "Code": "[element for element in lst if not isinstance(element, str)]"}, {"ID": 72899, "NL Utterance": "Sort a list of dictionaries `list_to_be_sorted` by the value of the dictionary key `name`", "Code": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])"}, {"ID": 72899, "NL Utterance": "sort a list of dictionaries `l` by values in key `name` in descending order", "Code": "newlist = sorted(l, key=itemgetter('name'), reverse=True)"}, {"ID": 72899, "NL Utterance": null, "Code": "list_of_dicts.sort(key=operator.itemgetter('name'))"}, {"ID": 72899, "NL Utterance": null, "Code": "list_of_dicts.sort(key=operator.itemgetter('age'))"}, {"ID": 36402748, "NL Utterance": null, "Code": "df.groupby('prots').sum().sort('scores', ascending=False)"}, {"ID": 29881993, "NL Utterance": "join together with \",\" elements inside a list indexed with 'category' within a dictionary `trans`", "Code": "\"\"\",\"\"\".join(trans['category'])"}, {"ID": 34158494, "NL Utterance": "concatenate array of strings `['A', 'B', 'C', 'D']` into a string", "Code": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])"}, {"ID": 7750557, "NL Utterance": "get json data from restful service 'url'", "Code": "json.load(urllib.request.urlopen('url'))"}, {"ID": 12666897, "NL Utterance": "Remove all strings from a list a strings `sents` where the values starts with `@$\\t` or `#`", "Code": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]"}, {"ID": 2984751, "NL Utterance": "django filter by hour", "Code": "Entry.objects.filter(pub_date__contains='08:00')"}, {"ID": 5944630, "NL Utterance": "sort a list of dictionary `list` first by key `points` and then by `time`", "Code": "list.sort(key=lambda item: (item['points'], item['time']))"}, {"ID": 7852855, "NL Utterance": "convert datetime object `(1970, 1, 1)` to seconds", "Code": "(t - datetime.datetime(1970, 1, 1)).total_seconds()"}, {"ID": 2763750, "NL Utterance": "insert `_suff` before the file extension in `long.file.name.jpg` or replace `_a` with `suff` if it precedes the extension.", "Code": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')"}, {"ID": 6420361, "NL Utterance": "reload a module `module`", "Code": "import imp\nimp.reload(module)"}, {"ID": 19546911, "NL Utterance": "Convert integer `number` into an unassigned integer", "Code": "struct.unpack('H', struct.pack('h', number))"}, {"ID": 9746522, "NL Utterance": "convert int values in list `numlist` to float", "Code": "numlist = [float(x) for x in numlist]"}, {"ID": 20107570, "NL Utterance": "write dataframe `df`, excluding index, to a csv file", "Code": "df.to_csv(filename, index=False)"}, {"ID": 8740353, "NL Utterance": "convert a urllib unquoted string `unescaped` to a json data `json_data`", "Code": "json_data = json.loads(unescaped)"}, {"ID": 5891453, "NL Utterance": "Create a list containing all ascii characters as its elements", "Code": "[chr(i) for i in range(127)]"}, {"ID": 18367007, "NL Utterance": "write `newFileBytes` to a binary file `newFile`", "Code": "newFile.write(struct.pack('5B', *newFileBytes))"}, {"ID": 21805490, "NL Utterance": "python regex - check for a capital letter with a following lowercase in string `string`", "Code": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)"}, {"ID": 16125229, "NL Utterance": "get the last key of dictionary `dict`", "Code": "list(dict.keys())[-1]"}, {"ID": 6159900, "NL Utterance": "write line \"hi there\" to file `f`", "Code": "print('hi there', file=f)"}, {"ID": 6159900, "NL Utterance": "write line \"hi there\" to file `myfile`", "Code": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()"}, {"ID": 6159900, "NL Utterance": "write line \"Hello\" to file `somefile.txt`", "Code": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')"}, {"ID": 19527279, "NL Utterance": "convert unicode string `s` to ascii", "Code": "s.encode('iso-8859-15')"}, {"ID": 10668585, "NL Utterance": "Django get maximum value associated with field 'added' in model `AuthorizedEmail`", "Code": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]"}, {"ID": 356483, "NL Utterance": "Find all numbers and dots from a string `text` using regex", "Code": "re.findall('Test([0-9.]*[0-9]+)', text)"}, {"ID": 356483, "NL Utterance": "python regex  to find all numbers and dots from 'text'", "Code": "re.findall('Test([\\\\d.]*\\\\d+)', text)"}, {"ID": 38081866, "NL Utterance": "execute script 'script.ps1' using 'powershell.exe' shell", "Code": "os.system('powershell.exe', 'script.ps1')"}, {"ID": 7349646, "NL Utterance": "Sort a list of tuples `b` by third item in the tuple", "Code": "b.sort(key=lambda x: x[1][2])"}, {"ID": 2430539, "NL Utterance": "get a list of all keys in Cassandra database `cf` with pycassa", "Code": "list(cf.get_range().get_keys())"}, {"ID": 10607688, "NL Utterance": "create a datetime with the current date & time", "Code": "datetime.datetime.now()"}, {"ID": 30843103, "NL Utterance": "get the index of an integer `1` from a list `lst` if the list also contains boolean items", "Code": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)"}, {"ID": 4918425, "NL Utterance": "subtract 13 from every number in a list `a`", "Code": "a[:] = [(x - 13) for x in a]"}, {"ID": 701402, "NL Utterance": "choose a random file from the directory contents of the C drive, `C:\\\\`", "Code": "random.choice(os.listdir('C:\\\\'))"}, {"ID": 17794266, "NL Utterance": "get the highest element in absolute value in a numpy matrix `x`", "Code": "max(x.min(), x.max(), key=abs)"}, {"ID": 30551576, "NL Utterance": "Get all urls within text `s`", "Code": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)"}, {"ID": 30551576, "NL Utterance": "match urls whose domain doesn't start with `t` from string `document` using regex", "Code": "re.findall('http://[^t][^s\"]+\\\\.html', document)"}, {"ID": 113534, "NL Utterance": "split a string `mystring` considering the spaces ' '", "Code": "mystring.replace(' ', '! !').split('!')"}, {"ID": 5838735, "NL Utterance": "open file `path` with mode 'r'", "Code": "open(path, 'r')"}, {"ID": 36003967, "NL Utterance": "sum elements at the same index in list `data`", "Code": "[[sum(item) for item in zip(*items)] for items in zip(*data)]"}, {"ID": 7635237, "NL Utterance": "add a new axis to array `a`", "Code": "a[:, (np.newaxis)]"}]}