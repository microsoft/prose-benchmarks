{
    "submission": [
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    elif x[1].strip() not in marks[int(x[0])]:\n            marks[int(x[0])][x[1].strip()]=int(x[2])\n            \n    else:\n            y=int(x[2])\n            marks[int(x[0])][x[1].strip()]+=y\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\" # \"+y+\" # \"+str(marks[x][y]))\nprint()",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n        elif x[1].strip() not in marks[int(x[0])]:\n            marks[int(x[0])][x[1].strip()]=int(x[2])\n            \n        else:\n            y=int(x[2])\n            marks[int(x[0])][x[1].strip()]+=y\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\"#\"+y+\"#\"+str(marks[x][y]))\nprint()"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\nfor i in range(1, N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\nmarksSum={}\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\nfor i in range(1, N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\nmarksSum={}\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    \n        elif i[1].strip() not in marksSum[int(i[0])]:\n           marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n         s.append(d[0]+' # '+d[1])\n         m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0    \nwhile h<len(y):\n    print(y[h])\n    h=h+1",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr[]\ns[]\nm[]\ny[]\ni=0\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q]+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1\n        "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n         s.append(d[0]+' # '+d[1])\n         m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0    \nwhile h<len(y):\n    print(y[h])\n    h=h+1    ",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN = int(input())\nTotal = []\n\nfor i in range (1,N+1):\n    line= input()\n    student=line.split(',')\n    Total.append(student)\n    \n    marksSum={}\n    \n    for i in Total:\n        if int([0]) not in marksSum:\n            marksSum[(i[0]={}\n            marksSum[int(i[0])][i[1].strip()]=int(i[2])\n            \n        elif i[1].strip() not in marksSum[int(i[0])]:\n            marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        else:\n            k=int(i[2])\n            marksSum[int(i[0])][i[1].strip()]+=k\nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))\n        \n        "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN = int(input())\ntotal = []\n\nfor i in range(1,N+1):\n    line = input()\n    student = line.split(',')\n    total.append(student)\n\nsumofmarks = {}\n\nfor i in total:\n    if int(i[0]) not in sumofmarks:\n        sumofmarks[int(i[0])] = {}\n        sumofmarks[int(i[0])][i[1].strip()]=int(i[2])\n    \n    elif i[1].strip() not in sumofmarks[int(i[0])]:\n        sumofmarks[int(i[0])][i[1].strip()] = int(i[2])\n    else:\n        k = int(i[2])\n        sumofmarks[int(i[0])][i[1].strip()] += k\nfor i in sorted (sumofmarks):\n    for j in sorted (sumofmarks[i]):\n        print(str(i) + ' # ' +j+ ' # '+ str(sumofmarks[i][j]))",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\na = int(input())\ntotal = []\nfor i in range(1,a+1):\n    line = input()\n    student = line.split(',')\n    total.append(student)\nsumofmarks = {}\nfor i in total:\n    if int(i[0]) not in sumofmarks:\n        sumofmarks[int(i[0])] = {}\n        sumofmarks[int(i[0])][i[1].strip()]=int(i[2])\n    elif i[1].strip() not in sumofmarks[int(i[0])]:\n        sumofmarks[int(i[0])][i[1].strip()] = int(i[2])\n    else:\n        k = int(i[2])\n        sumofmarks[int(i[0])][i[1].strip()+= k\n    "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n         s.append(d[0]+' # '+d[1])\n         m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0    \nwhile h<len(y):\n    print(y[h])\n    h=h+1",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+'#'  +d[1]in s:\n        q=s.index(d[0]+'#'+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+'#'d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<les(s):\n    f=s[x]+'#'+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1\n    "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nx = int(input())\ntotal=[]\n\nfor i in range(1,x+1):\n    line =input()\n    student =line.split(',')\n    total.append(student)\n\nmarkssum={}\n\nfor i in total:\n    if int(i[0]) not in markssum:\n        markssum[int(i[0])]={}\n        markssum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in markssum[int(i[0])]:\n        markssum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k =int(i[2])\n        markssum[int(i[0])][i[1].strip()] += k\n        \nfor i in sorted(markssum):\n    for j in sorted(markssum[i]):\n        print(str(i)+' # '+j+' # '+ str(markssum[i][j]))",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN = int(input())\ntotal=[]\nfor i in range(1,N+1):\n    line =input()\n    student =line.split(',')\n    total.append(student)\n\nmarkssum = []\nfor i in total:\n    if int(i[0]) not in markssum:\n        markssum =[int(i[0])]={}\n        markssum =[int(i[0])][i[1].strip()]=int(i[2])\n    elif i[1].strip() not in markssum[int(i[0])]:\n        markssum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k =int(i[2])\n        markssum[int(i[0])][i[1].strip()] += k\n        \nfor i in sorted(markssum):\n    for j in sorted(markssum[i]):\n        print(str(i)+'#'+j+'#'+ str(markssum[i][j]))"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=[1]\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','' )\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q]+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]=' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    elif x[1].strip() not in marks[int(x[0])]:\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    else:\n        y=int(x[2])\n        marks[int(x[0])][x[1].strip()]+=y\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\" # \"+y+\" # \"+str(marks[x][y]))\nprint()",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    elif x[1].strip() not in marks:[int(x[0])]:\n        marks[int(x[0])][x[1].strip()]=int(x[2])\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\" # \"+y+\" # \"+str(marks[x][y]))\nprint()"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\n\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))\n        ",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\n\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j\" # \"+str(marksSum[i][j]))\n        "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\n\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))\n",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\n\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nprint()\nprint(total)\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    else print(i[1].strip,i[0])\n        \n\nprint()\nprint(marksSum)\n\nif 'CS102' in marksSum[101]:\n    print(\"YEs\")\nelse:\n    print(\"No\")"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1\n    ",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1\n    "
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nn= int(input())\na= {}\nfor i in range(n):\n    s=input().split(\",\")\n    key = s[0].strip()+' # '+ s[1].strip()\n    if key in a:\n        a[key]+=int(s[2])\n    else:\n        a[key]=int(s[2])\nli=[]\nfor key,value in a.items():\n    b=str(key)+\" # \"+str(value)\n    li.append(b)\nli.sort()\nfor i in li:\n    print(i)",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nn= int(input())\na= {}\nfor i in range(n):\n    s=input().split(\",\")\n    key = s[0].strip()+' # '+ s[1].strip()\n        a[s[0]]+=int(s[2])\n    else:\n        a[s[0]]=int(s[2])\nfor key,value in a.items():\n    print(str(key)+\" # \"+str(value))"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n         s.append(d[0]+' # '+d[1])\n         m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0    \nwhile h<len(y):\n    print(y[h])\n    h=h+1",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\ni=str(input())\nm=i.split(\\n,)\nN=int(m[0])\nk=1\nwhile k<N-1:\n    a=m[k]\n    a=a.strip()\n    b=m.split(',',)\n    print(b)\n    k=k=1"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\ntotal=[]\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n    \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nline=input()\nstudent=line.split(',')\ntotal.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n    \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j])"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n    \n    elif x[1].strip() not in marks[int(x[0])]:\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    else:\n        y=int(x[2])\n        marks[int(x[0])][x[1].strip()]+=y\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\" # \"+y+\" # \"+str(marks[x][y]))\nprint()",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]=int(x[2])\n    else:\n        y=int(x[2])\n        marks[int(x[0])]+=y\nfor x in sorted(marks):\n    print(str(x)+\"#\"str(x[1])+\"#\"+str(marks[x]))"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nt=int(input())\ntotal=[]\nfor t in range(1,t+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarks={}\nfor x in total:\n    if int(x[0]) not in marks:\n        marks[int(x[0])]={}\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n    \n    elif x[1].strip() not in marks[int(x[0])]:\n        marks[int(x[0])][x[1].strip()]=int(x[2])\n        \n    else:\n        y=int(x[2])\n        marks[int(x[0])][x[1].strip()]+=y\nfor x in sorted(marks):\n    for y in sorted(marks[x]):\n        print(str(x)+\" # \"+y+\" # \"+str(marks[x][y]))\nprint()",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN = int(input())\ntotal=[]\n\nfor i in range(1,N+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n    \nmarksSum={}\n\nfor i in total:\n    if int(1[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elis i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(1[2])\n    else:\n        k=int(i[2])\n        marksSum[int(1[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+\" # \" + str(marksSum[i][j]))"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nx = int(input())\ntotal=[]\n\nfor i in range(1,x+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])]={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k\n        \nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(marksSum[i][j]))",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nx = int(input())\ntotal=[]\n\nfor i in range(1,x+1):\n    line=input()\n    student=line.split(',')\n    total.append(student)\n\nmarksSum={}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])={}\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+=k"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]+' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\nN=int(input())\nr=[]\ns=[]\nm=[]\ny=[]\ni=1\nwhile i<=N:\n    t=0\n    z=str(input())\n    k=z.replace(' ','',)\n    d=k.split(',',)\n    if d[0]+' # '+d[1] in s:\n        q=s.index(d[0]+' # '+d[1])\n        t=int(m[q])+int(d[2])\n        m[q]=t\n    else:\n        s.append(d[0]+' # '+d[1])\n        m.append(d[2])\n    i=i+1\nx=0\nwhile x<len(s):\n    f=s[x]' # '+str(m[x])\n    y.append(f)\n    y.sort()\n    x=x+1\nh=0\nwhile h<len(y):\n    print(y[h])\n    h=h+1"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\na = int(input())\ntotal = []\n\nfor i in range (1,a+1):\n    line = input()\n    stu = line.split(',')\n    total.append(stu)\n    \nm_sum = {}\n\nfor i in total:\n    if int(i[0]) not in m_sum:\n        m_sum[int(i[0])]={}\n        m_sum[int(i[0])][i[1].strip()]=int(i[2])\n        \n    elif i[1].strip() not in m_sum[int(i[0])]:\n        m_sum[int(i[0])][i[1].strip()]=int(i[2])\n    else:\n        k=int(i[2])\n        m_sum[int(i[0])][i[1].strip()]+=k\n\nfor i in sorted(m_sum):\n    for j in sorted(m_sum[i]):\n        print(str(i)+\" # \"+j+\" # \"+str(m_sum[i][j]))\n",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\na = input()\ndata = []\nd=tuple()\nfor i in range(int(a)):\n    data.append(input().split(',')\nfor x in data:\n    d=tuple() + 'CS'(int(value)) + int(value)\nfor k in d:\n    print(k,d[k],sep'#')\n"
        },
        {
            "semantics_correct": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\ninitial_input = int(input())\ntotal = []\n\nfor i in range(1, initial_input+1):\n    line = input()\n    student = line.split(',')\n    total.append(student)\n\nSums_of_Marks= {}\n\nfor i in total:\n    if int(i[0]) not in Sums_of_Marks:\n        Sums_of_Marks[int(i[0])] = {}\n        Sums_of_Marks[int(i[0])][i[1].strip()] = int(i[2])\n        \n    elif i[1].strip() not in Sums_of_Marks[int(i[0])]:\n        Sums_of_Marks[int(i[0])][i[1].strip()] = int(i[2])\n    else: \n        k = int(i[2])\n        Sums_of_Marks[int(i[0])][i[1].strip()]+= k\n\nfor i in sorted(Sums_of_Marks):\n    for j in sorted(Sums_of_Marks[i]):\n        print(str(i) + \" # \" + j + \" # \" + str(Sums_of_Marks[i][j]))\n",
            "syntax_incorrect": "# compile-errors:success: Compilation Successful #\n# compile-result:1 #\n# save-event:compile #\n    line = input()\n    student = line.split(',')\n    total.append(student)\n\nmarksSum= {}\n\nfor i in total:\n    if int(i[0]) not in marksSum:\n        marksSum[int(i[0])] = {}\n        marksSum[int(i[0])][i[1].strip()] = int(i[2])\n    elif i[1].strip() not in marksSum[int(i[0])]:\n        marksSum[int(i[0])][i[1].strip()] = int(i(2))\n    else: \n        k = int(i[2])\n        marksSum[int(i[0])][i[1].strip()]+ = k\n\nfor i in sorted(marksSum):\n    for j in sorted(marksSum[i]):\n        print(str(i) + \" # \" + j + \" # \" + str(marksSum[i][j]))\n"
        }
    ],
    "IO_example": [
        {
            "IO_number": "19896",
            "input": "4\n101, CS101, 10\n101,   CS102, 20\n102, CS102  , 30\n101,CS101,-10",
            "output": "101 # CS101 # 0\n101 # CS102 # 20\n102 # CS102 # 30\n"
        },
        {
            "IO_number": "19897",
            "input": "6\n101, CS101, 10\n102,   CS102, 20\n102, CS102  , 30\n101,CS101,10\n101, CS101, 10\n102,   CS102, 20\n",
            "output": "101 # CS101 # 30\n102 # CS102 # 70\n"
        },
        {
            "IO_number": "19898",
            "input": "2\n101, CS101, 1\n101, CS102, 1",
            "output": "101 # CS101 # 1\n101 # CS102 # 1\n"
        },
        {
            "IO_number": "19899",
            "input": "10\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1\n101, CS101, 1",
            "output": "101 # CS101 # 10\n"
        },
        {
            "IO_number": "19900",
            "input": "10\n101, CS101, 10\n101,   CS102, 20\n102, CS102  , 30\n102,                                                                           CS101,-10\n101,   CS102, 10\n102, CS101  , 30\n103, EE121a, 25\n105, ME243, 33\n102, EE121a, 5\n101, ME243, 37",
            "output": "101 # CS101 # 10\n101 # CS102 # 30\n101 # ME243 # 37\n102 # CS101 # 20\n102 # CS102 # 30\n102 # EE121a # 5\n103 # EE121a # 25\n105 # ME243 # 33\n"
        },
        {
            "IO_number": "19901",
            "input": "10\n101, CS101, 10\n101,   CS102, 20\n102, CS102  , 30\n102,                                                                           CS101,-10\n101,   CS102, 10\n102, CS101  , 30\n103, EE121a, 25\n105, ME243, 33\n102, EE121a, 5\n102, EE121, 5\n",
            "output": "101 # CS101 # 10\n101 # CS102 # 30\n102 # CS101 # 20\n102 # CS102 # 30\n102 # EE121 # 5\n102 # EE121a # 5\n103 # EE121a # 25\n105 # ME243 # 33\n"
        },
        {
            "IO_number": "19902",
            "input": "1\n101, CS101, 10",
            "output": "101 # CS101 # 10\n"
        }
    ],
    "reference_solution": "records=int(input())\n\nRoll2Subj = dict()\nfor i in range(records):\n    inp  = input().split(',')\n    roll = int(inp[0])\n    subj = inp[1].strip()\n    marks= int(inp[2])\n    if roll not in Roll2Subj:\n        Roll2Subj[roll] = dict()\n    \n    Roll2Subj[roll][subj] = Roll2Subj[roll].get(subj, 0) + marks\n    \n\nfor roll in sorted(Roll2Subj.keys()):\n    subjects = sorted(Roll2Subj[roll].keys())\n    for subj in subjects:\n        print(roll, subj, Roll2Subj[roll][subj], sep=' # ')",
    "statement": "This problem is a continuation of the previous one, you need to create a program for managing marks for the students of some batch. Note that the expected OUTPUT is different.\n\nThe input to the program will be as described next:\nThe first line will contain a positive integer <b>N</b>. This will be followed by <b>N</b> lines, where each line will contain <b>three</b> items, separated by COMMA (,):\n  \n   <b>Roll Number, Subject Code, Marks</b>\n\nHere <b>Roll Number</b> is a positive integer, <b>Subject Code</b> is an alpha-numeric string and <b>Marks</b> are integers. Any of the three items can repeat in the input. Also, whitespaces are allowed around the comma.\n\nYou task is to print the TOTAL marks for each <b>Roll Number</b> for each <b>Subject Code</b> on separate lines, sorted first by the Roll Number then by the Subject Code. Each Line in the output will have the form:\n     Roll Number # Subject Code # Marks \ni.e., items are to be separated by a SPACE-HASH-SPACE (\" # \")  in the output.\n\nEXAMPLES:\n____________________________________\nInput:\n4\n101, CS101, 10\n101,   CS102, 20\n102, CS102  , 30\n101,CS101,-10\n\nOutput:\n101 # CS101 # 0\n101 # CS102 # 20\n102 # CS102 # 30\n____________________________________\nInput:\n6\n101, CS101, 10\n102,   CS102, 20\n102, CS102  , 30\n101,CS101,10\n101, CS101, 10\n102,   CS102, 20\n\nOutput:\n101 # CS101 # 30\n102 # CS102 # 70\n___________________________________",
    "problem_ID": "2879"
}